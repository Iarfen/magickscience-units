/** \class scifir::vector_unit_nd
* \brief Class that creates a vector in ND, which means a variable number of dimensions. A vector_unit_nd can change to be in 1D, in 2D or in 3D, but it cannot be in more than one dimension at the same time. The member-variables of vector_unit_nd are the value and the vector<dimension> of scalar_unit, and a vector<angle> angles. The number of angles is equal to the number of dimensions vector unit has - 1. In 1D vector_unit_nd doesn't has angles, in 2D vector_unit_nd is in **polar coordinates** and has 1 angle, and in 3D vector_unit_nd is in **spherical coordinates** and has 2 angles. **Initialization string** example: "1 N 20째 30째 40째". '째' is the Unicode Character **U+00B0**.

* \fn vector_unit_nd::vector_unit_nd()
* \brief Default constructor. The value is 0, the dimensions are empty and the angles are empty.

* \fn vector_unit_nd::vector_unit_nd(const vector_unit_nd& x)
* \brief Copy constructor. The member-variables are copied from vector_unit_nd x.

* \fn vector_unit_nd::vector_unit_nd(vector_unit_nd&& x)
* \brief Move constructor. The member-variables are moved from vector_unit_nd x.

* \fn vector_unit_nd::vector_unit_nd(float new_value,const string& init_dimensions)
* \brief Constructor. The value is new_value and the dimensions are initialized with the initialization string of dimensions init_dimensions.

* \fn vector_unit_nd::vector_unit_nd(float new_value,const string& init_dimensions,const vector<float>& new_angles)
* \brief Constructor. The value is new_value, the dimensions are initialized with the initialization string of dimensions init_dimensions, the angles are constructed with new_angles. With 1 angle the vector will be in 2D, with 2 angles it will be in 3D.

* \fn vector_unit_nd::vector_unit_nd(float new_value,const string& init_dimensions,const vector<angle>& new_angles)
* \brief Constructor. The value is new_value, the dimensions are initialized with the initialization string of dimensions init_dimensions, the angles are new_angles. With 1 angle the vector will be in 2D, with 2 angles it will be in 3D.

* \fn vector_unit_nd::vector_unit_nd(double new_value,const string& init_dimensions)
* \brief Constructor. The value is new_value (the double is casted to a float) and the dimensions are initialized with the initialization string of dimensions init_dimensions.

* \fn vector_unit_nd::vector_unit_nd(double new_value,const string& init_dimensions,const vector<float>& new_angles)
* \brief Constructor. The value is new_value (the double is casted to a float), the dimensions are initialized with the initialization string of dimensions init_dimensions, the angles are constructed with new_angles. With 1 angle the vector will be in 2D, with 2 angles it will be in 3D.

* \fn vector_unit_nd::vector_unit_nd(double new_value,const string& init_dimensions,const vector<angle>& new_angles)
* \brief Constructor. The value is new_value (the double is casted to a float), the dimensions are initialized with the initialization string of dimensions init_dimensions, the angles are new_angles. With 1 angle the vector will be in 2D, with 2 angles it will be in 3D.

* \fn vector_unit_nd::vector_unit_nd(long double new_value,const string& init_dimensions)
* \brief Constructor. The value is new_value (the long double is casted to a float) and the dimensions are initialized with the initialization string of dimensions init_dimensions.

* \fn vector_unit_nd::vector_unit_nd(long double new_value,const string& init_dimensions,const vector<float>& new_angles)
* \brief Constructor. The value is new_value (the long double is casted to a float), the dimensions are initialized with the initialization string of dimensions init_dimensions, the angles are constructed with new_angles. With 1 angle the vector will be in 2D, with 2 angles it will be in 3D.

* \fn vector_unit_nd::vector_unit_nd(long double new_value,const string& init_dimensions,const vector<angle>& new_angles)
* \brief Constructor. The value is new_value (the long double is casted to a float), the dimensions are initialized with the initialization string of dimensions init_dimensions, the angles are new_angles. With 1 angle the vector will be in 2D, with 2 angles it will be in 3D.

* \fn vector_unit_nd::vector_unit_nd(int new_value,const string& init_dimensions)
* \brief Constructor. The value is new_value (the int is casted to a float) and the dimensions are initialized with the initialization string of dimensions init_dimensions.

* \fn vector_unit_nd::vector_unit_nd(int new_value,const string& init_dimensions,const vector<float>& new_angles)
* \brief Constructor. The value is new_value (the int is casted to a float), the dimensions are initialized with the initialization string of dimensions init_dimensions, the angles are constructed with new_angles. With 1 angle the vector will be in 2D, with 2 angles it will be in 3D.

* \fn vector_unit_nd::vector_unit_nd(int new_value,const string& init_dimensions,const vector<angle>& new_angles)
* \brief Constructor. The value is new_value (the int is casted to a float), the dimensions are initialized with the initialization string of dimensions init_dimensions, the angles are new_angles. With 1 angle the vector will be in 2D, with 2 angles it will be in 3D.

* \fn vector_unit_nd::vector_unit_nd(float new_value,const vector<dimension>& new_dimensions)
* \brief The value is new_value and the dimensions are initialized with a vector of dimensions.

* \fn vector_unit_nd::vector_unit_nd(float new_value,const vector<dimension>& new_dimensions,const vector<float>& new_angles)
* \brief The value is new_value, the dimensions are initialized with a vector of dimensions and the angles are constructed with new_angles.

* \fn vector_unit_nd::vector_unit_nd(float new_value,const vector<dimension>& new_dimensions,const vector<angle>& new_angles)
* \brief The value is new_value, the dimensions are initialized with a vector of dimensions and the angles are new_angles.

* \fn vector_unit_nd::vector_unit_nd(double new_value,const vector<dimension>& new_dimensions)
* \brief The value is new_value (the double is casted to a float) and the dimensions are initialized with a vector of dimensions.

* \fn vector_unit_nd::vector_unit_nd(double new_value,const vector<dimension>& new_dimensions,const vector<float>& new_angles)
* \brief The value is new_value (the double is casted to a float), the dimensions are initialized with a vector of dimensions and the angles are constructed with new_angles.

* \fn vector_unit_nd::vector_unit_nd(double new_value,const vector<dimension>& new_dimensions,const vector<angle>& new_angles)
* \brief The value is new_value (the double is casted to a float), the dimensions are initialized with a vector of dimensions and the angles are new_angles.

* \fn vector_unit_nd::vector_unit_nd(long double new_value,const vector<dimension>& new_dimensions)
* \brief The value is new_value (the long double is casted to a float) and the dimensions are initialized with a vector of dimensions.

* \fn vector_unit_nd::vector_unit_nd(long double new_value,const vector<dimension>& new_dimensions,const vector<float>& new_angles)
* \brief The value is new_value (the long double is casted to a float), the dimensions are initialized with a vector of dimensions and the angles are constructed with new_angles.

* \fn vector_unit_nd::vector_unit_nd(long double new_value,const vector<dimension>& new_dimensions,const vector<angle>& new_angles)
* \brief The value is new_value (the long double is casted to a float), the dimensions are initialized with a vector of dimensions and the angles are new_angles.

* \fn vector_unit_nd::vector_unit_nd(int new_value,const vector<dimension>& new_dimensions)
* \brief The value is new_value (the int is casted to a float) and the dimensions are initialized with a vector of dimensions.

* \fn vector_unit_nd::vector_unit_nd(int new_value,const vector<dimension>& new_dimensions,const vector<float>& new_angles)
* \brief The value is new_value (the int is casted to a float), the dimensions are initialized with a vector of dimensions and the angles are constructed with new_angles.

* \fn vector_unit_nd::vector_unit_nd(int new_value,const vector<dimension>& new_dimensions,const vector<angle>& new_angles)
* \brief The value is new_value (the int is casted to a float), the dimensions are initialized with a vector of dimensions and the angles are new_angles.

* \fn vector_unit_nd::vector_unit_nd(const scalar_unit& x)
* \brief The value and the dimensions are copied from the scalar_unit x, the angles are empty. The vector is in 1D.

* \fn vector_unit_nd::vector_unit_nd(const scalar_unit& x,const vector<float>& new_angles)
* \brief The value and the dimensions are copied from the scalar_unit x, the angles are constructed with new_angles.

* \fn vector_unit_nd::vector_unit_nd(const scalar_unit& x,const vector<angle>& new_angles)
* \brief The value and the dimensions are copied from the scalar_unit x, the angles are new_angles.

* \fn vector_unit_nd::vector_unit_nd(const string& init_scalar,const vector<float>& new_angles)
* \brief The value and the dimensions are copied from the initialization string of scalar_unit init_scalar, the angles are constructed with new_angles.

* \fn vector_unit_nd::vector_unit_nd(const string& init_scalar,const vector<angle>& new_angles)
* \brief The value and the dimensions are copied from the initialization string of scalar_unit init_scalar, the angles are new_angles.

* \fn vector_unit_nd::vector_unit_nd(const string& init_vector_nd)
* \brief The value, the dimensions and all the angles are initialized from the initialization string of vector_unit_nd init_vector_nd.

* \fn vector_unit_nd vector_unit_nd::cartesian_2d(const string& init_dimensions,float new_x,float new_y)
* \brief The dimensions are initialized from the initialization string of dimensions new_dimensions, the cartesian coordinates new_x and new_y are converted to polar coordinates and then set the value and theta.

* \fn vector_unit_nd vector_unit_nd::cartesian_3d(const string& init_dimensions,float new_x,float new_y,float new_z)
* \brief The dimensions are initialized from the initialization string of dimensions new_dimensions, the cartesian coordinates new_x, new_y and new_z are converted to spherical coordinates and then set the value, theta and phi.

* \fn vector_unit_nd vector_unit_nd::cylindrical(const string& init_dimensions,float new_p,angle new_theta,float new_z)
* \brief The dimensions are initialized from the initialization string of dimensions new_dimensions, the cylindrical coordinates new_p, new_theta and new_z are converted to spherical coordinates and then set the value, theta and phi.

* \fn vector_unit_nd& vector_unit_nd::operator =(const vector_unit_nd& x)
* \brief Copy assignment. The member-variables are copied from vector_unit_nd x.

* \fn vector_unit_nd& vector_unit_nd::operator =(vector_unit_nd&& x)
* \brief Move assignment. The member-variables are moved from vector_unit_nd x.

* \fn vector_unit_nd& vector_unit_nd::operator =(const scalar_unit& x)
* \brief The value and the dimensions are copied from the scalar_unit x, the angles are not changed.

* \fn vector_unit_nd& vector_unit_nd::operator =(scalar_unit&& x)
* \brief The value and the dimensions are moved from the scalar_unit x, the angles are not changed.

* \fn vector_unit_nd& vector_unit_nd::operator =(const string& init_vector_nd)
* \brief The value, the dimensions and the angles are set from the initialization string init_vector_nd.

* \fn bool vector_unit_nd::operator ==(vector_unit_nd x) const
* \brief Comparison operator. Two vector_unit_nd are equal if their value, dimensions and angles are the same.

* \fn void vector_unit_nd::point_to(direction::name x)
* \brief The angles are set to the direction specified in 1D, 2D or 3D, depending on the current ND of vector_unit_nd. The possible values are LEFT, RIGHT, TOP, BOTTOM, LEFT_TOP, RIGHT_TOP, RIGHT_BOTTOM, LEFT_BOTTOM, FRONT, BACK, LEFT_FRONT, RIGHT_FRONT, TOP_FRONT, BOTTOM_FRONT, LEFT_BACK, RIGHT_BACK, TOP_BACK, BOTTOM_BACK, LEFT_TOP_FRONT, RIGHT_TOP_FRONT, LEFT_BOTTOM_FRONT, RIGHT_BOTTOM_FRONT, LEFT_TOP_BACK, RIGHT_TOP_BACK, LEFT_BOTTOM_BACK, RIGHT_BOTTOM_BACK.

* \fn void vector_unit_nd::operator +=(const vector_unit_nd& x)
* \brief The vector_unit_nd is summed as vector in 2D, 3D, or more coordinates. It's summed as scalar in 1D.

* \fn void vector_unit_nd::operator -=(vector_unit_nd x)
* \brief The vector_unit_nd is substracted as vector in 2D, 3D, or more coordinates. It's substracted as scalar in 1D.

* \fn vector_unit_nd vector_unit_nd::operator +(const vector_unit_nd& x) const
* \brief Addition of vectors in 2D, 3D, or more coordinates. It's an addition of scalars in 1D. It creates a new vector as the addition of the other two.

* \fn vector_unit_nd vector_unit_nd::operator -(vector_unit_nd x) const
* \brief Substraction of vectors in 2D, 3D, or more coordinates. It's a substraction of scalars in 1D. It creates a new vector as the difference of the other two.

* \fn vector_unit_nd vector_unit_nd::operator *(const scalar_unit& x) const
* \brief It creates a new vector_unit_nd scaling a vector_unit_nd by the scalar_unit x.

* \fn vector_unit_nd vector_unit_nd::operator /(const scalar_unit& x) const
* \brief It creates a new vector_unit_3d scaling a vector_unit_3d by the inverse of the scalar_unit x.

* \fn vector_unit_nd vector_unit_nd::operator ^(const scalar_unit& x) const
* \brief It powers a vector by a scalar_unit x if that scalar_unit has empty dimensions.

* \fn vector_unit_nd vector_unit_nd::operator +(T x) const
* \brief It creates a new vector as the addition of the numeric type x to the value. The angles are not changed.

* \fn vector_unit_nd vector_unit_nd::operator -(T x) const
* \brief It creates a new vector as the substraction of the numeric type x to the value. The angles are not changed.

* \fn vector_unit_nd vector_unit_nd::operator *(T x) const
* \brief It creates a new vector as the multiplication of the numeric type x to the value. The angles are not changed.

* \fn vector_unit_nd vector_unit_nd::operator /(T x) const
* \brief It creates a new vector as the division of the value with the numeric type x. The angles are not changed.

* \fn vector_unit_nd vector_unit_nd::operator ^(T x) const
* \brief It creates a new vector as the power of the value with the numeric type x. The angles are not changed.

* \fn void vector_unit_nd::operator +=(T x)
* \brief It sums the numeric type x to the value. The angles are not changed.

* \fn void vector_unit_nd::operator -=(T x)
* \brief It substracts the numeric type x to the value. The angles are not changed.

* \fn void vector_unit_nd::operator *=(T x)
* \brief It multiplies the numeric type x to the value. The angles are not changed.

* \fn void vector_unit_nd::operator /=(T x)
* \brief It divides the numeric type x to the value. The angles are not changed.

* \fn bool vector_unit_nd::is_nd(unsigned int i) const
* \brief Returns true if the vector is at the same number of dimensions as i.

* \fn int vector_unit_nd::get_nd() const
* \brief Returns the number of dimensions.

* \fn scalar_unit vector_unit_nd::n_projection(int i) const
* \brief Returns the x projection, the y projection or the z projection, depending if i is 1 (it returns x), 2 (it returns y) or 3 (it returns z).

* \fn scalar_unit vector_unit_nd::x_projection() const
* \brief It creates the x projection of the vector, returning it as a scalar_unit of the same dimensions, and the value corresponds to the projection. In 1D the projection is the value, in 2D it's in polar coordinates and in 3D it's in spherical coordinates.

* \fn scalar_unit vector_unit_nd::y_projection() const
* \brief It creates the y projection of the vector, returning it as a scalar_unit of the same dimensions, and the value corresponds to the projection. In 1D this projection doesn't exist, in 2D it's in polar coordinates and in 3D it's in spherical coordinates.

* \fn scalar_unit vector_unit_nd::z_projection() const
* \brief It creates the z projection of the vector, returning it as a scalar_unit of the same dimensions, and the value corresponds to the projection. In 1D this projection doesn't exist, in 2D it doesn't exist neither and in 3D it's in spherical coordinates.

* \fn void invert()
* \brief Changes the direction of the vector to the opposite direction. In 2D, it does that by adding 180 degrees to theta. In 3D, it does that by adding 180 degrees to theta and calculating the new phi as "180 - phi".

* \fn string vector_unit_nd::vectorial_display(int number_of_decimals) const
* \brief Displays the vector as the string representation of the scalar unit adding also all the angles.

* \fn string vector_unit_nd::vectorial_base_display(int number_of_decimals) const
* \brief Displays the vector as the string representation of the scalar unit adding also all the angles. It displays the dimensions with its base dimensions.

* \fn string vector_unit_nd::vectorial_custom_display(const string& init_dimensions,int number_of_decimals) const
* \brief Displays the vector as the string representation of the scalar unit adding also all the angles. It displays the vector in the dimensions specified in the initialization string of dimensions init_dimensions.

* \var vector<angle> vector_unit_nd::angles
* \brief The angles. A total of one angle means the vector is in 2D in polar coordinates, two angles means it's in 3D in spherical coordinates.

* \fn void vector_unit_nd::initialize_from_string(string init_vector_nd)
* \brief Initializes the member-variables with the initialization string of vector_unit_nd init_vector_nd.

* \fn string scifir::to_string(const vector_unit_nd& x)
* \brief It generates a string representation of vector_unit_nd.

* \fn scalar_unit scifir::norm(const vector_unit_nd& x)
* \brief It returns the value of the vector, which is the value in 1D, p in 2D (polar coordinates), or r in 3D (spherical coordinates).

* \fn vector_unit_nd scifir::sqrt(const vector_unit_nd& x)
* \brief It squares the vector, creating a vector_unit_nd with the value squared and always the same angles. The dimensions are squared with the same rules for the square of dimensions than scalar_unit classes.

* \fn vector_unit_nd scifir::sqrt_nth(const vector_unit_nd& x,int index)
* \brief It takes the root of the vector with the index given, creating a vector_unit_nd with the value rooted to that index and always maintains the same angles. The dimensions are squared with the same rules for the square of dimensions than scalar_unit classes.

* \fn scalar_unit scifir::dot_product(const vector_unit_nd& x,const vector_unit_nd& y)
* \brief Creates a scalar_unit as the dot product of the two vectors x and y.

* \fn vector_unit_nd scifir::cross_product(const vector_unit_nd& x,const vector_unit_nd& y)
* \brief Creates a vector_unit_nd as the cross product of the two vectors x and y. If both vectors aren't in 3D, it returns an empty vector_unit_nd, because the cross product doesn't exists outside 3D.

* \fn angle scifir::angle_between(const vector_unit_nd& x,const vector_unit_nd& y)
* \brief Returns the angle between two vectors x and y inside the ND space, which can be 2D or 3D, depending on the ND of the vectors. If the vectors have different ND, it returns an empty vector_unit_nd instead.

* \fn bool scifir::same_nd(const vector_unit_nd& x,const vector_unit_nd& y)
* \brief Checks if two vectors have the same number of dimensions.

* \fn bool scifir::same_direction(const vector_unit_nd& x,const vector_unit_nd& y)
* \brief Checks if two vectors x and y have the same direction. Both vectors must have the same ND, otherwise it returns an empty vector_unit_nd instead.

* \fn bool scifir::parallel(const vector_unit_nd& x,const vector_unit_nd& y)
* \brief Checks if two vectors x and y are parallel, which means that their direction is the same or the exact opposite. Both vectors must have the same ND, otherwise it returns an empty vector_unit_nd instead.

* \fn bool scifir::orthogonal(const vector_unit_nd& x,const vector_unit_nd& y)
* \brief Checks if two vectors x and y are orthogonal, that's, if they have 90 degrees between them. Both vectors must have the same ND, otherwise it returns an empty vector_unit_nd instead.

* \fn scifir::vector_unit_nd operator *(const scifir::scalar_unit& x,const scifir::vector_unit_nd& y)
* \brief It creates a new vector_unitn3d scaling a vector_unit_nd by the scalar_unit x.

* \fn scifir::vector_unit_nd operator +(const T y,const scifir::vector_unit_nd& x)
* \brief It creates a new vector as the addition of the numeric type x to the value. The angles are not changed.

* \fn scifir::vector_unit_nd operator -(const T y,const scifir::vector_unit_nd& x)
* \brief It creates a new vector as the substraction of the numeric type x to the value. The angles are not changed.

* \fn scifir::vector_unit_nd operator *(const T y,const scifir::vector_unit_nd& x)
* \brief It creates a new vector as the multiplication of the numeric type x to the value. The angles are not changed.

* \fn scifir::vector_unit_nd operator /(const T y,const scifir::vector_unit_nd& x)
* \brief It creates a new vector as the division of the value with the numeric type x. The angles are not changed.

* \fn bool operator !=(const scifir::vector_unit_nd& x, const scifir::vector_unit_nd& y)
* \brief Comparison operator. Two vector_unit_nd are not equal if their value, dimensions or angles are different.

* \fn bool operator ==(const scifir::vector_unit_nd& x, const string& init_vector_nd)
* \brief Returns true if x is equal to the vector_unit_nd initialized with the string being compared. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers.

* \fn bool operator !=(const scifir::vector_unit_nd& x, const string& init_vector_nd)
* \brief Returns true if x is not equal to the vector_unit_nd initialized with the string being compared. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers.

* \fn bool operator ==(const string& init_vector_nd, const scifir::vector_unit_nd& x)
* \brief Returns true if x is equal to the vector_unit_nd initialized with the string being compared. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers.

* \fn bool operator !=(const string& init_vector_nd, const scifir::vector_unit_nd& x)
* \brief Returns true if x is not equal to the vector_unit_nd initialized with the string being compared. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers.

* \fn void operator +=(string& x, const scifir::vector_unit_nd& y)
* \brief Concatenates the string representation of the vector_unit_nd y to the string x.

* \fn string operator +(const string& x, const scifir::vector_unit_nd& y)
* \brief Creates a new string as the concatenation of the string x with the representation string of the vector_unit_nd y.

* \fn string operator +(const scifir::vector_unit_nd& y, const string& x)
* \brief Creates a new string as the concatenation of the string x with the representation string of the vector_unit_nd y.

* \fn ostream& operator <<(ostream& os, const scifir::vector_unit_nd& x)
* \brief Adds the string representation of the vector_unit_nd x to an output stream os.

* \fn istream& operator >>(istream& is, scifir::vector_unit_nd& x)
* \brief Allows that an istream initializes by string a vector_unit_nd x.
*/