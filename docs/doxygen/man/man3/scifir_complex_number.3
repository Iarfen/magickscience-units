.TH "scifir::complex_number< T >" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::complex_number< T >
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBcomplex_number\fP (\fBconst\fP \fBcomplex_number\fP< T > &x)"
.br
.ti -1c
.RI "\fBcomplex_number\fP (\fBcomplex_number\fP< T > &&x)"
.br
.ti -1c
.RI "\fBcomplex_number\fP (T x, T y)"
.br
.ti -1c
.RI "\fBcomplex_number\fP (\fBconst\fP \fBstring\fP &\fBinit_complex_number\fP)"
.br
.ti -1c
.RI "\fBcomplex_number\fP< T > & \fBoperator=\fP (\fBconst\fP \fBcomplex_number\fP< T > &x)"
.br
.ti -1c
.RI "\fBcomplex_number\fP< T > & \fBoperator=\fP (\fBcomplex_number\fP< T > &&x)"
.br
.ti -1c
.RI "\fBcomplex_number\fP< T > \fBoperator+\fP (\fBconst\fP \fBcomplex_number\fP< T > &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBcomplex_number\fP< T > \fBoperator\-\fP (\fBconst\fP \fBcomplex_number\fP< T > &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBcomplex_number\fP< T > \fBoperator*\fP (\fBconst\fP \fBcomplex_number\fP< T > &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBcomplex_number\fP< T > \fBoperator/\fP (\fBconst\fP \fBcomplex_number\fP< T > &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator+=\fP (\fBconst\fP \fBcomplex_number\fP< T > &x)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator\-=\fP (\fBconst\fP \fBcomplex_number\fP< T > &x)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator*=\fP (\fBconst\fP \fBcomplex_number\fP< T > &x)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator/=\fP (\fBconst\fP \fBcomplex_number\fP< T > &x)"
.br
.ti -1c
.RI "\fBcomplex_number\fP< T > \fBget_conjugate\fP () \fBconst\fP"
.br
.ti -1c
.RI "T \fBget_r\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBangle\fP \fBget_argument\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBcomplex_number\fP< T > \fBget_reciprocal\fP () \fBconst\fP"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "T \fBreal\fP"
.br
.ti -1c
.RI "T \fBimaginary\fP"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
