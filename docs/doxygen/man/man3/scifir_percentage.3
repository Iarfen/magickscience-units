.TH "scifir::percentage" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::percentage
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpercentage\fP (\fBconst\fP \fBpercentage\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBpercentage\fP &&)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBfloat\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBdouble\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBlong\fP \fBdouble\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBfloat\fP, \fBconst\fP \fBstring\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBdouble\fP, \fBconst\fP \fBstring\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBlong\fP \fBdouble\fP, \fBconst\fP \fBstring\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBint\fP, \fBconst\fP \fBstring\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBconst\fP \fBstring\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBconst\fP \fBscalar_unit\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBconst\fP \fBpercentage\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBpercentage\fP &&)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBfloat\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBconst\fP \fBstring\fP &)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBconst\fP \fBscalar_unit\fP &)"
.br
.ti -1c
.RI "\fBoperator float\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBfloat\fP & \fBget_value\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator+\fP (\fBconst\fP \fBpercentage\fP &) \fBconst\fP"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator\-\fP (\fBconst\fP \fBpercentage\fP &) \fBconst\fP"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator*\fP (\fBconst\fP \fBpercentage\fP &) \fBconst\fP"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator/\fP (\fBconst\fP \fBpercentage\fP &) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator+=\fP (\fBconst\fP \fBpercentage\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator\-=\fP (\fBconst\fP \fBpercentage\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator*=\fP (\fBconst\fP \fBpercentage\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator/=\fP (\fBconst\fP \fBpercentage\fP &)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator=\fP (T y)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP \fBoperator+\fP (T y) \fBconst\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP \fBoperator\-\fP (T y) \fBconst\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBfloat\fP \fBoperator*\fP (T y) \fBconst\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBfloat\fP \fBoperator/\fP (T y) \fBconst\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator+=\fP (T y)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator\-=\fP (T y)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator*=\fP (T y)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator/=\fP (T y)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator++\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator\-\-\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBoperator*\fP (\fBconst\fP \fBscalar_unit\fP &) \fBconst\fP"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBoperator/\fP (\fBconst\fP \fBscalar_unit\fP &) \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBget_factor\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBget_ppm\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBget_ppb\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBget_ppt\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBget_ppq\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay_ppm\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay_ppb\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay_ppt\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay_ppq\fP () \fBconst\fP"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
