.TH "special_units/aid.cpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
special_units/aid.cpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&./aid\&.hpp'\fP
.br
\fC#include 'boost/algorithm/string\&.hpp'\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <vector>\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "string \fBscifir::to_string\fP (const aid &x)"
.br
.ti -1c
.RI "string \fBscifir::to_string\fP (const aid::type &x)"
.br
.ti -1c
.RI "aid::type \fBscifir::create_astronomical_type\fP (const string &astronomical_type_abbreviation)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::aid\fP &x, const \fBscifir::aid\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::aid\fP &x, const \fBscifir::aid\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::aid\fP &x, const string &init_aid)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::aid\fP &x, const string &init_aid)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const string &init_aid, const \fBscifir::aid\fP &x)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const string &init_aid, const \fBscifir::aid\fP &x)"
.br
.ti -1c
.RI "void \fBoperator+=\fP (string &x, const \fBscifir::aid\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const string &x, const \fBscifir::aid\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const \fBscifir::aid\fP &y, const string &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::aid\fP &x)"
.br
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBscifir::aid\fP &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool operator!= (const \fBscifir::aid\fP & x, const \fBscifir::aid\fP & y)"

.PP
Definition at line 554 of file aid\&.cpp\&.
.PP
.nf
555 {
556     return !(x == y);
557 }
.fi
.SS "bool operator!= (const \fBscifir::aid\fP & x, const string & init_aid)"

.PP
Definition at line 565 of file aid\&.cpp\&.
.PP
.nf
566 {
567     return !(x == init_aid);
568 }
.fi
.SS "bool operator!= (const string & init_aid, const \fBscifir::aid\fP & x)"

.PP
Definition at line 576 of file aid\&.cpp\&.
.PP
.nf
577 {
578     return !(init_aid == x);
579 }
.fi
.SS "string operator+ (const \fBscifir::aid\fP & y, const string & x)"

.PP
Definition at line 596 of file aid\&.cpp\&.
.PP
.nf
597 {
598     ostringstream output;
599     output << y;
600     output << x;
601     return output\&.str();
602 }
.fi
.SS "string operator+ (const string & x, const \fBscifir::aid\fP & y)"

.PP
Definition at line 588 of file aid\&.cpp\&.
.PP
.nf
589 {
590     ostringstream output;
591     output << x;
592     output << y;
593     return output\&.str();
594 }
.fi
.SS "void operator+= (string & x, const \fBscifir::aid\fP & y)"

.PP
Definition at line 581 of file aid\&.cpp\&.
.PP
.nf
582 {
583     ostringstream output;
584     output << y;
585     x += output\&.str();
586 }
.fi
.SS "ostream& operator<< (ostream & os, const \fBscifir::aid\fP & x)"

.PP
Definition at line 604 of file aid\&.cpp\&.
.PP
.nf
605 {
606     return os << to_string(x);
607 }
.fi
.SS "bool operator== (const \fBscifir::aid\fP & x, const \fBscifir::aid\fP & y)"

.PP
Definition at line 542 of file aid\&.cpp\&.
.PP
.nf
543 {
544     if(x\&.universe == y\&.universe and x\&.galaxy == y\&.galaxy and x\&.solar_system == y\&.solar_system and x\&.astronomical_body == y\&.astronomical_body)
545     {
546         return true;
547     }
548     else
549     {
550         return false;
551     }
552 }
.fi
.SS "bool operator== (const \fBscifir::aid\fP & x, const string & init_aid)"

.PP
Definition at line 559 of file aid\&.cpp\&.
.PP
.nf
560 {
561     scifir::aid y = scifir::aid(init_aid);
562     return (x == y);
563 }
.fi
.SS "bool operator== (const string & init_aid, const \fBscifir::aid\fP & x)"

.PP
Definition at line 570 of file aid\&.cpp\&.
.PP
.nf
571 {
572     scifir::aid y = scifir::aid(init_aid);
573     return (x == y);
574 }
.fi
.SS "istream& operator>> (istream & is, \fBscifir::aid\fP & x)"

.PP
Definition at line 609 of file aid\&.cpp\&.
.PP
.nf
610 {
611     char a[256];
612     is\&.getline(a, 256);
613     string b(a);
614     boost::trim(b);
615     x = scifir::aid(b);
616     return is;
617 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
