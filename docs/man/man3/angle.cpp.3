.TH "meca_number/angle.cpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
meca_number/angle.cpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&./angle\&.hpp'\fP
.br
\fC#include '\&.\&./util/types\&.hpp'\fP
.br
\fC#include 'boost/algorithm/string\&.hpp'\fP
.br
\fC#include 'unicode/unistr\&.h'\fP
.br
\fC#include 'unicode/uchar\&.h'\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <string>\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "string \fBscifir::to_string\fP (const angle &x)"
.br
.RI "Converts an angle to their string representation\&. "
.ti -1c
.RI "bool \fBscifir::is_angle\fP (const string &init_angle)"
.br
.RI "Checks if some string is an initialization string of an angle\&. "
.ti -1c
.RI "bool \fBscifir::parallel\fP (const angle &x, const angle &y)"
.br
.RI "Checks if two angles in a 2D correspond to parallel lines (or parallel vectors)\&. "
.ti -1c
.RI "bool \fBscifir::orthogonal\fP (const angle &x, const angle &y)"
.br
.RI "Checks if two angles in a 2D correspond to orthogonal lines (or orthogonal vectors)\&. "
.ti -1c
.RI "angle \fBscifir::sqrt\fP (const angle &x)"
.br
.RI "Calculates the square root of the angle x and returns that new angle\&. "
.ti -1c
.RI "angle \fBscifir::sqrt_nth\fP (const angle &x, int index)"
.br
.RI "Calculates the nth root of the angle x and returns that new angle\&. "
.ti -1c
.RI "float \fBscifir::sin\fP (const angle &x)"
.br
.RI "Calculates the sin of angle x\&. It uses the \fBsin()\fP function of the standard library of C++, the difference is that angle is in degrees, not in radians\&. "
.ti -1c
.RI "float \fBscifir::cos\fP (const angle &x)"
.br
.RI "Calculates the cos of angle x\&. It uses the \fBcos()\fP function of the standard library of C++, the difference is that angle is in degrees, not in radians\&. "
.ti -1c
.RI "float \fBscifir::tan\fP (const angle &x)"
.br
.RI "Calculates the tan of angle x\&. It uses the \fBtan()\fP function of the standard library of C++, the difference is that angle is in degrees, not in radians\&. "
.ti -1c
.RI "angle \fBscifir::asin\fP (float x)"
.br
.RI "Calculates the asin of some value x and returns the result as angle in degrees\&. "
.ti -1c
.RI "angle \fBscifir::acos\fP (float x)"
.br
.RI "Calculates the acos of some value x and returns the result as angle in degrees\&. "
.ti -1c
.RI "angle \fBscifir::atan\fP (float x)"
.br
.RI "Calculates the atan of some value x and returns the result as angle in degrees\&. "
.ti -1c
.RI "float \fBscifir::sinh\fP (const angle &x)"
.br
.RI "Calculates the sinh of angle x\&. It uses the \fBsinh()\fP function of the standard library of C++, the difference is that angle is in degrees, not in radians\&. "
.ti -1c
.RI "float \fBscifir::cosh\fP (const angle &x)"
.br
.RI "Calculates the cosh of angle x\&. It uses the \fBcosh()\fP function of the standard library of C++, the difference is that angle is in degrees, not in radians\&. "
.ti -1c
.RI "float \fBscifir::tanh\fP (const angle &x)"
.br
.RI "Calculates the tanh of angle x\&. It uses the \fBtanh()\fP function of the standard library of C++, the difference is that angle is in degrees, not in radians\&. "
.ti -1c
.RI "angle \fBscifir::asinh\fP (float x)"
.br
.RI "Calculates the asinh of some value x and returns the result as angle in degrees\&. "
.ti -1c
.RI "angle \fBscifir::acosh\fP (float x)"
.br
.RI "Calculates the acosh of some value x and returns the result as angle in degrees\&. "
.ti -1c
.RI "angle \fBscifir::atanh\fP (float x)"
.br
.RI "Calculates the atanh of some value x and returns the result as angle in degrees\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::angle\fP &x, const \fBscifir::angle\fP &y)"
.br
.RI "Checks if two angles have equal value\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::angle\fP &x, const \fBscifir::angle\fP &y)"
.br
.RI "Checks if two angles have not equal value\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBscifir::angle\fP &x, const \fBscifir::angle\fP &y)"
.br
.RI "Checks if the value of angle x is lower than the value of angle y\&. "
.ti -1c
.RI "bool \fBoperator>\fP (const \fBscifir::angle\fP &x, const \fBscifir::angle\fP &y)"
.br
.RI "Checks if the value of angle x is greather than the value of angle y\&. "
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBscifir::angle\fP &x, const \fBscifir::angle\fP &y)"
.br
.RI "Checks if the value of angle x is lower or equal than the value of angle y\&. "
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBscifir::angle\fP &x, const \fBscifir::angle\fP &y)"
.br
.RI "Checks if the value of angle x is equal or greather than the value of angle y\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::angle\fP &x, const string &init_angle)"
.br
.RI "Checks if the angle x is equal than the angle initialized with the initialization string of angle init_angle\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::angle\fP &x, const string &init_angle)"
.br
.RI "Checks if the angle x is not equal than the angle initialized with the initialization string of angle init_angle\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const string &init_angle, const \fBscifir::angle\fP &x)"
.br
.RI "Checks if the angle x is equal than the angle initialized with the initialization string of angle init_angle\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const string &init_angle, const \fBscifir::angle\fP &x)"
.br
.RI "Checks if the angle x is not equal than the angle initialized with the initialization string of angle init_angle\&. "
.ti -1c
.RI "void \fBoperator+=\fP (string &x, const \fBscifir::angle\fP &y)"
.br
.RI "Concatenates to string x the string representation of angle y\&. "
.ti -1c
.RI "string \fBoperator+\fP (const string &x, const \fBscifir::angle\fP &y)"
.br
.RI "Concatenates the string x with the string representation of angle y into a new string\&. "
.ti -1c
.RI "string \fBoperator+\fP (const \fBscifir::angle\fP &y, const string &x)"
.br
.RI "Concatenates the string x with the string representation of angle y into a new string\&. "
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::angle\fP &x)"
.br
.RI "Sends the string representation of angle x to an output stream\&. "
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBscifir::angle\fP &x)"
.br
.RI "Initializes an angle with an initialization string obtained from an input stream\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool operator!= (const \fBscifir::angle\fP & x, const \fBscifir::angle\fP & y)"

.PP
Checks if two angles have not equal value\&. 
.PP
Definition at line 419 of file angle\&.cpp\&.
.PP
.nf
420 {
421     return !(x == y);
422 }
.fi
.SS "bool operator!= (const \fBscifir::angle\fP & x, const string & init_angle)"

.PP
Checks if the angle x is not equal than the angle initialized with the initialization string of angle init_angle\&. 
.PP
Definition at line 464 of file angle\&.cpp\&.
.PP
.nf
465 {
466     return !(x == init_angle);
467 }
.fi
.SS "bool operator!= (const string & init_angle, const \fBscifir::angle\fP & x)"

.PP
Checks if the angle x is not equal than the angle initialized with the initialization string of angle init_angle\&. 
.PP
Definition at line 475 of file angle\&.cpp\&.
.PP
.nf
476 {
477     return !(init_angle == x);
478 }
.fi
.SS "string operator+ (const \fBscifir::angle\fP & y, const string & x)"

.PP
Concatenates the string x with the string representation of angle y into a new string\&. 
.PP
Definition at line 495 of file angle\&.cpp\&.
.PP
.nf
496 {
497     ostringstream output;
498     output << y;
499     output << x;
500     return output\&.str();
501 }
.fi
.SS "string operator+ (const string & x, const \fBscifir::angle\fP & y)"

.PP
Concatenates the string x with the string representation of angle y into a new string\&. 
.PP
Definition at line 487 of file angle\&.cpp\&.
.PP
.nf
488 {
489     ostringstream output;
490     output << x;
491     output << y;
492     return output\&.str();
493 }
.fi
.SS "void operator+= (string & x, const \fBscifir::angle\fP & y)"

.PP
Concatenates to string x the string representation of angle y\&. 
.PP
Definition at line 480 of file angle\&.cpp\&.
.PP
.nf
481 {
482     ostringstream output;
483     output << y;
484     x += output\&.str();
485 }
.fi
.SS "bool operator< (const \fBscifir::angle\fP & x, const \fBscifir::angle\fP & y)"

.PP
Checks if the value of angle x is lower than the value of angle y\&. 
.PP
Definition at line 424 of file angle\&.cpp\&.
.PP
.nf
425 {
426     if(x\&.get_value() < y\&.get_value())
427     {
428         return true;
429     }
430     else
431     {
432         return false;
433     }
434 }
.fi
.SS "ostream & operator<< (ostream & os, const \fBscifir::angle\fP & x)"

.PP
Sends the string representation of angle x to an output stream\&. 
.PP
Definition at line 503 of file angle\&.cpp\&.
.PP
.nf
504 {
505     return os << to_string(x);
506 }
.fi
.SS "bool operator<= (const \fBscifir::angle\fP & x, const \fBscifir::angle\fP & y)"

.PP
Checks if the value of angle x is lower or equal than the value of angle y\&. 
.PP
Definition at line 448 of file angle\&.cpp\&.
.PP
.nf
449 {
450     return !(x > y);
451 }
.fi
.SS "bool operator== (const \fBscifir::angle\fP & x, const \fBscifir::angle\fP & y)"

.PP
Checks if two angles have equal value\&. 
.PP
Definition at line 407 of file angle\&.cpp\&.
.PP
.nf
408 {
409     if(x\&.get_value() == y\&.get_value())
410     {
411         return true;
412     }
413     else
414     {
415         return false;
416     }
417 }
.fi
.SS "bool operator== (const \fBscifir::angle\fP & x, const string & init_angle)"

.PP
Checks if the angle x is equal than the angle initialized with the initialization string of angle init_angle\&. 
.PP
Definition at line 458 of file angle\&.cpp\&.
.PP
.nf
459 {
460     scifir::angle y = scifir::angle(init_angle);
461     return (x == y);
462 }
.fi
.SS "bool operator== (const string & init_angle, const \fBscifir::angle\fP & x)"

.PP
Checks if the angle x is equal than the angle initialized with the initialization string of angle init_angle\&. 
.PP
Definition at line 469 of file angle\&.cpp\&.
.PP
.nf
470 {
471     scifir::angle y = scifir::angle(init_angle);
472     return (x == y);
473 }
.fi
.SS "bool operator> (const \fBscifir::angle\fP & x, const \fBscifir::angle\fP & y)"

.PP
Checks if the value of angle x is greather than the value of angle y\&. 
.PP
Definition at line 436 of file angle\&.cpp\&.
.PP
.nf
437 {
438     if(x\&.get_value() > y\&.get_value())
439     {
440         return true;
441     }
442     else
443     {
444         return false;
445     }
446 }
.fi
.SS "bool operator>= (const \fBscifir::angle\fP & x, const \fBscifir::angle\fP & y)"

.PP
Checks if the value of angle x is equal or greather than the value of angle y\&. 
.PP
Definition at line 453 of file angle\&.cpp\&.
.PP
.nf
454 {
455     return !(x < y);
456 }
.fi
.SS "istream & operator>> (istream & is, \fBscifir::angle\fP & x)"

.PP
Initializes an angle with an initialization string obtained from an input stream\&. 
.PP
Definition at line 508 of file angle\&.cpp\&.
.PP
.nf
509 {
510     char a[256];
511     is\&.getline(a, 256);
512     string b(a);
513     boost::trim(b);
514     x = scifir::angle(b);
515     return is;
516 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
