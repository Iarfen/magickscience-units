.TH "coordinates/coordinates_1d.hpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
coordinates/coordinates_1d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./topology/point_1d\&.hpp'\fP
.br
\fC#include '\&.\&./units/unit_basic\&.hpp'\fP
.br
\fC#include '\&.\&./predefined_units/physics_units\&.hpp'\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::coordinates_1d< T >\fP"
.br
.ti -1c
.RI "class \fBscifir::coordinates_1d< float >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > string \fBscifir::to_string\fP (const coordinates_1d< T > &x)"
.br
.ti -1c
.RI "string \fBscifir::to_string\fP (const coordinates_1d< float > &x)"
.br
.ti -1c
.RI "template<typename T , typename U > T \fBscifir::distance\fP (const coordinates_1d< T > &x, const coordinates_1d< U > &y)"
.br
.ti -1c
.RI "float \fBscifir::distance\fP (const coordinates_1d< float > &x, const coordinates_1d< float > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > T \fBscifir::distance\fP (const coordinates_1d< T > &x, const point_1d< U > &y)"
.br
.ti -1c
.RI "float \fBscifir::distance\fP (const coordinates_1d< float > &x, const point_1d< float > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > T \fBscifir::distance\fP (const point_1d< T > &x, const coordinates_1d< U > &y)"
.br
.ti -1c
.RI "float \fBscifir::distance\fP (const point_1d< float > &x, const coordinates_1d< float > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::coordinates_1d\fP< T > &x, const \fBscifir::coordinates_1d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::coordinates_1d\fP< T > &x, const \fBscifir::coordinates_1d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::coordinates_1d\fP< T > &x, const \fBscifir::point_1d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::coordinates_1d\fP< T > &x, const \fBscifir::point_1d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::point_1d\fP< T > &x, const \fBscifir::coordinates_1d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::point_1d\fP< T > &x, const \fBscifir::coordinates_1d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBscifir::coordinates_1d\fP< T > &x, const string &init_coordinates_1d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBscifir::coordinates_1d\fP< T > &x, const string &init_coordinates_1d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const string &init_coordinates_1d, const \fBscifir::coordinates_1d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const string &init_coordinates_1d, const \fBscifir::coordinates_1d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > void \fBoperator+=\fP (string &x, const \fBscifir::coordinates_1d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const string &x, const \fBscifir::coordinates_1d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const \fBscifir::coordinates_1d\fP< T > &x, const string &y)"
.br
.ti -1c
.RI "template<typename T > ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::coordinates_1d\fP< T > &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::coordinates_1d\fP< float > &x)"
.br
.ti -1c
.RI "template<typename T > istream & \fBoperator>>\fP (istream &is, \fBscifir::coordinates_1d\fP< T > &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::coordinates_1d\fP< T > & x, const \fBscifir::coordinates_1d\fP< U > & y)"

.PP
Definition at line 255 of file coordinates_1d\&.hpp\&.
.PP
.nf
256 {
257     return !(x == y);
258 }
.fi
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::coordinates_1d\fP< T > & x, const \fBscifir::point_1d\fP< U > & y)"

.PP
Definition at line 274 of file coordinates_1d\&.hpp\&.
.PP
.nf
275 {
276     return !(x == y);
277 }
.fi
.SS "template<typename T > bool operator!= (const \fBscifir::coordinates_1d\fP< T > & x, const string & init_coordinates_1d)"

.PP
Definition at line 306 of file coordinates_1d\&.hpp\&.
.PP
.nf
307 {
308     return !(x == init_coordinates_1d);
309 }
.fi
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::point_1d\fP< T > & x, const \fBscifir::coordinates_1d\fP< U > & y)"

.PP
Definition at line 293 of file coordinates_1d\&.hpp\&.
.PP
.nf
294 {
295     return !(x == y);
296 }
.fi
.SS "template<typename T > bool operator!= (const string & init_coordinates_1d, const \fBscifir::coordinates_1d\fP< T > & x)"

.PP
Definition at line 319 of file coordinates_1d\&.hpp\&.
.PP
.nf
320 {
321     return !(init_coordinates_1d == x);
322 }
.fi
.SS "template<typename T > string operator+ (const \fBscifir::coordinates_1d\fP< T > & x, const string & y)"

.PP
Definition at line 337 of file coordinates_1d\&.hpp\&.
.PP
.nf
338 {
339     return to_string(x) + y;
340 }
.fi
.SS "template<typename T > string operator+ (const string & x, const \fBscifir::coordinates_1d\fP< T > & y)"

.PP
Definition at line 331 of file coordinates_1d\&.hpp\&.
.PP
.nf
332 {
333     return x + to_string(y);
334 }
.fi
.SS "template<typename T > void operator+= (string & x, const \fBscifir::coordinates_1d\fP< T > & y)"

.PP
Definition at line 325 of file coordinates_1d\&.hpp\&.
.PP
.nf
326 {
327     x += to_string(y);
328 }
.fi
.SS "ostream& operator<< (ostream & os, const \fBscifir::coordinates_1d\fP< float > & x)"

.PP
Definition at line 29 of file coordinates_1d\&.cpp\&.
.PP
.nf
30 {
31     return os << scifir::to_string(x);
32 }
.fi
.SS "template<typename T > ostream& operator<< (ostream & os, const \fBscifir::coordinates_1d\fP< T > & x)"

.PP
Definition at line 343 of file coordinates_1d\&.hpp\&.
.PP
.nf
344 {
345     return os << to_string(x);
346 }
.fi
.SS "template<typename T , typename U > bool operator== (const \fBscifir::coordinates_1d\fP< T > & x, const \fBscifir::coordinates_1d\fP< U > & y)"

.PP
Definition at line 242 of file coordinates_1d\&.hpp\&.
.PP
.nf
243 {
244     if (x\&.x == y\&.x)
245     {
246         return true;
247     }
248     else
249     {
250         return false;
251     }
252 }
.fi
.SS "template<typename T , typename U > bool operator== (const \fBscifir::coordinates_1d\fP< T > & x, const \fBscifir::point_1d\fP< U > & y)"

.PP
Definition at line 261 of file coordinates_1d\&.hpp\&.
.PP
.nf
262 {
263     if (x\&.x == y\&.x)
264     {
265         return true;
266     }
267     else
268     {
269         return false;
270     }
271 }
.fi
.SS "template<typename T > bool operator== (const \fBscifir::coordinates_1d\fP< T > & x, const string & init_coordinates_1d)"

.PP
Definition at line 299 of file coordinates_1d\&.hpp\&.
.PP
.nf
300 {
301     scifir::coordinates_1d<T> y(init_coordinates_1d);
302     return (x == y);
303 }
.fi
.SS "template<typename T , typename U > bool operator== (const \fBscifir::point_1d\fP< T > & x, const \fBscifir::coordinates_1d\fP< U > & y)"

.PP
Definition at line 280 of file coordinates_1d\&.hpp\&.
.PP
.nf
281 {
282     if (x\&.x == y\&.x)
283     {
284         return true;
285     }
286     else
287     {
288         return false;
289     }
290 }
.fi
.SS "template<typename T > bool operator== (const string & init_coordinates_1d, const \fBscifir::coordinates_1d\fP< T > & x)"

.PP
Definition at line 312 of file coordinates_1d\&.hpp\&.
.PP
.nf
313 {
314     scifir::coordinates_1d<T> y(init_coordinates_1d);
315     return (x == y);
316 }
.fi
.SS "template<typename T > istream& operator>> (istream & is, \fBscifir::coordinates_1d\fP< T > & x)"

.PP
Definition at line 351 of file coordinates_1d\&.hpp\&.
.PP
.nf
352 {
353     char a[256];
354     is\&.getline(a, 256);
355     string b(a);
356     boost::trim(b);
357     x = scifir::coordinates_1d<T>(b);
358     return is;
359 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
