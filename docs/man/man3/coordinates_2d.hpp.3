.TH "coordinates/coordinates_2d.hpp" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
coordinates/coordinates_2d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./topology/point_2d\&.hpp'\fP
.br
\fC#include '\&.\&./units/unit_basic\&.hpp'\fP
.br
\fC#include '\&.\&./predefined_units/physics_units\&.hpp'\fP
.br
\fC#include '\&.\&./util/types\&.hpp'\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::coordinates_2d< T >\fP"
.br
.ti -1c
.RI "class \fBscifir::coordinates_2d< float >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<\fBtypename\fP T > \fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBcoordinates_2d\fP< T > &x)"
.br
.ti -1c
.RI "\fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBcoordinates_2d\fP< \fBfloat\fP > &x)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP \fBU\fP > T \fBscifir::distance\fP (\fBconst\fP \fBcoordinates_2d\fP< T > &x, \fBconst\fP \fBcoordinates_2d\fP< \fBU\fP > &y)"
.br
.ti -1c
.RI "\fBfloat\fP \fBscifir::distance\fP (\fBconst\fP \fBcoordinates_2d\fP< \fBfloat\fP > &x, \fBconst\fP \fBcoordinates_2d\fP< \fBfloat\fP > &y)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP \fBU\fP > T \fBscifir::distance\fP (\fBconst\fP \fBcoordinates_2d\fP< T > &x, \fBconst\fP \fBpoint_2d\fP< \fBU\fP > &y)"
.br
.ti -1c
.RI "\fBfloat\fP \fBscifir::distance\fP (\fBconst\fP \fBcoordinates_2d\fP< \fBfloat\fP > &x, \fBconst\fP \fBpoint_2d\fP< \fBfloat\fP > &y)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP \fBU\fP > T \fBscifir::distance\fP (\fBconst\fP \fBpoint_2d\fP< T > &x, \fBconst\fP \fBcoordinates_2d\fP< \fBU\fP > &y)"
.br
.ti -1c
.RI "\fBfloat\fP \fBscifir::distance\fP (\fBconst\fP \fBpoint_2d\fP< \fBfloat\fP > &x, \fBconst\fP \fBcoordinates_2d\fP< \fBfloat\fP > &y)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBscifir::cartesian_2d_to_polar_p\fP (\fBconst\fP \fBscalar_unit\fP &x, \fBscalar_unit\fP y)"
.br
.ti -1c
.RI "\fBangle\fP \fBscifir::cartesian_2d_to_polar_theta\fP (\fBconst\fP \fBscalar_unit\fP &x, \fBscalar_unit\fP y)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBscifir::polar_to_cartesian_2d_x\fP (\fBconst\fP \fBscalar_unit\fP &p, \fBconst\fP \fBangle\fP &theta)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBscifir::polar_to_cartesian_2d_y\fP (\fBconst\fP \fBscalar_unit\fP &p, \fBconst\fP \fBangle\fP &theta)"
.br
.ti -1c
.RI "\fBfloat\fP \fBscifir::cartesian_2d_to_polar_p\fP (\fBfloat\fP x, \fBfloat\fP y)"
.br
.ti -1c
.RI "\fBangle\fP \fBscifir::cartesian_2d_to_polar_theta\fP (\fBfloat\fP x, \fBfloat\fP y)"
.br
.ti -1c
.RI "\fBfloat\fP \fBscifir::polar_to_cartesian_2d_x\fP (\fBfloat\fP p, \fBconst\fP \fBangle\fP &theta)"
.br
.ti -1c
.RI "\fBfloat\fP \fBscifir::polar_to_cartesian_2d_y\fP (\fBfloat\fP p, \fBconst\fP \fBangle\fP &theta)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::coordinates_2d\fP< T > &x, const \fBscifir::coordinates_2d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::coordinates_2d\fP< T > &x, const \fBscifir::coordinates_2d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::coordinates_2d\fP< T > &x, const \fBscifir::point_2d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::coordinates_2d\fP< T > &x, const \fBscifir::point_2d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::point_2d\fP< T > &x, const \fBscifir::coordinates_2d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::point_2d\fP< T > &x, const \fBscifir::coordinates_2d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBscifir::coordinates_2d\fP< T > &x, const string &init_coordinates_2d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBscifir::coordinates_2d\fP< T > &x, const string &init_coordinates_2d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const string &init_coordinates_2d, const \fBscifir::coordinates_2d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const string &init_coordinates_2d, const \fBscifir::coordinates_2d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > void \fBoperator+=\fP (string &x, const \fBscifir::coordinates_2d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const string &x, const \fBscifir::coordinates_2d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const \fBscifir::coordinates_2d\fP< T > &x, const string &y)"
.br
.ti -1c
.RI "template<typename T > ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::coordinates_2d\fP< T > &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::coordinates_2d\fP< float > &x)"
.br
.ti -1c
.RI "template<typename T > istream & \fBoperator>>\fP (istream &is, \fBscifir::coordinates_2d\fP< T > &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::coordinates_2d\fP< T > & x, const \fBscifir::coordinates_2d\fP< U > & y)"

.PP
Definition at line \fB431\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
432 {
433     return !(x == y);
434 }
.fi

.SS "template<typename T , typename U > bool operator!= (const \fBscifir::coordinates_2d\fP< T > & x, const \fBscifir::point_2d\fP< U > & y)"

.PP
Definition at line \fB450\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
451 {
452     return !(x == y);
453 }
.fi

.SS "template<typename T > bool operator!= (const \fBscifir::coordinates_2d\fP< T > & x, const string & init_coordinates_2d)"

.PP
Definition at line \fB482\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
483 {
484     return !(x == init_coordinates_2d);
485 }
.fi

.SS "template<typename T , typename U > bool operator!= (const \fBscifir::point_2d\fP< T > & x, const \fBscifir::coordinates_2d\fP< U > & y)"

.PP
Definition at line \fB469\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
470 {
471     return !(x == y);
472 }
.fi

.SS "template<typename T > bool operator!= (const string & init_coordinates_2d, const \fBscifir::coordinates_2d\fP< T > & x)"

.PP
Definition at line \fB495\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
496 {
497     return !(init_coordinates_2d == x);
498 }
.fi

.SS "template<typename T > string operator+ (const \fBscifir::coordinates_2d\fP< T > & x, const string & y)"

.PP
Definition at line \fB513\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
514 {
515     return to_string(x) + y;
516 }
.fi

.SS "template<typename T > string operator+ (const string & x, const \fBscifir::coordinates_2d\fP< T > & y)"

.PP
Definition at line \fB507\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
508 {
509     return x + to_string(y);
510 }
.fi

.SS "template<typename T > void operator+= (string & x, const \fBscifir::coordinates_2d\fP< T > & y)"

.PP
Definition at line \fB501\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
502 {
503     x += to_string(y);
504 }
.fi

.SS "ostream & operator<< (ostream & os, const \fBscifir::coordinates_2d\fP< float > & x)"

.PP
Definition at line \fB30\fP of file \fBcoordinates_2d\&.cpp\fP\&..PP
.nf
31 {
32     return os << scifir::to_string(x);
33 }
.fi

.SS "template<typename T > ostream & operator<< (ostream & os, const \fBscifir::coordinates_2d\fP< T > & x)"

.PP
Definition at line \fB519\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
520 {
521     return os << to_string(x);
522 }
.fi

.SS "template<typename T , typename U > bool operator== (const \fBscifir::coordinates_2d\fP< T > & x, const \fBscifir::coordinates_2d\fP< U > & y)"

.PP
Definition at line \fB418\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
419 {
420     if (x\&.x == y\&.x and x\&.y == y\&.y)
421     {
422         return true;
423     }
424     else
425     {
426         return false;
427     }
428 }
.fi

.SS "template<typename T , typename U > bool operator== (const \fBscifir::coordinates_2d\fP< T > & x, const \fBscifir::point_2d\fP< U > & y)"

.PP
Definition at line \fB437\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
438 {
439     if (x\&.x == y\&.x and x\&.y == y\&.y)
440     {
441         return true;
442     }
443     else
444     {
445         return false;
446     }
447 }
.fi

.SS "template<typename T > bool operator== (const \fBscifir::coordinates_2d\fP< T > & x, const string & init_coordinates_2d)"

.PP
Definition at line \fB475\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
476 {
477     scifir::coordinates_2d<T> y(init_coordinates_2d);
478     return (x == y);
479 }
.fi

.SS "template<typename T , typename U > bool operator== (const \fBscifir::point_2d\fP< T > & x, const \fBscifir::coordinates_2d\fP< U > & y)"

.PP
Definition at line \fB456\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
457 {
458     if (x\&.x == y\&.x and x\&.y == y\&.y)
459     {
460         return true;
461     }
462     else
463     {
464         return false;
465     }
466 }
.fi

.SS "template<typename T > bool operator== (const string & init_coordinates_2d, const \fBscifir::coordinates_2d\fP< T > & x)"

.PP
Definition at line \fB488\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
489 {
490     scifir::coordinates_2d<T> y(init_coordinates_2d);
491     return (x == y);
492 }
.fi

.SS "template<typename T > istream & operator>> (istream & is, \fBscifir::coordinates_2d\fP< T > & x)"

.PP
Definition at line \fB527\fP of file \fBcoordinates_2d\&.hpp\fP\&..PP
.nf
528 {
529     char a[256];
530     is\&.getline(a, 256);
531     string b(a);
532     boost::trim(b);
533     x = scifir::coordinates_2d<T>(b);
534     return is;
535 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
