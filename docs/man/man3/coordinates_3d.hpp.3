.TH "coordinates/coordinates_3d.hpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
coordinates/coordinates_3d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./topology/point_3d\&.hpp'\fP
.br
\fC#include '\&.\&./meca_number/angle\&.hpp'\fP
.br
\fC#include '\&.\&./units/unit_basic\&.hpp'\fP
.br
\fC#include '\&.\&./predefined_units/physics_units\&.hpp'\fP
.br
\fC#include '\&.\&./util/types\&.hpp'\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <cmath>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::coordinates_3d< T >\fP"
.br
.ti -1c
.RI "class \fBscifir::coordinates_3d< float >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > string \fBscifir::to_string\fP (const coordinates_3d< T > &x)"
.br
.ti -1c
.RI "string \fBscifir::to_string\fP (const coordinates_3d< float > &x)"
.br
.ti -1c
.RI "template<typename T , typename U > T \fBscifir::distance\fP (const coordinates_3d< T > &x, const coordinates_3d< U > &y)"
.br
.ti -1c
.RI "float \fBscifir::distance\fP (const coordinates_3d< float > &x, const coordinates_3d< float > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > T \fBscifir::distance\fP (const coordinates_3d< T > &x, const point_3d< U > &y)"
.br
.ti -1c
.RI "float \fBscifir::distance\fP (const coordinates_3d< float > &x, const point_3d< float > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > T \fBscifir::distance\fP (const point_3d< T > &x, const coordinates_3d< U > &y)"
.br
.ti -1c
.RI "float \fBscifir::distance\fP (const point_3d< float > &x, const coordinates_3d< float > &y)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::cartesian_3d_to_cylindrical_p\fP (const scalar_unit &x, scalar_unit y, const scalar_unit &z)"
.br
.ti -1c
.RI "angle \fBscifir::cartesian_3d_to_cylindrical_theta\fP (const scalar_unit &x, scalar_unit y, const scalar_unit &z)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::cartesian_3d_to_cylindrical_z\fP (const scalar_unit &x, const scalar_unit &y, const scalar_unit &z)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::cartesian_3d_to_spherical_r\fP (const scalar_unit &x, scalar_unit y, scalar_unit z)"
.br
.ti -1c
.RI "angle \fBscifir::cartesian_3d_to_spherical_theta\fP (const scalar_unit &x, scalar_unit y, const scalar_unit &z)"
.br
.ti -1c
.RI "angle \fBscifir::cartesian_3d_to_spherical_phi\fP (const scalar_unit &x, scalar_unit y, scalar_unit z)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::spherical_to_cartesian_3d_x\fP (const scalar_unit &r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::spherical_to_cartesian_3d_y\fP (const scalar_unit &r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::spherical_to_cartesian_3d_z\fP (const scalar_unit &r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::spherical_to_cylindrical_p\fP (const scalar_unit &r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "angle \fBscifir::spherical_to_cylindrical_theta\fP (const scalar_unit &r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::spherical_to_cylindrical_z\fP (const scalar_unit &r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::cylindrical_to_cartesian_3d_x\fP (const scalar_unit &p, const angle &theta, const scalar_unit &z)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::cylindrical_to_cartesian_3d_y\fP (const scalar_unit &p, const angle &theta, const scalar_unit &z)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::cylindrical_to_cartesian_3d_z\fP (const scalar_unit &p, const angle &theta, const scalar_unit &z)"
.br
.ti -1c
.RI "scalar_unit \fBscifir::cylindrical_to_spherical_r\fP (const scalar_unit &p, const angle &theta, scalar_unit z)"
.br
.ti -1c
.RI "angle \fBscifir::cylindrical_to_spherical_theta\fP (const scalar_unit &p, const angle &theta, const scalar_unit &z)"
.br
.ti -1c
.RI "angle \fBscifir::cylindrical_to_spherical_phi\fP (const scalar_unit &p, const angle &theta, scalar_unit z)"
.br
.ti -1c
.RI "float \fBscifir::cartesian_3d_to_cylindrical_p\fP (float x, float y, float z)"
.br
.ti -1c
.RI "angle \fBscifir::cartesian_3d_to_cylindrical_theta\fP (float x, float y, float z)"
.br
.ti -1c
.RI "float \fBscifir::cartesian_3d_to_cylindrical_z\fP (float x, float y, float z)"
.br
.ti -1c
.RI "float \fBscifir::cartesian_3d_to_spherical_r\fP (float x, float y, float z)"
.br
.ti -1c
.RI "angle \fBscifir::cartesian_3d_to_spherical_theta\fP (float x, float y, float z)"
.br
.ti -1c
.RI "angle \fBscifir::cartesian_3d_to_spherical_phi\fP (float x, float y, float z)"
.br
.ti -1c
.RI "float \fBscifir::spherical_to_cartesian_3d_x\fP (float r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "float \fBscifir::spherical_to_cartesian_3d_y\fP (float r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "float \fBscifir::spherical_to_cartesian_3d_z\fP (float r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "float \fBscifir::spherical_to_cylindrical_p\fP (float r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "angle \fBscifir::spherical_to_cylindrical_theta\fP (float r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "float \fBscifir::spherical_to_cylindrical_z\fP (float r, const angle &theta, const angle &phi)"
.br
.ti -1c
.RI "float \fBscifir::cylindrical_to_cartesian_3d_x\fP (float p, const angle &theta, float z)"
.br
.ti -1c
.RI "float \fBscifir::cylindrical_to_cartesian_3d_y\fP (float p, const angle &theta, float z)"
.br
.ti -1c
.RI "float \fBscifir::cylindrical_to_cartesian_3d_z\fP (float p, const angle &theta, float z)"
.br
.ti -1c
.RI "float \fBscifir::cylindrical_to_spherical_r\fP (float p, const angle &theta, float z)"
.br
.ti -1c
.RI "angle \fBscifir::cylindrical_to_spherical_theta\fP (float p, const angle &theta, float z)"
.br
.ti -1c
.RI "angle \fBscifir::cylindrical_to_spherical_phi\fP (float p, const angle &theta, float z)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::coordinates_3d\fP< T > &x, const \fBscifir::coordinates_3d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::coordinates_3d\fP< T > &x, const \fBscifir::coordinates_3d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::coordinates_3d\fP< T > &x, const \fBscifir::point_3d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::coordinates_3d\fP< T > &x, const \fBscifir::point_3d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::point_3d\fP< T > &x, const \fBscifir::coordinates_3d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::point_3d\fP< T > &x, const \fBscifir::coordinates_3d\fP< U > y)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBscifir::coordinates_3d\fP< T > &x, const string &init_coordinates_3d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBscifir::coordinates_3d\fP< T > &x, const string &init_coordinates_3d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const string &init_coordinates_3d, const \fBscifir::coordinates_3d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const string &init_coordinates_3d, const \fBscifir::coordinates_3d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > void \fBoperator+=\fP (string &x, const \fBscifir::coordinates_3d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const string &x, const \fBscifir::coordinates_3d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const \fBscifir::coordinates_3d\fP< T > &x, const string &y)"
.br
.ti -1c
.RI "template<typename T > ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::coordinates_3d\fP< T > &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::coordinates_3d\fP< float > &x)"
.br
.ti -1c
.RI "template<typename T > istream & \fBoperator>>\fP (istream &is, \fBscifir::coordinates_3d\fP< T > &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::coordinates_3d\fP< T > & x, const \fBscifir::coordinates_3d\fP< U > & y)"

.PP
Definition at line 820 of file coordinates_3d\&.hpp\&.
.PP
.nf
821 {
822     return !(x == y);
823 }
.fi
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::coordinates_3d\fP< T > & x, const \fBscifir::point_3d\fP< U > & y)"

.PP
Definition at line 839 of file coordinates_3d\&.hpp\&.
.PP
.nf
840 {
841     return !(x == y);
842 }
.fi
.SS "template<typename T > bool operator!= (const \fBscifir::coordinates_3d\fP< T > & x, const string & init_coordinates_3d)"

.PP
Definition at line 871 of file coordinates_3d\&.hpp\&.
.PP
.nf
872 {
873     return !(x == init_coordinates_3d);
874 }
.fi
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::point_3d\fP< T > & x, const \fBscifir::coordinates_3d\fP< U > y)"

.PP
Definition at line 858 of file coordinates_3d\&.hpp\&.
.PP
.nf
859 {
860     return !(x == y);
861 }
.fi
.SS "template<typename T > bool operator!= (const string & init_coordinates_3d, const \fBscifir::coordinates_3d\fP< T > & x)"

.PP
Definition at line 884 of file coordinates_3d\&.hpp\&.
.PP
.nf
885 {
886     return !(init_coordinates_3d == x);
887 }
.fi
.SS "template<typename T > string operator+ (const \fBscifir::coordinates_3d\fP< T > & x, const string & y)"

.PP
Definition at line 902 of file coordinates_3d\&.hpp\&.
.PP
.nf
903 {
904     return to_string(x) + y;
905 }
.fi
.SS "template<typename T > string operator+ (const string & x, const \fBscifir::coordinates_3d\fP< T > & y)"

.PP
Definition at line 896 of file coordinates_3d\&.hpp\&.
.PP
.nf
897 {
898     return x + to_string(y);
899 }
.fi
.SS "template<typename T > void operator+= (string & x, const \fBscifir::coordinates_3d\fP< T > & y)"

.PP
Definition at line 890 of file coordinates_3d\&.hpp\&.
.PP
.nf
891 {
892     x += to_string(y);
893 }
.fi
.SS "ostream& operator<< (ostream & os, const \fBscifir::coordinates_3d\fP< float > & x)"

.PP
Definition at line 28 of file coordinates_3d\&.cpp\&.
.PP
.nf
29 {
30     return os << scifir::to_string(x);
31 }
.fi
.SS "template<typename T > ostream& operator<< (ostream & os, const \fBscifir::coordinates_3d\fP< T > & x)"

.PP
Definition at line 908 of file coordinates_3d\&.hpp\&.
.PP
.nf
909 {
910     return os << to_string(x);
911 }
.fi
.SS "template<typename T , typename U > bool operator== (const \fBscifir::coordinates_3d\fP< T > & x, const \fBscifir::coordinates_3d\fP< U > & y)"

.PP
Definition at line 807 of file coordinates_3d\&.hpp\&.
.PP
.nf
808 {
809     if (x\&.x == y\&.x and x\&.y == y\&.y and x\&.z == y\&.z)
810     {
811         return true;
812     }
813     else
814     {
815         return false;
816     }
817 }
.fi
.SS "template<typename T , typename U > bool operator== (const \fBscifir::coordinates_3d\fP< T > & x, const \fBscifir::point_3d\fP< U > & y)"

.PP
Definition at line 826 of file coordinates_3d\&.hpp\&.
.PP
.nf
827 {
828     if (x\&.x == y\&.x and x\&.y == y\&.y and x\&.z == y\&.z)
829     {
830         return true;
831     }
832     else
833     {
834         return false;
835     }
836 }
.fi
.SS "template<typename T > bool operator== (const \fBscifir::coordinates_3d\fP< T > & x, const string & init_coordinates_3d)"

.PP
Definition at line 864 of file coordinates_3d\&.hpp\&.
.PP
.nf
865 {
866     scifir::coordinates_3d<T> y(init_coordinates_3d);
867     return (x == y);
868 }
.fi
.SS "template<typename T , typename U > bool operator== (const \fBscifir::point_3d\fP< T > & x, const \fBscifir::coordinates_3d\fP< U > & y)"

.PP
Definition at line 845 of file coordinates_3d\&.hpp\&.
.PP
.nf
846 {
847     if (x\&.x == y\&.x and x\&.y == y\&.y and x\&.z == y\&.z)
848     {
849         return true;
850     }
851     else
852     {
853         return false;
854     }
855 }
.fi
.SS "template<typename T > bool operator== (const string & init_coordinates_3d, const \fBscifir::coordinates_3d\fP< T > & x)"

.PP
Definition at line 877 of file coordinates_3d\&.hpp\&.
.PP
.nf
878 {
879     scifir::coordinates_3d<T> y(init_coordinates_3d);
880     return (x == y);
881 }
.fi
.SS "template<typename T > istream& operator>> (istream & is, \fBscifir::coordinates_3d\fP< T > & x)"

.PP
Definition at line 916 of file coordinates_3d\&.hpp\&.
.PP
.nf
917 {
918     char a[256];
919     is\&.getline(a, 256);
920     string b(a);
921     boost::trim(b);
922     x = scifir::coordinates_3d<T>(b);
923     return is;
924 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
