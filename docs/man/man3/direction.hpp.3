.TH "topology/direction.hpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
topology/direction.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <cstdint>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::direction\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "string \fBscifir::to_string\fP (direction::name x)"
.br
.ti -1c
.RI "string \fBscifir::to_string\fP (const direction &x)"
.br
.ti -1c
.RI "direction::name \fBscifir::create_direction\fP (const string &x)"
.br
.ti -1c
.RI "direction::name \fBscifir::invert\fP (direction::name x)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::direction\fP &x, const \fBscifir::direction\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::direction\fP &x, const \fBscifir::direction\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::direction\fP &x, \fBscifir::direction::name\fP y)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::direction\fP &x, \fBscifir::direction::name\fP y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (\fBscifir::direction::name\fP y, const \fBscifir::direction\fP &x)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (\fBscifir::direction::name\fP y, const \fBscifir::direction\fP &x)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::direction\fP &x, const string &init_direction)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::direction\fP &x, const string &init_direction)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const string &init_direction, const \fBscifir::direction\fP &x)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const string &init_direction, const \fBscifir::direction\fP &x)"
.br
.ti -1c
.RI "void \fBoperator+=\fP (string &x, const \fBscifir::direction\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const string &x, const \fBscifir::direction\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const \fBscifir::direction\fP &y, const string &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::direction\fP &x)"
.br
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBscifir::direction\fP &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool operator!= (const \fBscifir::direction\fP & x, const \fBscifir::direction\fP & y)"

.PP
Definition at line 359 of file direction\&.cpp\&.
.PP
.nf
360 {
361     return !(x == y);
362 }
.fi
.SS "bool operator!= (const \fBscifir::direction\fP & x, const string & init_direction)"

.PP
Definition at line 397 of file direction\&.cpp\&.
.PP
.nf
398 {
399     return !(x == init_direction);
400 }
.fi
.SS "bool operator!= (const \fBscifir::direction\fP & x, \fBscifir::direction::name\fP y)"

.PP
Definition at line 376 of file direction\&.cpp\&.
.PP
.nf
377 {
378     return !(x == y);
379 }
.fi
.SS "bool operator!= (const string & init_direction, const \fBscifir::direction\fP & x)"

.PP
Definition at line 408 of file direction\&.cpp\&.
.PP
.nf
409 {
410     return !(init_direction == x);
411 }
.fi
.SS "bool operator!= (\fBscifir::direction::name\fP y, const \fBscifir::direction\fP & x)"

.PP
Definition at line 386 of file direction\&.cpp\&.
.PP
.nf
387 {
388     return !(x == y);
389 }
.fi
.SS "string operator+ (const \fBscifir::direction\fP & y, const string & x)"

.PP
Definition at line 428 of file direction\&.cpp\&.
.PP
.nf
429 {
430     ostringstream output;
431     output << y;
432     output << x;
433     return output\&.str();
434 }
.fi
.SS "string operator+ (const string & x, const \fBscifir::direction\fP & y)"

.PP
Definition at line 420 of file direction\&.cpp\&.
.PP
.nf
421 {
422     ostringstream output;
423     output << x;
424     output << y;
425     return output\&.str();
426 }
.fi
.SS "void operator+= (string & x, const \fBscifir::direction\fP & y)"

.PP
Definition at line 413 of file direction\&.cpp\&.
.PP
.nf
414 {
415     ostringstream output;
416     output << y;
417     x += output\&.str();
418 }
.fi
.SS "ostream& operator<< (ostream & os, const \fBscifir::direction\fP & x)"

.PP
Definition at line 436 of file direction\&.cpp\&.
.PP
.nf
437 {
438     return os << to_string(x);
439 }
.fi
.SS "bool operator== (const \fBscifir::direction\fP & x, const \fBscifir::direction\fP & y)"

.PP
Definition at line 347 of file direction\&.cpp\&.
.PP
.nf
348 {
349     if(x\&.value == y\&.value)
350     {
351         return true;
352     }
353     else
354     {
355         return false;
356     }
357 }
.fi
.SS "bool operator== (const \fBscifir::direction\fP & x, const string & init_direction)"

.PP
Definition at line 391 of file direction\&.cpp\&.
.PP
.nf
392 {
393     scifir::direction y(init_direction);
394     return (x == y);
395 }
.fi
.SS "bool operator== (const \fBscifir::direction\fP & x, \fBscifir::direction::name\fP y)"

.PP
Definition at line 364 of file direction\&.cpp\&.
.PP
.nf
365 {
366     if(x\&.value == y)
367     {
368         return true;
369     }
370     else
371     {
372         return false;
373     }
374 }
.fi
.SS "bool operator== (const string & init_direction, const \fBscifir::direction\fP & x)"

.PP
Definition at line 402 of file direction\&.cpp\&.
.PP
.nf
403 {
404     scifir::direction y(init_direction);
405     return (x == y);
406 }
.fi
.SS "bool operator== (\fBscifir::direction::name\fP y, const \fBscifir::direction\fP & x)"

.PP
Definition at line 381 of file direction\&.cpp\&.
.PP
.nf
382 {
383     return (x == y);
384 }
.fi
.SS "istream& operator>> (istream & is, \fBscifir::direction\fP & x)"

.PP
Definition at line 441 of file direction\&.cpp\&.
.PP
.nf
442 {
443     char a[256];
444     is\&.getline(a, 256);
445     string b(a);
446     boost::trim(b);
447     x = scifir::direction(b);
448     return is;
449 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
