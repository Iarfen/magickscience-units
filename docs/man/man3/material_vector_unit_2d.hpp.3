.TH "units/material_vector_unit_2d.hpp" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
units/material_vector_unit_2d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&./vector_unit_2d\&.hpp'\fP
.br
\fC#include '\&.\&./coordinates/coordinates_2d\&.hpp'\fP
.br
\fC#include '\&.\&./units/unit_basic\&.hpp'\fP
.br
\fC#include <iostream>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::material_vector_unit_2d< T, U >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP \fBU\fP > \fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBmaterial_vector_unit_2d\fP< T, \fBU\fP > &x)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (\fBscifir::material_vector_unit_2d\fP< T, U > &x, const \fBscifir::material_vector_unit_2d\fP< T, U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (\fBscifir::material_vector_unit_2d\fP< T, U > &x, const \fBscifir::material_vector_unit_2d\fP< T, U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::material_vector_unit_2d\fP< T, U > &x, const string &init_material_vector_unit_2d)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::material_vector_unit_2d\fP< T, U > &x, const string &init_material_vector_unit_2d)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const string &init_material_vector_unit_2d, const \fBscifir::material_vector_unit_2d\fP< T, U > &x)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const string &init_material_vector_unit_2d, const \fBscifir::material_vector_unit_2d\fP< T, U > &x)"
.br
.ti -1c
.RI "template<typename T , typename U > void \fBoperator+=\fP (string &x, const \fBscifir::material_vector_unit_2d\fP< T, U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > string \fBoperator+\fP (const string &x, const \fBscifir::material_vector_unit_2d\fP< T, U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > string \fBoperator+\fP (const \fBscifir::material_vector_unit_2d\fP< T, U > &x, const string &y)"
.br
.ti -1c
.RI "template<typename T , typename U > ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::material_vector_unit_2d\fP< T, U > &x)"
.br
.ti -1c
.RI "template<typename T , typename U > istream & \fBoperator>>\fP (istream &is, \fBscifir::material_vector_unit_2d\fP< T, U > &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::material_vector_unit_2d\fP< T, U > & x, const string & init_material_vector_unit_2d)"

.PP
Definition at line \fB119\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
120 {
121     return !(x == init_material_vector_unit_2d);
122 }
.fi

.SS "template<typename T , typename U > bool operator!= (const string & init_material_vector_unit_2d, const \fBscifir::material_vector_unit_2d\fP< T, U > & x)"

.PP
Definition at line \fB132\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
133 {
134     return !(init_material_vector_unit_2d == x);
135 }
.fi

.SS "template<typename T , typename U > bool operator!= (\fBscifir::material_vector_unit_2d\fP< T, U > & x, const \fBscifir::material_vector_unit_2d\fP< T, U > & y)"

.PP
Definition at line \fB106\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
107 {
108     return !(x == y);
109 }
.fi

.SS "template<typename T , typename U > string operator+ (const \fBscifir::material_vector_unit_2d\fP< T, U > & x, const string & y)"

.PP
Definition at line \fB150\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
151 {
152     return to_string(x) + y;
153 }
.fi

.SS "template<typename T , typename U > string operator+ (const string & x, const \fBscifir::material_vector_unit_2d\fP< T, U > & y)"

.PP
Definition at line \fB144\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
145 {
146     return x + to_string(y);
147 }
.fi

.SS "template<typename T , typename U > void operator+= (string & x, const \fBscifir::material_vector_unit_2d\fP< T, U > & y)"

.PP
Definition at line \fB138\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
139 {
140     x += to_string(y);
141 }
.fi

.SS "template<typename T , typename U > ostream & operator<< (ostream & os, const \fBscifir::material_vector_unit_2d\fP< T, U > & x)"

.PP
Definition at line \fB156\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
157 {
158     os << to_string(x);
159     return os;
160 }
.fi

.SS "template<typename T , typename U > bool operator== (const \fBscifir::material_vector_unit_2d\fP< T, U > & x, const string & init_material_vector_unit_2d)"

.PP
Definition at line \fB112\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
113 {
114     scifir::material_vector_unit_2d<T,U> y(init_material_vector_unit_2d);
115     return (x == y);
116 }
.fi

.SS "template<typename T , typename U > bool operator== (const string & init_material_vector_unit_2d, const \fBscifir::material_vector_unit_2d\fP< T, U > & x)"

.PP
Definition at line \fB125\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
126 {
127     scifir::material_vector_unit_2d<T,U> y(init_material_vector_unit_2d);
128     return (x == y);
129 }
.fi

.SS "template<typename T , typename U > bool operator== (\fBscifir::material_vector_unit_2d\fP< T, U > & x, const \fBscifir::material_vector_unit_2d\fP< T, U > & y)"

.PP
Definition at line \fB100\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
101 {
102     return (x\&.vector == y\&.vector and x\&.coordinates == y\&.coordinates);
103 }
.fi

.SS "template<typename T , typename U > istream & operator>> (istream & is, \fBscifir::material_vector_unit_2d\fP< T, U > & x)"

.PP
Definition at line \fB163\fP of file \fBmaterial_vector_unit_2d\&.hpp\fP\&..PP
.nf
164 {
165     char a[256];
166     is\&.getline(a, 256);
167     string b(a);
168     boost::trim(b);
169     x = scifir::material_vector_unit_2d<T,U>(b);
170     return is;
171 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
