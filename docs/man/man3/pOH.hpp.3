.TH "special_units/pOH.hpp" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
special_units/pOH.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./util/is_number\&.hpp'\fP
.br
\fC#include '\&.\&./units/scalar_unit\&.hpp'\fP
.br
\fC#include '\&.\&./predefined_units/chemistry_units\&.hpp'\fP
.br
\fC#include '\&.\&./special_units/pH\&.hpp'\fP
.br
\fC#include 'boost/math/constants/constants\&.hpp'\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::pOH\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBpOH\fP &x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::pOH\fP \fBoperator+\fP (T x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::pOH\fP \fBoperator\-\fP (T x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator==\fP (T x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator!=\fP (T x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator<\fP (T x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator>\fP (T x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator<=\fP (T x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator>=\fP (T x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator==\fP (const \fBscifir::pOH\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator!=\fP (const \fBscifir::pOH\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator<\fP (const \fBscifir::pOH\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator>\fP (const \fBscifir::pOH\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator<=\fP (const \fBscifir::pOH\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator>=\fP (const \fBscifir::pOH\fP &y, T x)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::pOH\fP &x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::pOH\fP &x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBscifir::pOH\fP &x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator>\fP (const \fBscifir::pOH\fP &x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBscifir::pOH\fP &x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBscifir::pOH\fP &x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::pOH\fP &x, const string &init_pOH)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::pOH\fP &x, const string &init_pOH)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const string &init_pOH, const \fBscifir::pOH\fP &x)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const string &init_pOH, const \fBscifir::pOH\fP &x)"
.br
.ti -1c
.RI "void \fBoperator+=\fP (string &x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const string &x, const \fBscifir::pOH\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const \fBscifir::pOH\fP &y, const string &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::pOH\fP &x)"
.br
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBscifir::pOH\fP &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool operator!= (const \fBscifir::pOH\fP & x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB216\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
217 {
218     return !(x == y);
219 }
.fi

.SS "bool operator!= (const \fBscifir::pOH\fP & x, const string & init_pOH)"

.PP
Definition at line \fB261\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
262 {
263     return !(x == init_pOH);
264 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator!= (const \fBscifir::pOH\fP & y, T x)"

.PP
Definition at line \fB154\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
155 {
156     return (x != y\&.get_value());
157 }
.fi

.SS "bool operator!= (const string & init_pOH, const \fBscifir::pOH\fP & x)"

.PP
Definition at line \fB272\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
273 {
274     return !(init_pOH == x);
275 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator!= (T x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB118\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
119 {
120     return (x != y\&.get_value());
121 }
.fi

.SS "string operator+ (const \fBscifir::pOH\fP & y, const string & x)"

.PP
Definition at line \fB292\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
293 {
294     ostringstream output;
295     output << y;
296     output << x;
297     return output\&.str();
298 }
.fi

.SS "string operator+ (const string & x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB284\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
285 {
286     ostringstream output;
287     output << x;
288     output << y;
289     return output\&.str();
290 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::pOH\fP operator+ (T x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB100\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
101 {
102     return scifir::pOH(x + y\&.get_value());
103 }
.fi

.SS "void operator+= (string & x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB277\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
278 {
279     ostringstream output;
280     output << y;
281     x += output\&.str();
282 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::pOH\fP operator\- (T x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB106\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
107 {
108     return scifir::pOH(x \- y\&.get_value());
109 }
.fi

.SS "bool operator< (const \fBscifir::pOH\fP & x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB221\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
222 {
223     if(x\&.get_value() < y\&.get_value())
224     {
225         return true;
226     }
227     else
228     {
229         return false;
230     }
231 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator< (const \fBscifir::pOH\fP & y, T x)"

.PP
Definition at line \fB160\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
161 {
162     return (y\&.get_value() < x);
163 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator< (T x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB124\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
125 {
126     return (x < y\&.get_value());
127 }
.fi

.SS "ostream & operator<< (ostream & os, const \fBscifir::pOH\fP & x)"

.PP
Definition at line \fB300\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
301 {
302     return os << to_string(x);
303 }
.fi

.SS "bool operator<= (const \fBscifir::pOH\fP & x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB245\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
246 {
247     return !(x > y);
248 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator<= (const \fBscifir::pOH\fP & y, T x)"

.PP
Definition at line \fB172\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
173 {
174     return (y\&.get_value() <= x);
175 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator<= (T x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB136\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
137 {
138     return (x <= y\&.get_value());
139 }
.fi

.SS "bool operator== (const \fBscifir::pOH\fP & x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB204\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
205 {
206     if(x\&.get_value() == y\&.get_value())
207     {
208         return true;
209     }
210     else
211     {
212         return false;
213     }
214 }
.fi

.SS "bool operator== (const \fBscifir::pOH\fP & x, const string & init_pOH)"

.PP
Definition at line \fB255\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
256 {
257     scifir::pOH y = scifir::pOH(init_pOH);
258     return (x == y);
259 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator== (const \fBscifir::pOH\fP & y, T x)"

.PP
Definition at line \fB148\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
149 {
150     return (x == y\&.get_value());
151 }
.fi

.SS "bool operator== (const string & init_pOH, const \fBscifir::pOH\fP & x)"

.PP
Definition at line \fB266\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
267 {
268     scifir::pOH y = scifir::pOH(init_pOH);
269     return (x == y);
270 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator== (T x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB112\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
113 {
114     return (x == y\&.get_value());
115 }
.fi

.SS "bool operator> (const \fBscifir::pOH\fP & x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB233\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
234 {
235     if(x\&.get_value() > y\&.get_value())
236     {
237         return true;
238     }
239     else
240     {
241         return false;
242     }
243 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator> (const \fBscifir::pOH\fP & y, T x)"

.PP
Definition at line \fB166\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
167 {
168     return (y\&.get_value() > x);
169 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator> (T x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB130\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
131 {
132     return (x > y\&.get_value());
133 }
.fi

.SS "bool operator>= (const \fBscifir::pOH\fP & x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB250\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
251 {
252     return !(x < y);
253 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator>= (const \fBscifir::pOH\fP & y, T x)"

.PP
Definition at line \fB178\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
179 {
180     return (y\&.get_value() >= x);
181 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator>= (T x, const \fBscifir::pOH\fP & y)"

.PP
Definition at line \fB142\fP of file \fBpOH\&.hpp\fP\&..PP
.nf
143 {
144     return (x >= y\&.get_value());
145 }
.fi

.SS "istream & operator>> (istream & is, \fBscifir::pOH\fP & x)"

.PP
Definition at line \fB305\fP of file \fBpOH\&.cpp\fP\&..PP
.nf
306 {
307     char a[256];
308     is\&.getline(a, 256);
309     string b(a);
310     boost::trim(b);
311     x = scifir::pOH(b);
312     return is;
313 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
