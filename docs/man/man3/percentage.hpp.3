.TH "special_units/percentage.hpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
special_units/percentage.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./topology/constants\&.hpp'\fP
.br
\fC#include '\&.\&./util/is_number\&.hpp'\fP
.br
\fC#include '\&.\&./units/scalar_unit\&.hpp'\fP
.br
\fC#include 'boost/math/constants/constants\&.hpp'\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::percentage\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "string \fBscifir::to_string\fP (const percentage &x)"
.br
.ti -1c
.RI "bool \fBscifir::is_percentage\fP (const string &init_percentage)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::percentage\fP \fBoperator+\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::percentage\fP \fBoperator\-\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> float \fBoperator*\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> float \fBoperator/\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator==\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator!=\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator<\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator>\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator<=\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator>=\fP (T x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator==\fP (const \fBscifir::percentage\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator!=\fP (const \fBscifir::percentage\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator<\fP (const \fBscifir::percentage\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator>\fP (const \fBscifir::percentage\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator<=\fP (const \fBscifir::percentage\fP &y, T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool \fBoperator>=\fP (const \fBscifir::percentage\fP &y, T x)"
.br
.ti -1c
.RI "\fBscifir::scalar_unit\fP \fBoperator*\fP (const \fBscifir::scalar_unit\fP &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "\fBscifir::scalar_unit\fP \fBoperator/\fP (const \fBscifir::scalar_unit\fP &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::percentage\fP &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::percentage\fP &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBscifir::percentage\fP &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator>\fP (const \fBscifir::percentage\fP &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBscifir::percentage\fP &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBscifir::percentage\fP &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::percentage\fP &x, const string &init_percentage)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::percentage\fP &x, const string &init_percentage)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const string &init_percentage, const \fBscifir::percentage\fP &x)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const string &init_percentage, const \fBscifir::percentage\fP &x)"
.br
.ti -1c
.RI "void \fBoperator+=\fP (string &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const string &x, const \fBscifir::percentage\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const \fBscifir::percentage\fP &y, const string &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::percentage\fP &x)"
.br
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBscifir::percentage\fP &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool operator!= (const \fBscifir::percentage\fP & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 548 of file percentage\&.cpp\&.
.PP
.nf
549 {
550     return !(x == y);
551 }
.fi
.SS "bool operator!= (const \fBscifir::percentage\fP & x, const string & init_percentage)"

.PP
Definition at line 593 of file percentage\&.cpp\&.
.PP
.nf
594 {
595     return !(x == init_percentage);
596 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator!= (const \fBscifir::percentage\fP & y, T x)"

.PP
Definition at line 217 of file percentage\&.hpp\&.
.PP
.nf
218 {
219     return (x != y\&.get_value());
220 }
.fi
.SS "bool operator!= (const string & init_percentage, const \fBscifir::percentage\fP & x)"

.PP
Definition at line 604 of file percentage\&.cpp\&.
.PP
.nf
605 {
606     return !(init_percentage == x);
607 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator!= (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 181 of file percentage\&.hpp\&.
.PP
.nf
182 {
183     return (x != y\&.get_value());
184 }
.fi
.SS "\fBscifir::scalar_unit\fP operator* (const \fBscifir::scalar_unit\fP & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 526 of file percentage\&.cpp\&.
.PP
.nf
527 {
528     return x * y\&.get_factor();
529 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> float operator* (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 163 of file percentage\&.hpp\&.
.PP
.nf
164 {
165     return float(x * y\&.get_value() / 100);
166 }
.fi
.SS "string operator+ (const \fBscifir::percentage\fP & y, const string & x)"

.PP
Definition at line 624 of file percentage\&.cpp\&.
.PP
.nf
625 {
626     ostringstream output;
627     output << y;
628     output << x;
629     return output\&.str();
630 }
.fi
.SS "string operator+ (const string & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 616 of file percentage\&.cpp\&.
.PP
.nf
617 {
618     ostringstream output;
619     output << x;
620     output << y;
621     return output\&.str();
622 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::percentage\fP operator+ (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 151 of file percentage\&.hpp\&.
.PP
.nf
152 {
153     return scifir::percentage(x + y\&.get_value());
154 }
.fi
.SS "void operator+= (string & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 609 of file percentage\&.cpp\&.
.PP
.nf
610 {
611     ostringstream output;
612     output << y;
613     x += output\&.str();
614 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::percentage\fP operator\- (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 157 of file percentage\&.hpp\&.
.PP
.nf
158 {
159     return scifir::percentage(x - y\&.get_value());
160 }
.fi
.SS "\fBscifir::scalar_unit\fP operator/ (const \fBscifir::scalar_unit\fP & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 531 of file percentage\&.cpp\&.
.PP
.nf
532 {
533     return x / y\&.get_factor();
534 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> float operator/ (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 169 of file percentage\&.hpp\&.
.PP
.nf
170 {
171     return float(100 * x / y\&.get_value());
172 }
.fi
.SS "bool operator< (const \fBscifir::percentage\fP & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 553 of file percentage\&.cpp\&.
.PP
.nf
554 {
555     if(x\&.get_value() < y\&.get_value())
556     {
557         return true;
558     }
559     else
560     {
561         return false;
562     }
563 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator< (const \fBscifir::percentage\fP & y, T x)"

.PP
Definition at line 223 of file percentage\&.hpp\&.
.PP
.nf
224 {
225     return (y\&.get_value() < x);
226 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator< (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 187 of file percentage\&.hpp\&.
.PP
.nf
188 {
189     return (x < y\&.get_value());
190 }
.fi
.SS "ostream& operator<< (ostream & os, const \fBscifir::percentage\fP & x)"

.PP
Definition at line 632 of file percentage\&.cpp\&.
.PP
.nf
633 {
634     return os << to_string(x);
635 }
.fi
.SS "bool operator<= (const \fBscifir::percentage\fP & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 577 of file percentage\&.cpp\&.
.PP
.nf
578 {
579     return !(x > y);
580 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator<= (const \fBscifir::percentage\fP & y, T x)"

.PP
Definition at line 235 of file percentage\&.hpp\&.
.PP
.nf
236 {
237     return (y\&.get_value() <= x);
238 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator<= (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 199 of file percentage\&.hpp\&.
.PP
.nf
200 {
201     return (x <= y\&.get_value());
202 }
.fi
.SS "bool operator== (const \fBscifir::percentage\fP & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 536 of file percentage\&.cpp\&.
.PP
.nf
537 {
538     if(x\&.get_value() == y\&.get_value())
539     {
540         return true;
541     }
542     else
543     {
544         return false;
545     }
546 }
.fi
.SS "bool operator== (const \fBscifir::percentage\fP & x, const string & init_percentage)"

.PP
Definition at line 587 of file percentage\&.cpp\&.
.PP
.nf
588 {
589     scifir::percentage y = scifir::percentage(init_percentage);
590     return (x == y);
591 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator== (const \fBscifir::percentage\fP & y, T x)"

.PP
Definition at line 211 of file percentage\&.hpp\&.
.PP
.nf
212 {
213     return (x == y\&.get_value());
214 }
.fi
.SS "bool operator== (const string & init_percentage, const \fBscifir::percentage\fP & x)"

.PP
Definition at line 598 of file percentage\&.cpp\&.
.PP
.nf
599 {
600     scifir::percentage y = scifir::percentage(init_percentage);
601     return (x == y);
602 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator== (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 175 of file percentage\&.hpp\&.
.PP
.nf
176 {
177     return (x == y\&.get_value());
178 }
.fi
.SS "bool operator> (const \fBscifir::percentage\fP & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 565 of file percentage\&.cpp\&.
.PP
.nf
566 {
567     if(x\&.get_value() > y\&.get_value())
568     {
569         return true;
570     }
571     else
572     {
573         return false;
574     }
575 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator> (const \fBscifir::percentage\fP & y, T x)"

.PP
Definition at line 229 of file percentage\&.hpp\&.
.PP
.nf
230 {
231     return (y\&.get_value() > x);
232 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator> (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 193 of file percentage\&.hpp\&.
.PP
.nf
194 {
195     return (x > y\&.get_value());
196 }
.fi
.SS "bool operator>= (const \fBscifir::percentage\fP & x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 582 of file percentage\&.cpp\&.
.PP
.nf
583 {
584     return !(x < y);
585 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator>= (const \fBscifir::percentage\fP & y, T x)"

.PP
Definition at line 241 of file percentage\&.hpp\&.
.PP
.nf
242 {
243     return (y\&.get_value() >= x);
244 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> bool operator>= (T x, const \fBscifir::percentage\fP & y)"

.PP
Definition at line 205 of file percentage\&.hpp\&.
.PP
.nf
206 {
207     return (x >= y\&.get_value());
208 }
.fi
.SS "istream& operator>> (istream & is, \fBscifir::percentage\fP & x)"

.PP
Definition at line 637 of file percentage\&.cpp\&.
.PP
.nf
638 {
639     char a[256];
640     is\&.getline(a, 256);
641     string b(a);
642     boost::trim(b);
643     x = scifir::percentage(b);
644     return is;
645 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
