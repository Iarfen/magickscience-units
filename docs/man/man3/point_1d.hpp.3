.TH "topology/point_1d.hpp" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
topology/point_1d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./predefined_units/physics_units\&.hpp'\fP
.br
\fC#include '\&.\&./units/unit_basic\&.hpp'\fP
.br
\fC#include '\&.\&./util/types\&.hpp'\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::point_1d< T >\fP"
.br
.ti -1c
.RI "class \fBscifir::point_1d< float >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<\fBtypename\fP T > \fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBpoint_1d\fP< T > &x)"
.br
.ti -1c
.RI "\fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBpoint_1d\fP< \fBfloat\fP > &x)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP \fBU\fP > T \fBscifir::distance\fP (\fBconst\fP \fBpoint_1d\fP< T > &x, \fBconst\fP \fBpoint_1d\fP< \fBU\fP > &y)"
.br
.ti -1c
.RI "\fBfloat\fP \fBscifir::distance\fP (\fBconst\fP \fBpoint_1d\fP< \fBfloat\fP > &x, \fBconst\fP \fBpoint_1d\fP< \fBfloat\fP > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::point_1d\fP< T > &x, const \fBscifir::point_1d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::point_1d\fP< T > &x, const \fBscifir::point_1d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBscifir::point_1d\fP< T > &x, const string &init_point_1d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBscifir::point_1d\fP< T > &x, const string &init_point_1d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const string &init_point_1d, const \fBscifir::point_1d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const string &init_point_1d, const \fBscifir::point_1d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > void \fBoperator+=\fP (string &x, const \fBscifir::point_1d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const string &x, const \fBscifir::point_1d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const \fBscifir::point_1d\fP< T > &x, const string &y)"
.br
.ti -1c
.RI "template<typename T > ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::point_1d\fP< T > &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::point_1d\fP< float > &x)"
.br
.ti -1c
.RI "template<typename T > istream & \fBoperator>>\fP (istream &is, \fBscifir::point_1d\fP< T > &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::point_1d\fP< T > & x, const \fBscifir::point_1d\fP< U > & y)"

.PP
Definition at line \fB214\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
215 {
216     return !(x == y);
217 }
.fi

.SS "template<typename T > bool operator!= (const \fBscifir::point_1d\fP< T > & x, const string & init_point_1d)"

.PP
Definition at line \fB227\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
228 {
229     return !(x == init_point_1d);
230 }
.fi

.SS "template<typename T > bool operator!= (const string & init_point_1d, const \fBscifir::point_1d\fP< T > & x)"

.PP
Definition at line \fB240\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
241 {
242     return !(init_point_1d == x);
243 }
.fi

.SS "template<typename T > string operator+ (const \fBscifir::point_1d\fP< T > & x, const string & y)"

.PP
Definition at line \fB258\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
259 {
260     return to_string(x) + y;
261 }
.fi

.SS "template<typename T > string operator+ (const string & x, const \fBscifir::point_1d\fP< T > & y)"

.PP
Definition at line \fB252\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
253 {
254     return x + to_string(y);
255 }
.fi

.SS "template<typename T > void operator+= (string & x, const \fBscifir::point_1d\fP< T > & y)"

.PP
Definition at line \fB246\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
247 {
248     x += to_string(y);
249 }
.fi

.SS "ostream & operator<< (ostream & os, const \fBscifir::point_1d\fP< float > & x)"

.PP
Definition at line \fB39\fP of file \fBpoint_1d\&.cpp\fP\&..PP
.nf
40 {
41     return os << scifir::to_string(x);
42 }
.fi

.SS "template<typename T > ostream & operator<< (ostream & os, const \fBscifir::point_1d\fP< T > & x)"

.PP
Definition at line \fB264\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
265 {
266     return os << to_string(x);
267 }
.fi

.SS "template<typename T , typename U > bool operator== (const \fBscifir::point_1d\fP< T > & x, const \fBscifir::point_1d\fP< U > & y)"

.PP
Definition at line \fB208\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
209 {
210     return (x\&.x == y\&.x);
211 }
.fi

.SS "template<typename T > bool operator== (const \fBscifir::point_1d\fP< T > & x, const string & init_point_1d)"

.PP
Definition at line \fB220\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
221 {
222     scifir::point_1d<T> y(init_point_1d);
223     return (x == y);
224 }
.fi

.SS "template<typename T > bool operator== (const string & init_point_1d, const \fBscifir::point_1d\fP< T > & x)"

.PP
Definition at line \fB233\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
234 {
235     scifir::point_1d<T> y(init_point_1d);
236     return (x == y);
237 }
.fi

.SS "template<typename T > istream & operator>> (istream & is, \fBscifir::point_1d\fP< T > & x)"

.PP
Definition at line \fB272\fP of file \fBpoint_1d\&.hpp\fP\&..PP
.nf
273 {
274     char a[256];
275     is\&.getline(a, 256);
276     string b(a);
277     boost::trim(b);
278     x = scifir::point_1d<T>(b);
279     return is;
280 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
