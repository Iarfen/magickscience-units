.TH "topology/point_2d.hpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
topology/point_2d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./predefined_units/physics_units\&.hpp'\fP
.br
\fC#include '\&.\&./units/unit_basic\&.hpp'\fP
.br
\fC#include '\&.\&./util/types\&.hpp'\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::point_2d< T >\fP"
.br
.ti -1c
.RI "class \fBscifir::point_2d< float >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > string \fBscifir::to_string\fP (const point_2d< T > &x)"
.br
.ti -1c
.RI "string \fBscifir::to_string\fP (const point_2d< float > &x)"
.br
.ti -1c
.RI "template<typename T , typename U > T \fBscifir::distance\fP (const point_2d< T > &x, const point_2d< U > &y)"
.br
.ti -1c
.RI "float \fBscifir::distance\fP (const point_2d< float > &x, const point_2d< float > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::point_2d\fP< T > &x, const \fBscifir::point_2d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::point_2d\fP< T > &x, const \fBscifir::point_2d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBscifir::point_2d\fP< T > &x, const string &init_point_2d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBscifir::point_2d\fP< T > &x, const string &init_point_2d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const string &init_point_2d, const \fBscifir::point_2d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const string &init_point_2d, const \fBscifir::point_2d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > void \fBoperator+=\fP (string &x, const \fBscifir::point_2d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const string &x, const \fBscifir::point_2d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const \fBscifir::point_2d\fP< T > &x, const string &y)"
.br
.ti -1c
.RI "template<typename T > ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::point_2d\fP< T > &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::point_2d\fP< float > &x)"
.br
.ti -1c
.RI "template<typename T > istream & \fBoperator>>\fP (istream &is, \fBscifir::point_2d\fP< T > &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::point_2d\fP< T > & x, const \fBscifir::point_2d\fP< U > & y)"

.PP
Definition at line 343 of file point_2d\&.hpp\&.
.PP
.nf
344 {
345     return !(x == y);
346 }
.fi
.SS "template<typename T > bool operator!= (const \fBscifir::point_2d\fP< T > & x, const string & init_point_2d)"

.PP
Definition at line 356 of file point_2d\&.hpp\&.
.PP
.nf
357 {
358     return !(x == init_point_2d);
359 }
.fi
.SS "template<typename T > bool operator!= (const string & init_point_2d, const \fBscifir::point_2d\fP< T > & x)"

.PP
Definition at line 369 of file point_2d\&.hpp\&.
.PP
.nf
370 {
371     return !(init_point_2d == x);
372 }
.fi
.SS "template<typename T > string operator+ (const \fBscifir::point_2d\fP< T > & x, const string & y)"

.PP
Definition at line 387 of file point_2d\&.hpp\&.
.PP
.nf
388 {
389     return to_string(x) + y;
390 }
.fi
.SS "template<typename T > string operator+ (const string & x, const \fBscifir::point_2d\fP< T > & y)"

.PP
Definition at line 381 of file point_2d\&.hpp\&.
.PP
.nf
382 {
383     return x + to_string(y);
384 }
.fi
.SS "template<typename T > void operator+= (string & x, const \fBscifir::point_2d\fP< T > & y)"

.PP
Definition at line 375 of file point_2d\&.hpp\&.
.PP
.nf
376 {
377     x += to_string(y);
378 }
.fi
.SS "ostream& operator<< (ostream & os, const \fBscifir::point_2d\fP< float > & x)"

.PP
Definition at line 41 of file point_2d\&.cpp\&.
.PP
.nf
42 {
43     return os << scifir::to_string(x);
44 }
.fi
.SS "template<typename T > ostream& operator<< (ostream & os, const \fBscifir::point_2d\fP< T > & x)"

.PP
Definition at line 393 of file point_2d\&.hpp\&.
.PP
.nf
394 {
395     return os << to_string(x);
396 }
.fi
.SS "template<typename T , typename U > bool operator== (const \fBscifir::point_2d\fP< T > & x, const \fBscifir::point_2d\fP< U > & y)"

.PP
Definition at line 337 of file point_2d\&.hpp\&.
.PP
.nf
338 {
339     return (x\&.x == y\&.x and x\&.y == y\&.y);
340 }
.fi
.SS "template<typename T > bool operator== (const \fBscifir::point_2d\fP< T > & x, const string & init_point_2d)"

.PP
Definition at line 349 of file point_2d\&.hpp\&.
.PP
.nf
350 {
351     scifir::point_2d<T> y(init_point_2d);
352     return (x == y);
353 }
.fi
.SS "template<typename T > bool operator== (const string & init_point_2d, const \fBscifir::point_2d\fP< T > & x)"

.PP
Definition at line 362 of file point_2d\&.hpp\&.
.PP
.nf
363 {
364     scifir::point_2d<T> y(init_point_2d);
365     return (x == y);
366 }
.fi
.SS "template<typename T > istream& operator>> (istream & is, \fBscifir::point_2d\fP< T > & x)"

.PP
Definition at line 401 of file point_2d\&.hpp\&.
.PP
.nf
402 {
403     char a[256];
404     is\&.getline(a, 256);
405     string b(a);
406     boost::trim(b);
407     x = scifir::point_2d<T>(b);
408     return is;
409 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
