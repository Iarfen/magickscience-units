.TH "topology/point_3d.hpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
topology/point_3d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./predefined_units/physics_units\&.hpp'\fP
.br
\fC#include '\&.\&./units/unit_basic\&.hpp'\fP
.br
\fC#include '\&.\&./util/types\&.hpp'\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::point_3d< T >\fP"
.br
.ti -1c
.RI "class \fBscifir::point_3d< float >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > string \fBscifir::to_string\fP (const point_3d< T > &x)"
.br
.ti -1c
.RI "string \fBscifir::to_string\fP (const point_3d< float > &x)"
.br
.ti -1c
.RI "template<typename T , typename U > T \fBscifir::distance\fP (const point_3d< T > &x, const point_3d< U > &y)"
.br
.ti -1c
.RI "float \fBscifir::distance\fP (const point_3d< float > &x, const point_3d< float > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator==\fP (const \fBscifir::point_3d\fP< T > &x, const \fBscifir::point_3d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T , typename U > bool \fBoperator!=\fP (const \fBscifir::point_3d\fP< T > &x, const \fBscifir::point_3d\fP< U > &y)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBscifir::point_3d\fP< T > &x, const string &init_point_3d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBscifir::point_3d\fP< T > &x, const string &init_point_3d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const string &init_point_3d, const \fBscifir::point_3d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const string &init_point_3d, const \fBscifir::point_3d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > void \fBoperator+=\fP (string &x, const \fBscifir::point_3d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const string &x, const \fBscifir::point_3d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const \fBscifir::point_3d\fP< T > &x, const string &y)"
.br
.ti -1c
.RI "template<typename T > ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::point_3d\fP< T > &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::point_3d\fP< float > &x)"
.br
.ti -1c
.RI "template<typename T > istream & \fBoperator>>\fP (istream &is, \fBscifir::point_3d\fP< T > &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T , typename U > bool operator!= (const \fBscifir::point_3d\fP< T > & x, const \fBscifir::point_3d\fP< U > & y)"

.PP
Definition at line 580 of file point_3d\&.hpp\&.
.PP
.nf
581 {
582     return !(x == y);
583 }
.fi
.SS "template<typename T > bool operator!= (const \fBscifir::point_3d\fP< T > & x, const string & init_point_3d)"

.PP
Definition at line 593 of file point_3d\&.hpp\&.
.PP
.nf
594 {
595     return !(x == init_point_3d);
596 }
.fi
.SS "template<typename T > bool operator!= (const string & init_point_3d, const \fBscifir::point_3d\fP< T > & x)"

.PP
Definition at line 606 of file point_3d\&.hpp\&.
.PP
.nf
607 {
608     return !(init_point_3d == x);
609 }
.fi
.SS "template<typename T > string operator+ (const \fBscifir::point_3d\fP< T > & x, const string & y)"

.PP
Definition at line 624 of file point_3d\&.hpp\&.
.PP
.nf
625 {
626     return to_string(x) + y;
627 }
.fi
.SS "template<typename T > string operator+ (const string & x, const \fBscifir::point_3d\fP< T > & y)"

.PP
Definition at line 618 of file point_3d\&.hpp\&.
.PP
.nf
619 {
620     return x + to_string(y);
621 }
.fi
.SS "template<typename T > void operator+= (string & x, const \fBscifir::point_3d\fP< T > & y)"

.PP
Definition at line 612 of file point_3d\&.hpp\&.
.PP
.nf
613 {
614     x += to_string(y);
615 }
.fi
.SS "ostream& operator<< (ostream & os, const \fBscifir::point_3d\fP< float > & x)"

.PP
Definition at line 43 of file point_3d\&.cpp\&.
.PP
.nf
44 {
45     return os << scifir::to_string(x);
46 }
.fi
.SS "template<typename T > ostream& operator<< (ostream & os, const \fBscifir::point_3d\fP< T > & x)"

.PP
Definition at line 630 of file point_3d\&.hpp\&.
.PP
.nf
631 {
632     return os << to_string(x);
633 }
.fi
.SS "template<typename T , typename U > bool operator== (const \fBscifir::point_3d\fP< T > & x, const \fBscifir::point_3d\fP< U > & y)"

.PP
Definition at line 574 of file point_3d\&.hpp\&.
.PP
.nf
575 {
576     return (x\&.x == y\&.x and x\&.y == y\&.y and x\&.z == y\&.z);
577 }
.fi
.SS "template<typename T > bool operator== (const \fBscifir::point_3d\fP< T > & x, const string & init_point_3d)"

.PP
Definition at line 586 of file point_3d\&.hpp\&.
.PP
.nf
587 {
588     scifir::point_3d<T> y(init_point_3d);
589     return (x == y);
590 }
.fi
.SS "template<typename T > bool operator== (const string & init_point_3d, const \fBscifir::point_3d\fP< T > & x)"

.PP
Definition at line 599 of file point_3d\&.hpp\&.
.PP
.nf
600 {
601     scifir::point_3d<T> y(init_point_3d);
602     return (x == y);
603 }
.fi
.SS "template<typename T > istream& operator>> (istream & is, \fBscifir::point_3d\fP< T > & x)"

.PP
Definition at line 638 of file point_3d\&.hpp\&.
.PP
.nf
639 {
640     char a[256];
641     is\&.getline(a, 256);
642     string b(a);
643     boost::trim(b);
644     x = scifir::point_3d<T>(b);
645     return is;
646 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
