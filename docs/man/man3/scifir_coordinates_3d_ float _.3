.TH "scifir::coordinates_3d< float >" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::coordinates_3d< float >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <coordinates_3d\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBcoordinates_3d\fP ()"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (const \fBcoordinates_3d\fP< float > &x_coordinates)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (\fBcoordinates_3d\fP< float > &&x_coordinates)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (float new_x, float new_y, float new_z)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (float new_p, const \fBangle\fP &new_theta, float new_z)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (float new_r, const \fBangle\fP &new_theta, const \fBangle\fP &new_phi)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (const \fBangle\fP &new_latitude, const \fBangle\fP &new_longitude, float new_altitude)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (const \fBpoint_3d\fP< float > &x_point)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (\fBpoint_3d\fP< float > &&x_point)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP (const string &init_coordinates_3d)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP< float > & \fBoperator=\fP (const \fBcoordinates_3d\fP< float > &x_coordinates)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP< float > & \fBoperator=\fP (\fBcoordinates_3d\fP< float > &&x_coordinates)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP< float > & \fBoperator=\fP (const \fBpoint_3d\fP< float > &x_point)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP< float > & \fBoperator=\fP (\fBpoint_3d\fP< float > &&x_point)"
.br
.ti -1c
.RI "\fBcoordinates_3d\fP< float > & \fBoperator=\fP (const string &init_coordinates_3d)"
.br
.ti -1c
.RI "float \fBget_p\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_theta\fP () const"
.br
.ti -1c
.RI "float \fBget_r\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_phi\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_latitude\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_longitude\fP () const"
.br
.ti -1c
.RI "float \fBget_altitude\fP () const"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_x, float new_y, float new_z)"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_p, const \fBangle\fP &new_theta, float new_z)"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_r, const \fBangle\fP &new_theta, const \fBangle\fP &new_phi)"
.br
.ti -1c
.RI "void \fBset_position\fP (const \fBangle\fP &new_latitude, const \fBangle\fP &new_longitude, float new_altitude)"
.br
.ti -1c
.RI "void \fBrotate_in_x\fP (const \fBangle\fP &x_angle)"
.br
.ti -1c
.RI "void \fBrotate_in_y\fP (const \fBangle\fP &x_angle)"
.br
.ti -1c
.RI "void \fBrotate_in_z\fP (const \fBangle\fP &x_angle)"
.br
.ti -1c
.RI "void \fBmove\fP (const displacement_3d &x_displacement)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_x, float new_y, float new_z)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_p, const \fBangle\fP &new_theta, float new_z)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_r, const \fBangle\fP &new_theta, const \fBangle\fP &new_phi)"
.br
.ti -1c
.RI "float \fBdistance_to_origin\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_cartesian\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_cylindrical\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_spherical\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_geographical\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "float \fBx\fP"
.br
.ti -1c
.RI "float \fBy\fP"
.br
.ti -1c
.RI "float \fBz\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialize_from_string\fP (string init_coordinates_3d)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 303 of file coordinates_3d\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP ()\fC [inline]\fP"

.PP
Definition at line 306 of file coordinates_3d\&.hpp\&.
.PP
.nf
306                              : x(),y(),z()
307             {}
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (const \fBcoordinates_3d\fP< float > & x_coordinates)\fC [inline]\fP"

.PP
Definition at line 309 of file coordinates_3d\&.hpp\&.
.PP
.nf
309                                                                        : x(x_coordinates\&.x),y(x_coordinates\&.y),z(x_coordinates\&.z)
310             {}
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (\fBcoordinates_3d\fP< float > && x_coordinates)\fC [inline]\fP"

.PP
Definition at line 312 of file coordinates_3d\&.hpp\&.
.PP
.nf
312                                                                   : x(std::move(x_coordinates\&.x)),y(std::move(x_coordinates\&.y)),z(std::move(x_coordinates\&.z))
313             {}
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (float new_x, float new_y, float new_z)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 315 of file coordinates_3d\&.hpp\&.
.PP
.nf
315                                                                          : x(new_x),y(new_y),z(new_z)
316             {}
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (float new_p, const \fBangle\fP & new_theta, float new_z)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 318 of file coordinates_3d\&.hpp\&.
.PP
.nf
319             {
320                 set_position(new_p,new_theta,new_z);
321             }
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (float new_r, const \fBangle\fP & new_theta, const \fBangle\fP & new_phi)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 323 of file coordinates_3d\&.hpp\&.
.PP
.nf
324             {
325                 set_position(new_r,new_theta,new_phi);
326             }
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (const \fBangle\fP & new_latitude, const \fBangle\fP & new_longitude, float new_altitude)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 328 of file coordinates_3d\&.hpp\&.
.PP
.nf
328                                                                                                              : coordinates_3d()
329             {
330                 set_position(new_latitude,new_longitude,new_altitude);
331             }
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (const \fBpoint_3d\fP< float > & x_point)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 333 of file coordinates_3d\&.hpp\&.
.PP
.nf
333                                                                     : x(x_point\&.x),y(x_point\&.y),z(x_point\&.z)
334             {}
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (\fBpoint_3d\fP< float > && x_point)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 336 of file coordinates_3d\&.hpp\&.
.PP
.nf
336                                                                : x(std::move(x_point\&.x)),y(std::move(x_point\&.y)),z(std::move(x_point\&.z))
337             {}
.fi
.SS "\fBscifir::coordinates_3d\fP< float >::\fBcoordinates_3d\fP (const string & init_coordinates_3d)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 339 of file coordinates_3d\&.hpp\&.
.PP
.nf
339                                                                        : coordinates_3d()
340             {
341                 initialize_from_string(init_coordinates_3d);
342             }
.fi
.SH "Member Function Documentation"
.PP 
.SS "string \fBscifir::coordinates_3d\fP< float >::display_cartesian () const\fC [inline]\fP"

.PP
Definition at line 502 of file coordinates_3d\&.hpp\&.
.PP
.nf
503             {
504                 ostringstream out;
505                 out << "(" << display_float(x) << "," << display_float(y) << "," << display_float(z) << ")";
506                 return out\&.str();
507             }
.fi
.SS "string \fBscifir::coordinates_3d\fP< float >::display_cylindrical () const\fC [inline]\fP"

.PP
Definition at line 509 of file coordinates_3d\&.hpp\&.
.PP
.nf
510             {
511                 ostringstream out;
512                 out << "(" << display_float(get_p()) << "," << get_theta() << "," << display_float(z) << ")";
513                 return out\&.str();
514             }
.fi
.SS "string \fBscifir::coordinates_3d\fP< float >::display_geographical () const\fC [inline]\fP"

.PP
Definition at line 523 of file coordinates_3d\&.hpp\&.
.PP
.nf
524             {
525                 ostringstream out;
526                 out << "(" << get_latitude() << "," << get_longitude() << "," << display_float(get_altitude()) << ")";
527                 return out\&.str();
528             }
.fi
.SS "string \fBscifir::coordinates_3d\fP< float >::display_spherical () const\fC [inline]\fP"

.PP
Definition at line 516 of file coordinates_3d\&.hpp\&.
.PP
.nf
517             {
518                 ostringstream out;
519                 out << "(" << display_float(get_r()) << "," << get_theta() << "," << get_phi() << ")";
520                 return out\&.str();
521             }
.fi
.SS "float \fBscifir::coordinates_3d\fP< float >::distance_to_origin () const\fC [inline]\fP"

.PP
Definition at line 497 of file coordinates_3d\&.hpp\&.
.PP
.nf
498             {
499                 return float(std::sqrt(std::pow(x,2) + std::pow(y,2) + std::pow(z,2)));
500             }
.fi
.SS "float \fBscifir::coordinates_3d\fP< float >::get_altitude () const\fC [inline]\fP"

.PP
Definition at line 412 of file coordinates_3d\&.hpp\&.
.PP
.nf
413             {
414                 return float();
415             }
.fi
.SS "\fBangle\fP \fBscifir::coordinates_3d\fP< float >::get_latitude () const\fC [inline]\fP"

.PP
Definition at line 402 of file coordinates_3d\&.hpp\&.
.PP
.nf
403             {
404                 return scifir::asin(z/6317);
405             }
.fi
.SS "\fBangle\fP \fBscifir::coordinates_3d\fP< float >::get_longitude () const\fC [inline]\fP"

.PP
Definition at line 407 of file coordinates_3d\&.hpp\&.
.PP
.nf
408             {
409                 return scifir::atan(float(y/x));
410             }
.fi
.SS "float \fBscifir::coordinates_3d\fP< float >::get_p () const\fC [inline]\fP"

.PP
Definition at line 382 of file coordinates_3d\&.hpp\&.
.PP
.nf
383             {
384                 return float(std::sqrt(std::pow(x,2) + std::pow(y,2)));
385             }
.fi
.SS "\fBangle\fP \fBscifir::coordinates_3d\fP< float >::get_phi () const\fC [inline]\fP"

.PP
Definition at line 397 of file coordinates_3d\&.hpp\&.
.PP
.nf
398             {
399                 return angle(scifir::acos_degree(float(z/std::sqrt(std::pow(x,2) + std::pow(y,2) + std::pow(z,2)))));
400             }
.fi
.SS "float \fBscifir::coordinates_3d\fP< float >::get_r () const\fC [inline]\fP"

.PP
Definition at line 392 of file coordinates_3d\&.hpp\&.
.PP
.nf
393             {
394                 return float(std::sqrt(std::pow(x,2) + std::pow(y,2) + std::pow(z,2)));
395             }
.fi
.SS "\fBangle\fP \fBscifir::coordinates_3d\fP< float >::get_theta () const\fC [inline]\fP"

.PP
Definition at line 387 of file coordinates_3d\&.hpp\&.
.PP
.nf
388             {
389                 return scifir::atan(float(y/x));
390             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::initialize_from_string (string init_coordinates_3d)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 535 of file coordinates_3d\&.hpp\&.
.PP
.nf
536             {
537                 vector<string> values;
538                 if (init_coordinates_3d\&.front() == '(')
539                 {
540                     init_coordinates_3d\&.erase(0,1);
541                 }
542                 if (init_coordinates_3d\&.back() == ')')
543                 {
544                     init_coordinates_3d\&.erase(init_coordinates_3d\&.size()-1,1);
545                 }
546                 boost::split(values,init_coordinates_3d,boost::is_any_of(","));
547                 if (values\&.size() == 3)
548                 {
549                     if (is_angle(values[0]))
550                     {
551                         if (is_angle(values[1]))
552                         {
553                             if (!is_angle(values[2]))
554                             {
555                                 set_position(angle(values[0]),angle(values[1]),stof(values[2]));
556                             }
557                         }
558                     }
559                     else
560                     {
561                         if (is_angle(values[1]))
562                         {
563                             if (is_angle(values[2]))
564                             {
565                                 set_position(stof(values[0]),angle(values[1]),angle(values[2]));
566                             }
567                             else
568                             {
569                                 set_position(stof(values[0]),angle(values[1]),stof(values[2]));
570                             }
571                         }
572                         else
573                         {
574                             if (!is_angle(values[2]))
575                             {
576                                 set_position(stof(values[0]),stof(values[1]),stof(values[2]));
577                             }
578                         }
579                     }
580                 }
581             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::move (const displacement_3d & x_displacement)\fC [inline]\fP"

.PP
Definition at line 469 of file coordinates_3d\&.hpp\&.
.PP
.nf
470             {
471                 x += float(x_displacement\&.x_projection());
472                 y += float(x_displacement\&.y_projection());
473                 z += float(x_displacement\&.z_projection());
474             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::move (float new_p, const \fBangle\fP & new_theta, float new_z)\fC [inline]\fP"

.PP
Definition at line 483 of file coordinates_3d\&.hpp\&.
.PP
.nf
484             {
485                 x += new_p * scifir::cos(new_theta);
486                 y += new_p * scifir::sin(new_theta);
487                 z += new_z;
488             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::move (float new_r, const \fBangle\fP & new_theta, const \fBangle\fP & new_phi)\fC [inline]\fP"

.PP
Definition at line 490 of file coordinates_3d\&.hpp\&.
.PP
.nf
491             {
492                 x += new_r * scifir::cos(new_theta) * scifir::sin(new_phi);
493                 y += new_r * scifir::sin(new_theta) * scifir::sin(new_phi);
494                 z += new_r * scifir::cos(new_phi);
495             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::move (float new_x, float new_y, float new_z)\fC [inline]\fP"

.PP
Definition at line 476 of file coordinates_3d\&.hpp\&.
.PP
.nf
477             {
478                 x += new_x;
479                 y += new_y;
480                 z += new_z;
481             }
.fi
.SS "\fBcoordinates_3d\fP<float>& \fBscifir::coordinates_3d\fP< float >::operator= (const \fBcoordinates_3d\fP< float > & x_coordinates)\fC [inline]\fP"

.PP
Definition at line 344 of file coordinates_3d\&.hpp\&.
.PP
.nf
345             {
346                 x = x_coordinates\&.x;
347                 y = x_coordinates\&.y;
348                 z = x_coordinates\&.z;
349                 return *this;
350             }
.fi
.SS "\fBcoordinates_3d\fP<float>& \fBscifir::coordinates_3d\fP< float >::operator= (const \fBpoint_3d\fP< float > & x_point)\fC [inline]\fP"

.PP
Definition at line 360 of file coordinates_3d\&.hpp\&.
.PP
.nf
361             {
362                 x = x_point\&.x;
363                 y = x_point\&.y;
364                 z = x_point\&.z;
365                 return *this;
366             }
.fi
.SS "\fBcoordinates_3d\fP<float>& \fBscifir::coordinates_3d\fP< float >::operator= (const string & init_coordinates_3d)\fC [inline]\fP"

.PP
Definition at line 376 of file coordinates_3d\&.hpp\&.
.PP
.nf
377             {
378                 initialize_from_string(init_coordinates_3d);
379                 return *this;
380             }
.fi
.SS "\fBcoordinates_3d\fP<float>& \fBscifir::coordinates_3d\fP< float >::operator= (\fBcoordinates_3d\fP< float > && x_coordinates)\fC [inline]\fP"

.PP
Definition at line 352 of file coordinates_3d\&.hpp\&.
.PP
.nf
353             {
354                 x = std::move(x_coordinates\&.x);
355                 y = std::move(x_coordinates\&.y);
356                 z = std::move(x_coordinates\&.z);
357                 return *this;
358             }
.fi
.SS "\fBcoordinates_3d\fP<float>& \fBscifir::coordinates_3d\fP< float >::operator= (\fBpoint_3d\fP< float > && x_point)\fC [inline]\fP"

.PP
Definition at line 368 of file coordinates_3d\&.hpp\&.
.PP
.nf
369             {
370                 x = std::move(x_point\&.x);
371                 y = std::move(x_point\&.y);
372                 z = std::move(x_point\&.z);
373                 return *this;
374             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::rotate_in_x (const \fBangle\fP & x_angle)\fC [inline]\fP"

.PP
Definition at line 445 of file coordinates_3d\&.hpp\&.
.PP
.nf
446             {
447                 float y_coord = y;
448                 float z_coord = z;
449                 y = y_coord * scifir::cos(x_angle) - z_coord * scifir::sin(x_angle);
450                 z = y_coord * scifir::sin(x_angle) + z_coord * scifir::cos(x_angle);
451             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::rotate_in_y (const \fBangle\fP & x_angle)\fC [inline]\fP"

.PP
Definition at line 453 of file coordinates_3d\&.hpp\&.
.PP
.nf
454             {
455                 float x_coord = x;
456                 float z_coord = z;
457                 x = x_coord * scifir::cos(x_angle) - z_coord * scifir::sin(x_angle);
458                 z = x_coord * scifir::sin(x_angle) + z_coord * scifir::cos(x_angle);
459             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::rotate_in_z (const \fBangle\fP & x_angle)\fC [inline]\fP"

.PP
Definition at line 461 of file coordinates_3d\&.hpp\&.
.PP
.nf
462             {
463                 float x_coord = x;
464                 float y_coord = y;
465                 x = x_coord * scifir::cos(x_angle) - y_coord * scifir::sin(x_angle);
466                 y = x_coord * scifir::sin(x_angle) + y_coord * scifir::cos(x_angle);
467             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::set_position (const \fBangle\fP & new_latitude, const \fBangle\fP & new_longitude, float new_altitude)\fC [inline]\fP"

.PP
Definition at line 438 of file coordinates_3d\&.hpp\&.
.PP
.nf
439             {
440                 x = new_altitude * scifir::cos(new_latitude) * scifir::cos(new_longitude);
441                 y = new_altitude * scifir::cos(new_latitude) * scifir::sin(new_longitude);
442                 z = new_altitude * scifir::sin(new_latitude);
443             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::set_position (float new_p, const \fBangle\fP & new_theta, float new_z)\fC [inline]\fP"

.PP
Definition at line 424 of file coordinates_3d\&.hpp\&.
.PP
.nf
425             {
426                 x = new_p * scifir::cos(new_theta);
427                 y = new_p * scifir::sin(new_theta);
428                 z = new_z;
429             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::set_position (float new_r, const \fBangle\fP & new_theta, const \fBangle\fP & new_phi)\fC [inline]\fP"

.PP
Definition at line 431 of file coordinates_3d\&.hpp\&.
.PP
.nf
432             {
433                 x = new_r * scifir::cos(new_theta) * scifir::sin(new_phi);
434                 y = new_r * scifir::sin(new_theta) * scifir::sin(new_phi);
435                 z = new_r * scifir::cos(new_phi);
436             }
.fi
.SS "void \fBscifir::coordinates_3d\fP< float >::set_position (float new_x, float new_y, float new_z)\fC [inline]\fP"

.PP
Definition at line 417 of file coordinates_3d\&.hpp\&.
.PP
.nf
418             {
419                 x = new_x;
420                 y = new_y;
421                 z = new_z;
422             }
.fi
.SH "Member Data Documentation"
.PP 
.SS "float \fBscifir::coordinates_3d\fP< float >::x"

.PP
Definition at line 530 of file coordinates_3d\&.hpp\&.
.SS "float \fBscifir::coordinates_3d\fP< float >::y"

.PP
Definition at line 531 of file coordinates_3d\&.hpp\&.
.SS "float \fBscifir::coordinates_3d\fP< float >::z"

.PP
Definition at line 532 of file coordinates_3d\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
