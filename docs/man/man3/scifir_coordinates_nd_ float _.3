.TH "scifir::coordinates_nd< float >" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::coordinates_nd< float >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <coordinates_nd\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBcoordinates_nd\fP ()"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (const \fBcoordinates_nd\fP< float > &x)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (\fBcoordinates_nd\fP< float > &&x)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (const vector< float > &new_values)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (float new_x)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (float new_x, float new_y)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (float new_p, const \fBangle\fP &new_theta)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (float new_x, float new_y, float new_z)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (float new_p, const \fBangle\fP &new_theta, float new_z)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (float new_r, const \fBangle\fP &new_theta, const \fBangle\fP &new_phi)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (const \fBangle\fP &new_latitude, const \fBangle\fP &new_longitude, float new_altitude)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (const \fBpoint_nd\fP< float > &new_point)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (\fBpoint_nd\fP< float > &&new_point)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP (const string &init_coordinates_nd)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP< float > & \fBoperator=\fP (const \fBcoordinates_nd\fP< float > &x_coordinates)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP< float > & \fBoperator=\fP (\fBcoordinates_nd\fP< float > &&x_coordinates)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP< float > & \fBoperator=\fP (const \fBpoint_nd\fP< float > &x_point)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP< float > & \fBoperator=\fP (\fBpoint_nd\fP< float > &&x_point)"
.br
.ti -1c
.RI "\fBcoordinates_nd\fP< float > & \fBoperator=\fP (const string &init_coordinates_nd)"
.br
.ti -1c
.RI "bool \fBis_nd\fP (unsigned int i) const"
.br
.ti -1c
.RI "int \fBget_nd\fP () const"
.br
.ti -1c
.RI "float \fBget_p\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_theta\fP () const"
.br
.ti -1c
.RI "float \fBget_r\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_phi\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_latitude\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_longitude\fP () const"
.br
.ti -1c
.RI "float \fBget_altitude\fP () const"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_x)"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_x, float new_y)"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_p, const \fBangle\fP &new_theta)"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_x, float new_y, float new_z)"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_p, const \fBangle\fP &new_theta, float new_z)"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_r, const \fBangle\fP &new_theta, const \fBangle\fP &new_phi)"
.br
.ti -1c
.RI "void \fBset_position\fP (const \fBangle\fP &new_latitude, const \fBangle\fP &new_longitude, float new_altitude)"
.br
.ti -1c
.RI "void \fBset_position\fP (const vector< float > &new_values)"
.br
.ti -1c
.RI "void \fBrotate_in_2d\fP (const \fBangle\fP &new_theta)"
.br
.ti -1c
.RI "void \fBrotate_in_3d\fP (int axis, const \fBangle\fP &new_theta)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_x)"
.br
.ti -1c
.RI "void \fBmove\fP (const displacement_2d &x_displacement)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_x, float new_y)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_p, const \fBangle\fP &new_theta)"
.br
.ti -1c
.RI "void \fBmove\fP (const displacement_3d &x_displacement)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_x, float new_y, float new_z)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_p, const \fBangle\fP &new_theta, float new_z)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_r, const \fBangle\fP &new_theta, const \fBangle\fP &new_phi)"
.br
.ti -1c
.RI "void \fBmove\fP (const displacement_nd &x_displacement)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_r, const vector< \fBangle\fP > &new_angles)"
.br
.ti -1c
.RI "float \fBdistance_to_origin\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_cartesian_2d\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_polar\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_cartesian_3d\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_cylindrical\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_spherical\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_geographical\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "vector< float > \fBvalues\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialize_from_string\fP (string init_coordinates_nd)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 541 of file coordinates_nd\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP ()\fC [inline]\fP"

.PP
Definition at line 544 of file coordinates_nd\&.hpp\&.
.PP
.nf
544                              : values()
545             {}
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (const \fBcoordinates_nd\fP< float > & x)\fC [inline]\fP"

.PP
Definition at line 547 of file coordinates_nd\&.hpp\&.
.PP
.nf
547                                                            : values(x\&.values)
548             {}
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (\fBcoordinates_nd\fP< float > && x)\fC [inline]\fP"

.PP
Definition at line 550 of file coordinates_nd\&.hpp\&.
.PP
.nf
550                                                       : values(std::move(x\&.values))
551             {}
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (const vector< float > & new_values)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 553 of file coordinates_nd\&.hpp\&.
.PP
.nf
553                                                                      : values(new_values)
554             {}
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (float new_x)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 556 of file coordinates_nd\&.hpp\&.
.PP
.nf
556                                                  : values()
557             {
558                 values\&.push_back(new_x);
559             }
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (float new_x, float new_y)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 561 of file coordinates_nd\&.hpp\&.
.PP
.nf
561                                                              : values()
562             {
563                 values\&.push_back(new_x);
564                 values\&.push_back(new_y);
565             }
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (float new_p, const \fBangle\fP & new_theta)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 567 of file coordinates_nd\&.hpp\&.
.PP
.nf
567                                                                         : values()
568             {
569                 set_position(new_p,new_theta);
570             }
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (float new_x, float new_y, float new_z)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 572 of file coordinates_nd\&.hpp\&.
.PP
.nf
572                                                                          : values()
573             {
574                 values\&.push_back(new_x);
575                 values\&.push_back(new_y);
576                 values\&.push_back(new_z);
577             }
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (float new_p, const \fBangle\fP & new_theta, float new_z)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 579 of file coordinates_nd\&.hpp\&.
.PP
.nf
579                                                                                     : values()
580             {
581                 set_position(new_p,new_theta,new_z);
582             }
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (float new_r, const \fBangle\fP & new_theta, const \fBangle\fP & new_phi)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 584 of file coordinates_nd\&.hpp\&.
.PP
.nf
584                                                                                              : values()
585             {
586                 set_position(new_r,new_theta,new_phi);
587             }
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (const \fBangle\fP & new_latitude, const \fBangle\fP & new_longitude, float new_altitude)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 589 of file coordinates_nd\&.hpp\&.
.PP
.nf
589                                                                                                              : values()
590             {
591                 set_position(new_latitude,new_longitude,new_altitude);
592             }
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (const \fBpoint_nd\fP< float > & new_point)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 594 of file coordinates_nd\&.hpp\&.
.PP
.nf
594                                                                       : values(new_point\&.values)
595             {}
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (\fBpoint_nd\fP< float > && new_point)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 597 of file coordinates_nd\&.hpp\&.
.PP
.nf
597                                                                  : values(std::move(new_point\&.values))
598             {}
.fi
.SS "\fBscifir::coordinates_nd\fP< float >::\fBcoordinates_nd\fP (const string & init_coordinates_nd)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 600 of file coordinates_nd\&.hpp\&.
.PP
.nf
600                                                                        : values()
601             {
602                 initialize_from_string(init_coordinates_nd);
603             }
.fi
.SH "Member Function Documentation"
.PP 
.SS "string \fBscifir::coordinates_nd\fP< float >::display_cartesian_2d () const\fC [inline]\fP"

.PP
Definition at line 907 of file coordinates_nd\&.hpp\&.
.PP
.nf
908             {
909                 if (values\&.size() == 2)
910                 {
911                     ostringstream out;
912                     out << "(" << display_float(values[0]) << "," << display_float(values[1]) << ")";
913                     return out\&.str();
914                 }
915                 else
916                 {
917                     return "[no-2d]";
918                 }
919             }
.fi
.SS "string \fBscifir::coordinates_nd\fP< float >::display_cartesian_3d () const\fC [inline]\fP"

.PP
Definition at line 935 of file coordinates_nd\&.hpp\&.
.PP
.nf
936             {
937                 if (values\&.size() == 3)
938                 {
939                     ostringstream out;
940                     out << "(" << display_float(values[0]) << "," << display_float(values[1]) << "," << display_float(values[2]) << ")";
941                     return out\&.str();
942                 }
943                 else
944                 {
945                     return "[no-3d]";
946                 }
947             }
.fi
.SS "string \fBscifir::coordinates_nd\fP< float >::display_cylindrical () const\fC [inline]\fP"

.PP
Definition at line 949 of file coordinates_nd\&.hpp\&.
.PP
.nf
950             {
951                 if (values\&.size() == 3)
952                 {
953                     ostringstream out;
954                     out << "(" << display_float(get_p()) << "," << get_theta() << "," << display_float(values[2]) << ")";
955                     return out\&.str();
956                 }
957                 else
958                 {
959                     return "[no-3d]";
960                 }
961             }
.fi
.SS "string \fBscifir::coordinates_nd\fP< float >::display_geographical () const\fC [inline]\fP"

.PP
Definition at line 977 of file coordinates_nd\&.hpp\&.
.PP
.nf
978             {
979                 if (values\&.size() == 3)
980                 {                   
981                     ostringstream out;
982                     out << "(" << get_latitude() << "," << get_longitude() << "," << display_float(get_altitude()) << ")";
983                     return out\&.str();
984                 }
985                 else
986                 {
987                     return "[no-3d]";
988                 }
989             }
.fi
.SS "string \fBscifir::coordinates_nd\fP< float >::display_polar () const\fC [inline]\fP"

.PP
Definition at line 921 of file coordinates_nd\&.hpp\&.
.PP
.nf
922             {
923                 if (values\&.size() == 2)
924                 {
925                     ostringstream out;
926                     out << "(" << display_float(get_p()) << "," << get_theta() << ")";
927                     return out\&.str();
928                 }
929                 else
930                 {
931                     return "[no-2d]";
932                 }
933             }
.fi
.SS "string \fBscifir::coordinates_nd\fP< float >::display_spherical () const\fC [inline]\fP"

.PP
Definition at line 963 of file coordinates_nd\&.hpp\&.
.PP
.nf
964             {
965                 if (values\&.size() == 3)
966                 {
967                     ostringstream out;
968                     out << "(" << display_float(get_r()) << "," << get_theta() << "," << get_phi() << ")";
969                     return out\&.str();
970                 }
971                 else
972                 {
973                     return "[no-3d]";
974                 }
975             }
.fi
.SS "float \fBscifir::coordinates_nd\fP< float >::distance_to_origin () const\fC [inline]\fP"

.PP
Definition at line 897 of file coordinates_nd\&.hpp\&.
.PP
.nf
898             {
899                 float x_T = 0;
900                 for (unsigned int i = 0; i < values\&.size(); i++)
901                 {
902                     x_T += float(std::pow(values[i],2));
903                 }
904                 return std::sqrt(x_T);
905             }
.fi
.SS "float \fBscifir::coordinates_nd\fP< float >::get_altitude () const\fC [inline]\fP"

.PP
Definition at line 703 of file coordinates_nd\&.hpp\&.
.PP
.nf
704             {
705                 return 0\&.0f;
706             }
.fi
.SS "\fBangle\fP \fBscifir::coordinates_nd\fP< float >::get_latitude () const\fC [inline]\fP"

.PP
Definition at line 693 of file coordinates_nd\&.hpp\&.
.PP
.nf
694             {
695                 return scifir::asin(float(values[2]/6317));
696             }
.fi
.SS "\fBangle\fP \fBscifir::coordinates_nd\fP< float >::get_longitude () const\fC [inline]\fP"

.PP
Definition at line 698 of file coordinates_nd\&.hpp\&.
.PP
.nf
699             {
700                 return scifir::atan(float(values[1]/values[0]));
701             }
.fi
.SS "int \fBscifir::coordinates_nd\fP< float >::get_nd () const\fC [inline]\fP"

.PP
Definition at line 640 of file coordinates_nd\&.hpp\&.
.PP
.nf
641             {
642                 return int(values\&.size());
643             }
.fi
.SS "float \fBscifir::coordinates_nd\fP< float >::get_p () const\fC [inline]\fP"

.PP
Definition at line 645 of file coordinates_nd\&.hpp\&.
.PP
.nf
646             {
647                 if (get_nd() == 2 or get_nd() == 3)
648                 {
649                     return float(std::sqrt(std::pow(values[0],2) + std::pow(values[1],2)));
650                 }
651                 else
652                 {
653                     return 0\&.0f;
654                 }
655             }
.fi
.SS "\fBangle\fP \fBscifir::coordinates_nd\fP< float >::get_phi () const\fC [inline]\fP"

.PP
Definition at line 681 of file coordinates_nd\&.hpp\&.
.PP
.nf
682             {
683                 if (get_nd() == 3)
684                 {
685                     return angle(scifir::acos_degree(float(values[2]/std::sqrt(std::pow(values[0],2) + std::pow(values[1],2) + std::pow(values[2],2)))));
686                 }
687                 else
688                 {
689                     return angle();
690                 }
691             }
.fi
.SS "float \fBscifir::coordinates_nd\fP< float >::get_r () const\fC [inline]\fP"

.PP
Definition at line 669 of file coordinates_nd\&.hpp\&.
.PP
.nf
670             {
671                 if (get_nd() == 2 or get_nd() == 3)
672                 {
673                     return float(std::sqrt(std::pow(values[0],2) + std::pow(values[1],2) + std::pow(values[2],2)));
674                 }
675                 else
676                 {
677                     return 0\&.0f;
678                 }
679             }
.fi
.SS "\fBangle\fP \fBscifir::coordinates_nd\fP< float >::get_theta () const\fC [inline]\fP"

.PP
Definition at line 657 of file coordinates_nd\&.hpp\&.
.PP
.nf
658             {
659                 if (get_nd() == 2 or get_nd() == 3)
660                 {
661                     return angle(scifir::atan_degree(float(values[1]/values[0])));
662                 }
663                 else
664                 {
665                     return angle();
666                 }
667             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::initialize_from_string (string init_coordinates_nd)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 994 of file coordinates_nd\&.hpp\&.
.PP
.nf
995             {
996                 vector<string> init_values;
997                 if (init_coordinates_nd\&.front() == '(')
998                 {
999                     init_coordinates_nd\&.erase(0,1);
1000                 }
1001                 if (init_coordinates_nd\&.back() == ')')
1002                 {
1003                     init_coordinates_nd\&.erase(init_coordinates_nd\&.size()-1,1);
1004                 }
1005                 boost::split(init_values,init_coordinates_nd,boost::is_any_of(","));
1006                 if (init_values\&.size() == 2)
1007                 {
1008                     if (is_angle(init_values[1]))
1009                     {
1010                         set_position(stof(init_values[0]),angle(init_values[1]));
1011                     }
1012                     else
1013                     {
1014                         set_position(stof(init_values[0]),stof(init_values[1]));
1015                     }
1016                 }
1017                 else if (init_values\&.size() == 3)
1018                 {
1019                     if (is_angle(init_values[0]))
1020                     {
1021                         if (is_angle(init_values[1]))
1022                         {
1023                             if (!is_angle(init_values[2]))
1024                             {
1025                                 set_position(angle(init_values[0]),angle(init_values[1]),stof(init_values[2]));
1026                             }
1027                         }
1028                     }
1029                     else
1030                     {
1031                         if (is_angle(init_values[1]))
1032                         {
1033                             if (is_angle(init_values[2]))
1034                             {
1035                                 set_position(stof(init_values[0]),angle(init_values[1]),angle(init_values[2]));
1036                             }
1037                             else
1038                             {
1039                                 set_position(stof(init_values[0]),angle(init_values[1]),stof(init_values[2]));
1040                             }
1041                         }
1042                         else
1043                         {
1044                             if (!is_angle(init_values[2]))
1045                             {
1046                                 set_position(stof(init_values[0]),stof(init_values[1]),stof(init_values[2]));
1047                             }
1048                         }
1049                     }
1050                 }
1051                 else
1052                 {
1053                     for (const string& x_value : init_values)
1054                     {
1055                         values\&.push_back(stof(x_value));
1056                     }
1057                 }
1058             }
.fi
.SS "bool \fBscifir::coordinates_nd\fP< float >::is_nd (unsigned int i) const\fC [inline]\fP"

.PP
Definition at line 635 of file coordinates_nd\&.hpp\&.
.PP
.nf
636             {
637                 return values\&.size() == i;
638             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (const displacement_2d & x_displacement)\fC [inline]\fP"

.PP
Definition at line 813 of file coordinates_nd\&.hpp\&.
.PP
.nf
814             {
815                 if (values\&.size() == 2)
816                 {
817                     values[0] += float(x_displacement\&.x_projection());
818                     values[1] += float(x_displacement\&.y_projection());
819                 }
820             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (const displacement_3d & x_displacement)\fC [inline]\fP"

.PP
Definition at line 840 of file coordinates_nd\&.hpp\&.
.PP
.nf
841             {
842                 if (values\&.size() == 3)
843                 {
844                     values[0] += float(x_displacement\&.x_projection());
845                     values[1] += float(x_displacement\&.y_projection());
846                     values[2] += float(x_displacement\&.z_projection());
847                 }
848             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (const displacement_nd & x_displacement)\fC [inline]\fP"

.PP
Definition at line 880 of file coordinates_nd\&.hpp\&.
.PP
.nf
881             {
882                 if (x_displacement\&.get_nd() == get_nd())
883                 {
884                     for (int i = 0; i < x_displacement\&.get_nd(); i++)
885                     {
886                         values[i] += float(x_displacement\&.n_projection(i));
887                     }
888                 }
889             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (float new_p, const \fBangle\fP & new_theta)\fC [inline]\fP"

.PP
Definition at line 831 of file coordinates_nd\&.hpp\&.
.PP
.nf
832             {
833                 if (values\&.size() == 2)
834                 {
835                     values[0] += new_p * scifir::cos(new_theta);
836                     values[1] += new_p * scifir::sin(new_theta);
837                 }
838             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (float new_p, const \fBangle\fP & new_theta, float new_z)\fC [inline]\fP"

.PP
Definition at line 860 of file coordinates_nd\&.hpp\&.
.PP
.nf
861             {
862                 if (values\&.size() == 3)
863                 {
864                     values[0] += new_p * scifir::cos(new_theta);
865                     values[1] += new_p * scifir::sin(new_theta);
866                     values[2] += new_z;
867                 }
868             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (float new_r, const \fBangle\fP & new_theta, const \fBangle\fP & new_phi)\fC [inline]\fP"

.PP
Definition at line 870 of file coordinates_nd\&.hpp\&.
.PP
.nf
871             {
872                 if (values\&.size() == 3)
873                 {
874                     values[0] += new_r * scifir::cos(new_theta) * scifir::sin(new_phi);
875                     values[1] += new_r * scifir::sin(new_theta) * scifir::sin(new_phi);
876                     values[2] += new_r * scifir::cos(new_phi);
877                 }
878             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (float new_r, const vector< \fBangle\fP > & new_angles)\fC [inline]\fP"

.PP
Definition at line 891 of file coordinates_nd\&.hpp\&.
.PP
.nf
892             {
893                 displacement_nd x_displacement = displacement_nd(new_r,"m",new_angles);
894                 move(x_displacement);
895             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (float new_x)\fC [inline]\fP"

.PP
Definition at line 805 of file coordinates_nd\&.hpp\&.
.PP
.nf
806             {
807                 if (values\&.size() == 1)
808                 {
809                     values[0] += new_x;
810                 }
811             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (float new_x, float new_y)\fC [inline]\fP"

.PP
Definition at line 822 of file coordinates_nd\&.hpp\&.
.PP
.nf
823             {
824                 if (values\&.size() == 2)
825                 {
826                     values[0] += new_x;
827                     values[1] += new_y;
828                 }
829             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::move (float new_x, float new_y, float new_z)\fC [inline]\fP"

.PP
Definition at line 850 of file coordinates_nd\&.hpp\&.
.PP
.nf
851             {
852                 if (values\&.size() == 3)
853                 {
854                     values[0] += new_x;
855                     values[1] += new_y;
856                     values[2] += new_z;
857                 }
858             }
.fi
.SS "\fBcoordinates_nd\fP<float>& \fBscifir::coordinates_nd\fP< float >::operator= (const \fBcoordinates_nd\fP< float > & x_coordinates)\fC [inline]\fP"

.PP
Definition at line 605 of file coordinates_nd\&.hpp\&.
.PP
.nf
606             {
607                 values = x_coordinates\&.values;
608                 return *this;
609             }
.fi
.SS "\fBcoordinates_nd\fP<float>& \fBscifir::coordinates_nd\fP< float >::operator= (const \fBpoint_nd\fP< float > & x_point)\fC [inline]\fP"

.PP
Definition at line 617 of file coordinates_nd\&.hpp\&.
.PP
.nf
618             {
619                 values = x_point\&.values;
620                 return *this;
621             }
.fi
.SS "\fBcoordinates_nd\fP<float>& \fBscifir::coordinates_nd\fP< float >::operator= (const string & init_coordinates_nd)\fC [inline]\fP"

.PP
Definition at line 629 of file coordinates_nd\&.hpp\&.
.PP
.nf
630             {
631                 initialize_from_string(init_coordinates_nd);
632                 return *this;
633             }
.fi
.SS "\fBcoordinates_nd\fP<float>& \fBscifir::coordinates_nd\fP< float >::operator= (\fBcoordinates_nd\fP< float > && x_coordinates)\fC [inline]\fP"

.PP
Definition at line 611 of file coordinates_nd\&.hpp\&.
.PP
.nf
612             {
613                 values = std::move(x_coordinates\&.values);
614                 return *this;
615             }
.fi
.SS "\fBcoordinates_nd\fP<float>& \fBscifir::coordinates_nd\fP< float >::operator= (\fBpoint_nd\fP< float > && x_point)\fC [inline]\fP"

.PP
Definition at line 623 of file coordinates_nd\&.hpp\&.
.PP
.nf
624             {
625                 values = std::move(x_point\&.values);
626                 return *this;
627             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::rotate_in_2d (const \fBangle\fP & new_theta)\fC [inline]\fP"

.PP
Definition at line 766 of file coordinates_nd\&.hpp\&.
.PP
.nf
767             {
768                 if (get_nd() == 2)
769                 {
770                     float x_coord = values[0];
771                     float y_coord = values[1];
772                     values[0] = x_coord * scifir::cos(new_theta) - y_coord * scifir::sin(new_theta);
773                     values[1] = x_coord * scifir::sin(new_theta) + y_coord * scifir::cos(new_theta);
774                 }
775             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::rotate_in_3d (int axis, const \fBangle\fP & new_theta)\fC [inline]\fP"

.PP
Definition at line 777 of file coordinates_nd\&.hpp\&.
.PP
.nf
778             {
779                 if (get_nd() == 3)
780                 {
781                     if (axis == 1)
782                     {
783                         float y_coord = values[1];
784                         float z_coord = values[2];
785                         values[1] = y_coord * scifir::cos(new_theta) - z_coord * scifir::sin(new_theta);
786                         values[2] = y_coord * scifir::sin(new_theta) + z_coord * scifir::cos(new_theta);
787                     }
788                     else if (axis == 2)
789                     {
790                         float x_coord = values[0];
791                         float z_coord = values[2];
792                         values[0] = x_coord * scifir::cos(new_theta) - z_coord * scifir::sin(new_theta);
793                         values[2] = x_coord * scifir::sin(new_theta) + z_coord * scifir::cos(new_theta);
794                     }
795                     else if (axis == 3)
796                     {
797                         float x_coord = values[0];
798                         float y_coord = values[1];
799                         values[0] = x_coord * scifir::cos(new_theta) - y_coord * scifir::sin(new_theta);
800                         values[1] = x_coord * scifir::sin(new_theta) + y_coord * scifir::cos(new_theta);
801                     }
802                 }
803             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::set_position (const \fBangle\fP & new_latitude, const \fBangle\fP & new_longitude, float new_altitude)\fC [inline]\fP"

.PP
Definition at line 752 of file coordinates_nd\&.hpp\&.
.PP
.nf
753             {
754                 values\&.clear();
755                 values\&.push_back(new_altitude * scifir::cos(new_latitude) * scifir::cos(new_longitude));
756                 values\&.push_back(new_altitude * scifir::cos(new_latitude) * scifir::sin(new_longitude));
757                 values\&.push_back(new_altitude * scifir::sin(new_latitude));
758             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::set_position (const vector< float > & new_values)\fC [inline]\fP"

.PP
Definition at line 760 of file coordinates_nd\&.hpp\&.
.PP
.nf
761             {
762                 values\&.clear();
763                 values = new_values;
764             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::set_position (float new_p, const \fBangle\fP & new_theta)\fC [inline]\fP"

.PP
Definition at line 721 of file coordinates_nd\&.hpp\&.
.PP
.nf
722             {
723                 values\&.clear();
724                 values\&.push_back(new_p * scifir::cos(new_theta));
725                 values\&.push_back(new_p * scifir::sin(new_theta));
726             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::set_position (float new_p, const \fBangle\fP & new_theta, float new_z)\fC [inline]\fP"

.PP
Definition at line 736 of file coordinates_nd\&.hpp\&.
.PP
.nf
737             {
738                 values\&.clear();
739                 values\&.push_back(new_p * scifir::cos(new_theta));
740                 values\&.push_back(new_p * scifir::sin(new_theta));
741                 values\&.push_back(new_z);
742             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::set_position (float new_r, const \fBangle\fP & new_theta, const \fBangle\fP & new_phi)\fC [inline]\fP"

.PP
Definition at line 744 of file coordinates_nd\&.hpp\&.
.PP
.nf
745             {
746                 values\&.clear();
747                 values\&.push_back(new_r * scifir::cos(new_theta) * scifir::sin(new_phi));
748                 values\&.push_back(new_r * scifir::sin(new_theta) * scifir::sin(new_phi));
749                 values\&.push_back(new_r * scifir::cos(new_phi));
750             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::set_position (float new_x)\fC [inline]\fP"

.PP
Definition at line 708 of file coordinates_nd\&.hpp\&.
.PP
.nf
709             {
710                 values\&.clear();
711                 values\&.push_back(new_x);
712             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::set_position (float new_x, float new_y)\fC [inline]\fP"

.PP
Definition at line 714 of file coordinates_nd\&.hpp\&.
.PP
.nf
715             {
716                 values\&.clear();
717                 values\&.push_back(new_x);
718                 values\&.push_back(new_y);
719             }
.fi
.SS "void \fBscifir::coordinates_nd\fP< float >::set_position (float new_x, float new_y, float new_z)\fC [inline]\fP"

.PP
Definition at line 728 of file coordinates_nd\&.hpp\&.
.PP
.nf
729             {
730                 values\&.clear();
731                 values\&.push_back(new_x);
732                 values\&.push_back(new_y);
733                 values\&.push_back(new_z);
734             }
.fi
.SH "Member Data Documentation"
.PP 
.SS "vector<float> \fBscifir::coordinates_nd\fP< float >::values"

.PP
Definition at line 991 of file coordinates_nd\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
