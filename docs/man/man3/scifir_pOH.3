.TH "scifir::pOH" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::pOH
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <pOH\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpOH\fP ()"
.br
.ti -1c
.RI "\fBpOH\fP (const \fBpOH\fP &x)"
.br
.ti -1c
.RI "\fBpOH\fP (\fBpOH\fP &&x)"
.br
.ti -1c
.RI "\fBpOH\fP (float new_value)"
.br
.ti -1c
.RI "\fBpOH\fP (const string &init_pOH)"
.br
.ti -1c
.RI "\fBpOH\fP (const \fBscalar_unit\fP &x)"
.br
.ti -1c
.RI "\fBpOH\fP & \fBoperator=\fP (const \fBpOH\fP &x)"
.br
.ti -1c
.RI "\fBpOH\fP & \fBoperator=\fP (\fBpOH\fP &&x)"
.br
.ti -1c
.RI "\fBpOH\fP & \fBoperator=\fP (float new_value)"
.br
.ti -1c
.RI "\fBpOH\fP & \fBoperator=\fP (const string &init_pOH)"
.br
.ti -1c
.RI "\fBpOH\fP & \fBoperator=\fP (const \fBscalar_unit\fP &x)"
.br
.ti -1c
.RI "\fBoperator float\fP () const"
.br
.ti -1c
.RI "const float & \fBget_value\fP () const"
.br
.ti -1c
.RI "\fBpOH\fP \fBoperator+\fP (const \fBpOH\fP &x) const"
.br
.ti -1c
.RI "\fBpOH\fP \fBoperator\-\fP (const \fBpOH\fP &x) const"
.br
.ti -1c
.RI "void \fBoperator+=\fP (const \fBpOH\fP &x)"
.br
.ti -1c
.RI "void \fBoperator\-=\fP (const \fBpOH\fP &x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBpOH\fP \fBoperator+\fP (T x) const"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBpOH\fP \fBoperator\-\fP (T x) const"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void \fBoperator+=\fP (T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void \fBoperator\-=\fP (T x)"
.br
.ti -1c
.RI "\fBpOH\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBpOH\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBpOH\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBpOH\fP \fBoperator\-\-\fP (int)"
.br
.ti -1c
.RI "molarity \fBget_H\fP () const"
.br
.ti -1c
.RI "molarity \fBget_OH\fP () const"
.br
.ti -1c
.RI "\fBpH\fP \fBget_pH\fP () const"
.br
.ti -1c
.RI "bool \fBis_acidic\fP () const"
.br
.ti -1c
.RI "bool \fBis_basic\fP () const"
.br
.ti -1c
.RI "bool \fBis_neutral\fP () const"
.br
.ti -1c
.RI "string \fBdisplay\fP (int number_of_decimals=2) const"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBnormalize_value\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "float \fBvalue\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 18 of file pOH\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "scifir::pOH::pOH ()"

.PP
Definition at line 16 of file pOH\&.cpp\&.
.PP
.nf
16              : value(0\&.0f)
17     {}
.fi
.SS "scifir::pOH::pOH (const \fBpOH\fP & x)"

.PP
Definition at line 19 of file pOH\&.cpp\&.
.PP
.nf
19                          : value(x\&.get_value())
20     {}
.fi
.SS "scifir::pOH::pOH (\fBpOH\fP && x)"

.PP
Definition at line 22 of file pOH\&.cpp\&.
.PP
.nf
22                     : value(std::move(x\&.get_value()))
23     {}
.fi
.SS "scifir::pOH::pOH (float new_value)\fC [explicit]\fP"

.PP
Definition at line 25 of file pOH\&.cpp\&.
.PP
.nf
25                             : value(new_value)
26     {
27         normalize_value();
28     }
.fi
.SS "scifir::pOH::pOH (const string & init_pOH)\fC [explicit]\fP"

.PP
Definition at line 30 of file pOH\&.cpp\&.
.PP
.nf
30                                    : value()
31     {
32         value = stof(init_pOH);
33         normalize_value();
34     }
.fi
.SS "scifir::pOH::pOH (const \fBscalar_unit\fP & x)\fC [explicit]\fP"

.PP
Definition at line 36 of file pOH\&.cpp\&.
.PP
.nf
37     {
38         if (x\&.has_empty_dimensions())
39         {
40             value = float(x);
41             normalize_value();
42         }
43         else
44         {
45             cerr << "A pOH cannot be initialized with dimensions" << endl;
46             value = 0;
47         }
48     }
.fi
.SH "Member Function Documentation"
.PP 
.SS "string scifir::pOH::display (int number_of_decimals = \fC2\fP) const"

.PP
Definition at line 169 of file pOH\&.cpp\&.
.PP
.nf
170     {
171         ostringstream output;
172         if (value == -0\&.0f)
173         {
174             output << 0;
175         }
176         else
177         {
178             output << display_float(value,number_of_decimals);
179         }
180         return output\&.str();
181     }
.fi
.SS "molarity scifir::pOH::get_H () const"

.PP
Definition at line 138 of file pOH\&.cpp\&.
.PP
.nf
139     {
140         return molarity(std::pow(10\&.0f,-float(14\&.0f - value)),"M");
141     }
.fi
.SS "molarity scifir::pOH::get_OH () const"

.PP
Definition at line 143 of file pOH\&.cpp\&.
.PP
.nf
144     {
145         return molarity(std::pow(10\&.0f,-value),"M");
146     }
.fi
.SS "\fBpH\fP scifir::pOH::get_pH () const"

.PP
Definition at line 148 of file pOH\&.cpp\&.
.PP
.nf
149     {
150         float pH_value = 14\&.0f - value;
151         return pH(pH_value);
152     }
.fi
.SS "const float& scifir::pOH::get_value () const\fC [inline]\fP"

.PP
Definition at line 39 of file pOH\&.hpp\&.
.PP
.nf
40             {
41                 return value;
42             }
.fi
.SS "bool scifir::pOH::is_acidic () const"

.PP
Definition at line 154 of file pOH\&.cpp\&.
.PP
.nf
155     {
156         return (value > 7\&.0f);
157     }
.fi
.SS "bool scifir::pOH::is_basic () const"

.PP
Definition at line 159 of file pOH\&.cpp\&.
.PP
.nf
160     {
161         return (value < 7\&.0f);
162     }
.fi
.SS "bool scifir::pOH::is_neutral () const"

.PP
Definition at line 164 of file pOH\&.cpp\&.
.PP
.nf
165     {
166         return (value == 7\&.0f);
167     }
.fi
.SS "void scifir::pOH::normalize_value ()\fC [private]\fP"

.PP
Definition at line 183 of file pOH\&.cpp\&.
.PP
.nf
184     {
185         if(isfinite(value))
186         {
187             if (value > 14\&.0f)
188             {
189                 value = 0\&.0f;
190             }
191             else if (value < 1\&.0f)
192             {
193                 value = 0\&.0f;
194             }
195         }
196     }
.fi
.SS "scifir::pOH::operator float () const\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 34 of file pOH\&.hpp\&.
.PP
.nf
35             {
36                 return float(value);
37             }
.fi
.SS "\fBpOH\fP scifir::pOH::operator+ (const \fBpOH\fP & x) const"

.PP
Definition at line 90 of file pOH\&.cpp\&.
.PP
.nf
91     {
92         return pOH(value + x\&.get_value());
93     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBpOH\fP scifir::pOH::operator+ (T x) const\fC [inline]\fP"

.PP
Definition at line 50 of file pOH\&.hpp\&.
.PP
.nf
51             {
52                 return pOH(value + x);
53             }
.fi
.SS "\fBpOH\fP & scifir::pOH::operator++ ()"

.PP
Definition at line 112 of file pOH\&.cpp\&.
.PP
.nf
113     {
114         value++;
115         return *this;
116     }
.fi
.SS "\fBpOH\fP scifir::pOH::operator++ (int)"

.PP
Definition at line 118 of file pOH\&.cpp\&.
.PP
.nf
119     {
120         pOH tmp = pOH(*this);
121         operator++();
122         return tmp;
123     }
.fi
.SS "void scifir::pOH::operator+= (const \fBpOH\fP & x)"

.PP
Definition at line 100 of file pOH\&.cpp\&.
.PP
.nf
101     {
102         value += x\&.get_value();
103         normalize_value();
104     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void scifir::pOH::operator+= (T x)\fC [inline]\fP"

.PP
Definition at line 62 of file pOH\&.hpp\&.
.PP
.nf
63             {
64                 value += x;
65                 normalize_value();
66             }
.fi
.SS "\fBpOH\fP scifir::pOH::operator\- (const \fBpOH\fP & x) const"

.PP
Definition at line 95 of file pOH\&.cpp\&.
.PP
.nf
96     {
97         return pOH(value - x\&.get_value());
98     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBpOH\fP scifir::pOH::operator\- (T x) const\fC [inline]\fP"

.PP
Definition at line 56 of file pOH\&.hpp\&.
.PP
.nf
57             {
58                 return pOH(value - x);
59             }
.fi
.SS "\fBpOH\fP & scifir::pOH::operator\-\- ()"

.PP
Definition at line 125 of file pOH\&.cpp\&.
.PP
.nf
126     {
127         value--;
128         return *this;
129     }
.fi
.SS "\fBpOH\fP scifir::pOH::operator\-\- (int)"

.PP
Definition at line 131 of file pOH\&.cpp\&.
.PP
.nf
132     {
133         pOH tmp = pOH(*this);
134         operator\-\-();
135         return tmp;
136     }
.fi
.SS "void scifir::pOH::operator\-= (const \fBpOH\fP & x)"

.PP
Definition at line 106 of file pOH\&.cpp\&.
.PP
.nf
107     {
108         value -= x\&.get_value();
109         normalize_value();
110     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void scifir::pOH::operator\-= (T x)\fC [inline]\fP"

.PP
Definition at line 69 of file pOH\&.hpp\&.
.PP
.nf
70             {
71                 value -= x;
72                 normalize_value();
73             }
.fi
.SS "\fBpOH\fP & scifir::pOH::operator= (const \fBpOH\fP & x)"

.PP
Definition at line 50 of file pOH\&.cpp\&.
.PP
.nf
51     {
52         value = x\&.get_value();
53         return *this;
54     }
.fi
.SS "\fBpOH\fP & scifir::pOH::operator= (const \fBscalar_unit\fP & x)"

.PP
Definition at line 76 of file pOH\&.cpp\&.
.PP
.nf
77     {
78         if (x\&.has_empty_dimensions())
79         {
80             value = x\&.get_value();
81             normalize_value();
82         }
83         else
84         {
85             cerr << "A pOH cannot be initialized with dimensions" << endl;
86         }
87         return *this;
88     }
.fi
.SS "\fBpOH\fP & scifir::pOH::operator= (const string & init_pOH)"

.PP
Definition at line 69 of file pOH\&.cpp\&.
.PP
.nf
70     {
71         value = stof(init_pOH);
72         normalize_value();
73         return *this;
74     }
.fi
.SS "\fBpOH\fP & scifir::pOH::operator= (float new_value)"

.PP
Definition at line 62 of file pOH\&.cpp\&.
.PP
.nf
63     {
64         value = new_value;
65         normalize_value();
66         return *this;
67     }
.fi
.SS "\fBpOH\fP & scifir::pOH::operator= (\fBpOH\fP && x)"

.PP
Definition at line 56 of file pOH\&.cpp\&.
.PP
.nf
57     {
58         value = std::move(x\&.get_value());
59         return *this;
60     }
.fi
.SH "Member Data Documentation"
.PP 
.SS "float scifir::pOH::value\fC [private]\fP"

.PP
Definition at line 91 of file pOH\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
