.TH "scifir::percentage" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::percentage
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <percentage\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpercentage\fP ()"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBconst\fP \fBpercentage\fP &x)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBpercentage\fP &&x)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBfloat\fP \fBnew_value\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBdouble\fP \fBnew_value\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBlong\fP \fBdouble\fP \fBnew_value\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBint\fP \fBnew_value\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBfloat\fP \fBnew_value\fP, \fBconst\fP \fBstring\fP &\fBinit_dimensions\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBdouble\fP \fBnew_value\fP, \fBconst\fP \fBstring\fP &\fBinit_dimensions\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBlong\fP \fBdouble\fP \fBnew_value\fP, \fBconst\fP \fBstring\fP &\fBinit_dimensions\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBint\fP \fBnew_value\fP, \fBconst\fP \fBstring\fP &\fBinit_dimensions\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBconst\fP \fBstring\fP &\fBinit_percentage\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBconst\fP \fBscalar_unit\fP &x)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBconst\fP \fBpercentage\fP &x)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBpercentage\fP &&x)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBfloat\fP \fBnew_value\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBdouble\fP \fBnew_value\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBlong\fP \fBdouble\fP \fBnew_value\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBint\fP \fBnew_value\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBconst\fP \fBstring\fP &\fBinit_percentage\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBconst\fP \fBscalar_unit\fP &x)"
.br
.ti -1c
.RI "\fBoperator float\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBfloat\fP & \fBget_value\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator+\fP (\fBconst\fP \fBpercentage\fP &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator\-\fP (\fBconst\fP \fBpercentage\fP &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator*\fP (\fBconst\fP \fBpercentage\fP &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator/\fP (\fBconst\fP \fBpercentage\fP &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator+=\fP (\fBconst\fP \fBpercentage\fP &x)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator\-=\fP (\fBconst\fP \fBpercentage\fP &x)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator*=\fP (\fBconst\fP \fBpercentage\fP &x)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator/=\fP (\fBconst\fP \fBpercentage\fP &x)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator=\fP (T x)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP \fBoperator+\fP (T x) \fBconst\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP \fBoperator\-\fP (T x) \fBconst\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBfloat\fP \fBoperator*\fP (T x) \fBconst\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBfloat\fP \fBoperator/\fP (T x) \fBconst\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator+=\fP (T x)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator\-=\fP (T x)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator*=\fP (T x)"
.br
.ti -1c
.RI "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP \fBoperator/=\fP (T x)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator++\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator\-\-\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBoperator*\fP (\fBconst\fP \fBscalar_unit\fP &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBoperator/\fP (\fBconst\fP \fBscalar_unit\fP &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBget_factor\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBget_ppm\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay_percentage\fP (\fBint\fP \fBnumber_of_decimals\fP=2) \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay_ppm\fP () \fBconst\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBinitialize_from_string\fP (\fBconst\fP \fBstring\fP &\fBinit_percentage\fP)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBfloat\fP \fBvalue\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB17\fP of file \fBpercentage\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "scifir::percentage::percentage ()"

.PP
Definition at line \fB16\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
16                            : value(0)
17     {}
.fi

.SS "scifir::percentage::percentage (\fBconst\fP \fBpercentage\fP & x)"

.PP
Definition at line \fB19\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
19                                               : value(x\&.get_value())
20     {}
.fi

.SS "scifir::percentage::percentage (\fBpercentage\fP && x)"

.PP
Definition at line \fB22\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
22                                          : value(std::move(x\&.get_value()))
23     {}
.fi

.SS "scifir::percentage::percentage (\fBfloat\fP new_value)\fC [explicit]\fP"

.PP
Definition at line \fB25\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
25                                           : value(new_value)
26     {}
.fi

.SS "scifir::percentage::percentage (\fBdouble\fP new_value)\fC [explicit]\fP"

.PP
Definition at line \fB28\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
28                                            : value(float(new_value))
29     {}
.fi

.SS "scifir::percentage::percentage (\fBlong\fP \fBdouble\fP new_value)\fC [explicit]\fP"

.PP
Definition at line \fB31\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
31                                                 : value(float(new_value))
32     {}
.fi

.SS "scifir::percentage::percentage (\fBint\fP new_value)\fC [explicit]\fP"

.PP
Definition at line \fB34\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
34                                         : value(float(new_value))
35     {}
.fi

.SS "scifir::percentage::percentage (\fBfloat\fP new_value, \fBconst\fP \fBstring\fP & init_dimensions)\fC [explicit]\fP"

.PP
Definition at line \fB37\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
38     {
39         if (init_dimensions == "%")
40         {
41             value = new_value;
42         }
43         else if (init_dimensions == "ppm")
44         {
45             value = new_value / 10000\&.0f;
46         }
47         else
48         {
49             value = 0\&.0f;
50         }
51         /*else if (init_dimensions == "ppb")
52         {
53             value = new_value / 10000000\&.0f;
54         }
55         else if (init_dimensions == "ppt")
56         {
57             value = new_value / 10000000000\&.0f;
58         }
59         else if (init_dimensions == "ppq")
60         {
61             value = new_value / 10000000000000\&.0f;
62         }*/
63     }
.fi

.SS "scifir::percentage::percentage (\fBdouble\fP new_value, \fBconst\fP \fBstring\fP & init_dimensions)\fC [explicit]\fP"

.PP
Definition at line \fB65\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
66     {
67         if (init_dimensions == "%")
68         {
69             value = float(new_value);
70         }
71         else if (init_dimensions == "ppm")
72         {
73             value = float(new_value) / 10000\&.0f;
74         }
75         else
76         {
77             value = 0\&.0f;
78         }
79         /*else if (init_dimensions == "ppb")
80         {
81             value = float(new_value) / 10000000\&.0f;
82         }
83         else if (init_dimensions == "ppt")
84         {
85             value = float(new_value) / 10000000000\&.0f;
86         }
87         else if (init_dimensions == "ppq")
88         {
89             value = float(new_value) / 10000000000000\&.0f;
90         }*/
91     }
.fi

.SS "scifir::percentage::percentage (\fBlong\fP \fBdouble\fP new_value, \fBconst\fP \fBstring\fP & init_dimensions)\fC [explicit]\fP"

.PP
Definition at line \fB93\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
94     {
95         if (init_dimensions == "%")
96         {
97             value = float(new_value);
98         }
99         else if (init_dimensions == "ppm")
100         {
101             value = float(new_value) / 10000\&.0f;
102         }
103         else
104         {
105             value = 0\&.0f;
106         }
107         /*else if (init_dimensions == "ppb")
108         {
109             value = float(new_value) / 10000000\&.0f;
110         }
111         else if (init_dimensions == "ppt")
112         {
113             value = float(new_value) / 10000000000\&.0f;
114         }
115         else if (init_dimensions == "ppq")
116         {
117             value = float(new_value) / 10000000000000\&.0f;
118         }*/
119     }
.fi

.SS "scifir::percentage::percentage (\fBint\fP new_value, \fBconst\fP \fBstring\fP & init_dimensions)\fC [explicit]\fP"

.PP
Definition at line \fB121\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
122     {
123         if (init_dimensions == "%")
124         {
125             value = float(new_value);
126         }
127         else if (init_dimensions == "ppm")
128         {
129             value = float(new_value) / 10000\&.0f;
130         }
131         else
132         {
133             value = 0\&.0f;
134         }
135         /*else if (init_dimensions == "ppb")
136         {
137             value = float(new_value) / 10000000\&.0f;
138         }
139         else if (init_dimensions == "ppt")
140         {
141             value = float(new_value) / 10000000000\&.0f;
142         }
143         else if (init_dimensions == "ppq")
144         {
145             value = float(new_value) / 10000000000000\&.0f;
146         }*/
147     }
.fi

.SS "scifir::percentage::percentage (\fBconst\fP \fBstring\fP & init_percentage)\fC [explicit]\fP"

.PP
Definition at line \fB149\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
149                                                         : value()
150     {
151         initialize_from_string(init_percentage);
152     }
.fi

.SS "scifir::percentage::percentage (\fBconst\fP \fBscalar_unit\fP & x)\fC [explicit]\fP"

.PP
Definition at line \fB154\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
155     {
156         if (x\&.has_empty_dimensions())
157         {
158             value = float(x);
159         }
160         else
161         {
162             cerr << "A percentage cannot be initialized with dimensions" << endl;
163             value = 0\&.0f;
164         }
165     }
.fi

.SH "Member Function Documentation"
.PP 
.SS "\fBstring\fP scifir::percentage::display_percentage (\fBint\fP number_of_decimals = \fC2\fP) const"

.PP
Definition at line \fB324\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
325     {
326         ostringstream out;
327         out << display_float(value,number_of_decimals) << "%";
328         return out\&.str();
329     }
.fi

.SS "\fBstring\fP scifir::percentage::display_ppm () const"

.PP
Definition at line \fB331\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
332     {
333         ostringstream out;
334         out << display_float(get_ppm()) << " ppm";
335         return out\&.str();
336     }
.fi

.SS "\fBfloat\fP scifir::percentage::get_factor () const"

.PP
Definition at line \fB299\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
300     {
301         return value / 100;
302     }
.fi

.SS "\fBfloat\fP scifir::percentage::get_ppm () const"

.PP
Definition at line \fB304\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
305     {
306         return value * 10000\&.0f;
307     }
.fi

.SS "\fBconst\fP \fBfloat\fP & scifir::percentage::get_value () const\fC [inline]\fP"

.PP
Definition at line \fB48\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
49             {
50                 return value;
51             }
.fi

.SS "\fBvoid\fP scifir::percentage::initialize_from_string (\fBconst\fP \fBstring\fP & init_percentage)\fC [private]\fP"

.PP
Definition at line \fB359\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
360     {
361         if (init_percentage[init_percentage\&.length() \- 1] == '%')
362         {
363             value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 1));
364         }
365         else if (init_percentage\&.find(" ") != string::npos)
366         {
367             string percentage_unit = init_percentage\&.substr(init_percentage\&.length() \- 4,4);
368             if (percentage_unit == " ppm")
369             {
370                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 4)) / 10000\&.0f;
371             }
372             else
373             {
374                 value = 0\&.0f;
375             }
376             /*else if (percentage_unit == " ppb")
377             {
378                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 4)) / 10000000\&.0f;
379             }
380             else if (percentage_unit == " ppt")
381             {
382                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 4)) / 10000000000\&.0f;
383             }
384             else if (percentage_unit == " ppq")
385             {
386                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 4)) / 10000000000000\&.0f;
387             }*/
388         }
389         else if (init_percentage\&.length() > 3)
390         {
391             string percentage_unit = init_percentage\&.substr(init_percentage\&.length() \- 3,3);
392             if (percentage_unit == "ppm")
393             {
394                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 3)) / 10000\&.0f;
395             }
396             /*else if (percentage_unit == "ppb")
397             {
398                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 3)) / 10000000\&.0f;
399             }
400             else if (percentage_unit == "ppt")
401             {
402                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 3)) / 10000000000\&.0f;
403             }
404             else if (percentage_unit == "ppq")
405             {
406                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() \- 3)) / 10000000000000\&.0f;
407             }*/
408             else
409             {
410                 value = 0\&.0f;
411             }
412         }
413         else
414         {
415             value = 0\&.0f;
416         }
417     }
.fi

.SS "scifir::percentage::operator \fBfloat\fP () const\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line \fB43\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
44             {
45                 return float(value);
46             }
.fi

.SS "\fBpercentage\fP scifir::percentage::operator* (\fBconst\fP \fBpercentage\fP & x) const"

.PP
Definition at line \fB233\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
234     {
235         return percentage(value * x\&.get_value() / 100);
236     }
.fi

.SS "\fBscalar_unit\fP scifir::percentage::operator* (\fBconst\fP \fBscalar_unit\fP & x) const"

.PP
Definition at line \fB289\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
290     {
291         return get_factor() * x;
292     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBfloat\fP scifir::percentage::operator* (T x) const\fC [inline]\fP"

.PP
Definition at line \fB81\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
82             {
83                 return float(value * x / 100);
84             }
.fi

.SS "\fBvoid\fP scifir::percentage::operator*= (\fBconst\fP \fBpercentage\fP & x)"

.PP
Definition at line \fB253\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
254     {
255         value *= (x\&.get_value() / 100);
256     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP scifir::percentage::operator*= (T x)\fC [inline]\fP"

.PP
Definition at line \fB105\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
106             {
107                 value *= x;
108             }
.fi

.SS "\fBpercentage\fP scifir::percentage::operator+ (\fBconst\fP \fBpercentage\fP & x) const"

.PP
Definition at line \fB223\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
224     {
225         return percentage(value + x\&.get_value());
226     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP scifir::percentage::operator+ (T x) const\fC [inline]\fP"

.PP
Definition at line \fB69\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
70             {
71                 return percentage(value + x);
72             }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator++ ()"

.PP
Definition at line \fB263\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
264     {
265         value++;
266         return *this;
267     }
.fi

.SS "\fBpercentage\fP scifir::percentage::operator++ (\fBint\fP)"

.PP
Definition at line \fB269\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
270     {
271         percentage tmp = percentage(*this);
272         operator++();
273         return tmp;
274     }
.fi

.SS "\fBvoid\fP scifir::percentage::operator+= (\fBconst\fP \fBpercentage\fP & x)"

.PP
Definition at line \fB243\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
244     {
245         value += x\&.get_value();
246     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP scifir::percentage::operator+= (T x)\fC [inline]\fP"

.PP
Definition at line \fB93\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
94             {
95                 value += x;
96             }
.fi

.SS "\fBpercentage\fP scifir::percentage::operator\- (\fBconst\fP \fBpercentage\fP & x) const"

.PP
Definition at line \fB228\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
229     {
230         return percentage(value \- x\&.get_value());
231     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP scifir::percentage::operator\- (T x) const\fC [inline]\fP"

.PP
Definition at line \fB75\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
76             {
77                 return percentage(value \- x);
78             }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator\-\- ()"

.PP
Definition at line \fB276\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
277     {
278         value\-\-;
279         return *this;
280     }
.fi

.SS "\fBpercentage\fP scifir::percentage::operator\-\- (\fBint\fP)"

.PP
Definition at line \fB282\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
283     {
284         percentage tmp = percentage(*this);
285         operator\-\-();
286         return tmp;
287     }
.fi

.SS "\fBvoid\fP scifir::percentage::operator\-= (\fBconst\fP \fBpercentage\fP & x)"

.PP
Definition at line \fB248\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
249     {
250         value \-= x\&.get_value();
251     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP scifir::percentage::operator\-= (T x)\fC [inline]\fP"

.PP
Definition at line \fB99\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
100             {
101                 value \-= x;
102             }
.fi

.SS "\fBpercentage\fP scifir::percentage::operator/ (\fBconst\fP \fBpercentage\fP & x) const"

.PP
Definition at line \fB238\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
239     {
240         return percentage(100 * value / x\&.get_value());
241     }
.fi

.SS "\fBscalar_unit\fP scifir::percentage::operator/ (\fBconst\fP \fBscalar_unit\fP & x) const"

.PP
Definition at line \fB294\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
295     {
296         return get_factor() / x;
297     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBfloat\fP scifir::percentage::operator/ (T x) const\fC [inline]\fP"

.PP
Definition at line \fB87\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
88             {
89                 return float(value / (100 * x));
90             }
.fi

.SS "\fBvoid\fP scifir::percentage::operator/= (\fBconst\fP \fBpercentage\fP & x)"

.PP
Definition at line \fB258\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
259     {
260         value *= 100 / x\&.get_value();
261     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP scifir::percentage::operator/= (T x)\fC [inline]\fP"

.PP
Definition at line \fB111\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
112             {
113                 value /= x;
114             }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBconst\fP \fBpercentage\fP & x)"

.PP
Definition at line \fB167\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
168     {
169         value = x\&.get_value();
170         return *this;
171     }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBconst\fP \fBscalar_unit\fP & x)"

.PP
Definition at line \fB209\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
210     {
211         if (x\&.has_empty_dimensions())
212         {
213             value = x\&.get_value();
214         }
215         else
216         {
217             cerr << "A percentage cannot be initialized with dimensions" << endl;
218             value = 0\&.0f;
219         }
220         return *this;
221     }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBconst\fP \fBstring\fP & init_percentage)"

.PP
Definition at line \fB203\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
204     {
205         initialize_from_string(init_percentage);
206         return *this;
207     }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBdouble\fP new_value)"

.PP
Definition at line \fB185\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
186     {
187         value = float(new_value);
188         return *this;
189     }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBfloat\fP new_value)"

.PP
Definition at line \fB179\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
180     {
181         value = new_value;
182         return *this;
183     }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBint\fP new_value)"

.PP
Definition at line \fB197\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
198     {
199         value = float(new_value);
200         return *this;
201     }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBlong\fP \fBdouble\fP new_value)"

.PP
Definition at line \fB191\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
192     {
193         value = float(new_value);
194         return *this;
195     }
.fi

.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBpercentage\fP && x)"

.PP
Definition at line \fB173\fP of file \fBpercentage\&.cpp\fP\&..PP
.nf
174     {
175         value = std::move(x\&.get_value());
176         return *this;
177     }
.fi

.SS "template<\fBtypename\fP T , \fBtypename\fP  = typename enable_if<scifir::is_number<T>::value>::type> \fBvoid\fP scifir::percentage::operator= (T x)\fC [inline]\fP"

.PP
Definition at line \fB63\fP of file \fBpercentage\&.hpp\fP\&..PP
.nf
64             {
65                 value = x;
66             }
.fi

.SH "Member Data Documentation"
.PP 
.SS "\fBfloat\fP scifir::percentage::value\fC [private]\fP"

.PP
Definition at line \fB138\fP of file \fBpercentage\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
