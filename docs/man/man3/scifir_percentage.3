.TH "scifir::percentage" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::percentage
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <percentage\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBtype\fP : int8_t { \fBPERCENTAGE\fP, \fBPARTS_PER_MILLION\fP, \fBPARTS_PER_BILLION\fP, \fBPARTS_PER_TRILLION\fP, \fBPARTS_PER_QUATRILLION\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpercentage\fP ()"
.br
.ti -1c
.RI "\fBpercentage\fP (const \fBpercentage\fP &x)"
.br
.ti -1c
.RI "\fBpercentage\fP (\fBpercentage\fP &&x)"
.br
.ti -1c
.RI "\fBpercentage\fP (float new_value, \fBpercentage::type\fP init_type=\fBpercentage::PERCENTAGE\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (double new_value, \fBpercentage::type\fP init_type=\fBpercentage::PERCENTAGE\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (long double new_value, \fBpercentage::type\fP init_type=\fBpercentage::PERCENTAGE\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (int new_value, \fBpercentage::type\fP init_type=\fBpercentage::PERCENTAGE\fP)"
.br
.ti -1c
.RI "\fBpercentage\fP (float new_value, const string &init_dimensions)"
.br
.ti -1c
.RI "\fBpercentage\fP (double new_value, const string &init_dimensions)"
.br
.ti -1c
.RI "\fBpercentage\fP (long double new_value, const string &init_dimensions)"
.br
.ti -1c
.RI "\fBpercentage\fP (int new_value, const string &init_dimensions)"
.br
.ti -1c
.RI "\fBpercentage\fP (const string &init_percentage)"
.br
.ti -1c
.RI "\fBpercentage\fP (const \fBscalar_unit\fP &x)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (const \fBpercentage\fP &x)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (\fBpercentage\fP &&x)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (float new_value)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (double new_value)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (long double new_value)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (int new_value)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (const string &init_percentage)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator=\fP (const \fBscalar_unit\fP &x)"
.br
.ti -1c
.RI "\fBoperator float\fP () const"
.br
.ti -1c
.RI "const float & \fBget_value\fP () const"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator+\fP (const \fBpercentage\fP &x) const"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator\-\fP (const \fBpercentage\fP &x) const"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator*\fP (const \fBpercentage\fP &x) const"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator/\fP (const \fBpercentage\fP &x) const"
.br
.ti -1c
.RI "void \fBoperator+=\fP (const \fBpercentage\fP &x)"
.br
.ti -1c
.RI "void \fBoperator\-=\fP (const \fBpercentage\fP &x)"
.br
.ti -1c
.RI "void \fBoperator*=\fP (const \fBpercentage\fP &x)"
.br
.ti -1c
.RI "void \fBoperator/=\fP (const \fBpercentage\fP &x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void \fBoperator=\fP (T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP \fBoperator+\fP (T x) const"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP \fBoperator\-\fP (T x) const"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> float \fBoperator*\fP (T x) const"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> float \fBoperator/\fP (T x) const"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void \fBoperator+=\fP (T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void \fBoperator\-=\fP (T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void \fBoperator*=\fP (T x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void \fBoperator/=\fP (T x)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBpercentage\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBpercentage\fP \fBoperator\-\-\fP (int)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBoperator*\fP (const \fBscalar_unit\fP &x) const"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBoperator/\fP (const \fBscalar_unit\fP &x) const"
.br
.ti -1c
.RI "float \fBget_factor\fP () const"
.br
.ti -1c
.RI "float \fBget_ppm\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_percentage\fP (int number_of_decimals=2) const"
.br
.ti -1c
.RI "string \fBdisplay_ppm\fP () const"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialize_from_string\fP (const string &init_percentage)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "float \fBvalue\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 17 of file percentage\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBscifir::percentage::type\fP : int8_t"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPERCENTAGE \fP\fP
.TP
\fB\fIPARTS_PER_MILLION \fP\fP
.TP
\fB\fIPARTS_PER_BILLION \fP\fP
.TP
\fB\fIPARTS_PER_TRILLION \fP\fP
.TP
\fB\fIPARTS_PER_QUATRILLION \fP\fP
.PP
Definition at line 20 of file percentage\&.hpp\&.
.PP
.nf
20 : int8_t {PERCENTAGE,PARTS_PER_MILLION,PARTS_PER_BILLION,PARTS_PER_TRILLION,PARTS_PER_QUATRILLION};
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "scifir::percentage::percentage ()"

.PP
Definition at line 16 of file percentage\&.cpp\&.
.PP
.nf
16                            : value(0)
17     {}
.fi
.SS "scifir::percentage::percentage (const \fBpercentage\fP & x)"

.PP
Definition at line 19 of file percentage\&.cpp\&.
.PP
.nf
19                                               : value(x\&.get_value())
20     {}
.fi
.SS "scifir::percentage::percentage (\fBpercentage\fP && x)"

.PP
Definition at line 22 of file percentage\&.cpp\&.
.PP
.nf
22                                          : value(std::move(x\&.get_value()))
23     {}
.fi
.SS "scifir::percentage::percentage (float new_value, \fBpercentage::type\fP init_type = \fC\fBpercentage::PERCENTAGE\fP\fP)\fC [explicit]\fP"

.PP
Definition at line 25 of file percentage\&.cpp\&.
.PP
.nf
25                                                                    : value()
26     {
27         if (init_type == percentage::PERCENTAGE)
28         {
29             value = new_value;
30         }
31         else if (init_type == percentage::PARTS_PER_MILLION)
32         {
33             value = new_value / 10000\&.0f;
34         }
35         else
36         {
37             value = 0\&.0f;
38         }
39     }
.fi
.SS "scifir::percentage::percentage (double new_value, \fBpercentage::type\fP init_type = \fC\fBpercentage::PERCENTAGE\fP\fP)\fC [explicit]\fP"

.PP
Definition at line 41 of file percentage\&.cpp\&.
.PP
.nf
41                                                                     : value(float(new_value))
42     {
43         if (init_type == percentage::PERCENTAGE)
44         {
45             value = float(new_value);
46         }
47         else if (init_type == percentage::PARTS_PER_MILLION)
48         {
49             value = float(new_value) / 10000\&.0f;
50         }
51         else
52         {
53             value = 0\&.0f;
54         }
55     }
.fi
.SS "scifir::percentage::percentage (long double new_value, \fBpercentage::type\fP init_type = \fC\fBpercentage::PERCENTAGE\fP\fP)\fC [explicit]\fP"

.PP
Definition at line 57 of file percentage\&.cpp\&.
.PP
.nf
57                                                                          : value(float(new_value))
58     {
59         if (init_type == percentage::PERCENTAGE)
60         {
61             value = float(new_value);
62         }
63         else if (init_type == percentage::PARTS_PER_MILLION)
64         {
65             value = float(new_value) / 10000\&.0f;
66         }
67         else
68         {
69             value = 0\&.0f;
70         }
71     }
.fi
.SS "scifir::percentage::percentage (int new_value, \fBpercentage::type\fP init_type = \fC\fBpercentage::PERCENTAGE\fP\fP)\fC [explicit]\fP"

.PP
Definition at line 73 of file percentage\&.cpp\&.
.PP
.nf
73                                                                  : value(float(new_value))
74     {
75         if (init_type == percentage::PERCENTAGE)
76         {
77             value = float(new_value);
78         }
79         else if (init_type == percentage::PARTS_PER_MILLION)
80         {
81             value = float(new_value) / 10000\&.0f;
82         }
83         else
84         {
85             value = 0\&.0f;
86         }
87     }
.fi
.SS "scifir::percentage::percentage (float new_value, const string & init_dimensions)\fC [explicit]\fP"

.PP
Definition at line 89 of file percentage\&.cpp\&.
.PP
.nf
90     {
91         if (init_dimensions == "%")
92         {
93             value = new_value;
94         }
95         else if (init_dimensions == "ppm")
96         {
97             value = new_value / 10000\&.0f;
98         }
99         else
100         {
101             value = 0\&.0f;
102         }
103         /*else if (init_dimensions == "ppb")
104         {
105             value = new_value / 10000000\&.0f;
106         }
107         else if (init_dimensions == "ppt")
108         {
109             value = new_value / 10000000000\&.0f;
110         }
111         else if (init_dimensions == "ppq")
112         {
113             value = new_value / 10000000000000\&.0f;
114         }*/
115     }
.fi
.SS "scifir::percentage::percentage (double new_value, const string & init_dimensions)\fC [explicit]\fP"

.PP
Definition at line 117 of file percentage\&.cpp\&.
.PP
.nf
118     {
119         if (init_dimensions == "%")
120         {
121             value = float(new_value);
122         }
123         else if (init_dimensions == "ppm")
124         {
125             value = float(new_value) / 10000\&.0f;
126         }
127         else
128         {
129             value = 0\&.0f;
130         }
131         /*else if (init_dimensions == "ppb")
132         {
133             value = float(new_value) / 10000000\&.0f;
134         }
135         else if (init_dimensions == "ppt")
136         {
137             value = float(new_value) / 10000000000\&.0f;
138         }
139         else if (init_dimensions == "ppq")
140         {
141             value = float(new_value) / 10000000000000\&.0f;
142         }*/
143     }
.fi
.SS "scifir::percentage::percentage (long double new_value, const string & init_dimensions)\fC [explicit]\fP"

.PP
Definition at line 145 of file percentage\&.cpp\&.
.PP
.nf
146     {
147         if (init_dimensions == "%")
148         {
149             value = float(new_value);
150         }
151         else if (init_dimensions == "ppm")
152         {
153             value = float(new_value) / 10000\&.0f;
154         }
155         else
156         {
157             value = 0\&.0f;
158         }
159         /*else if (init_dimensions == "ppb")
160         {
161             value = float(new_value) / 10000000\&.0f;
162         }
163         else if (init_dimensions == "ppt")
164         {
165             value = float(new_value) / 10000000000\&.0f;
166         }
167         else if (init_dimensions == "ppq")
168         {
169             value = float(new_value) / 10000000000000\&.0f;
170         }*/
171     }
.fi
.SS "scifir::percentage::percentage (int new_value, const string & init_dimensions)\fC [explicit]\fP"

.PP
Definition at line 173 of file percentage\&.cpp\&.
.PP
.nf
174     {
175         if (init_dimensions == "%")
176         {
177             value = float(new_value);
178         }
179         else if (init_dimensions == "ppm")
180         {
181             value = float(new_value) / 10000\&.0f;
182         }
183         else
184         {
185             value = 0\&.0f;
186         }
187         /*else if (init_dimensions == "ppb")
188         {
189             value = float(new_value) / 10000000\&.0f;
190         }
191         else if (init_dimensions == "ppt")
192         {
193             value = float(new_value) / 10000000000\&.0f;
194         }
195         else if (init_dimensions == "ppq")
196         {
197             value = float(new_value) / 10000000000000\&.0f;
198         }*/
199     }
.fi
.SS "scifir::percentage::percentage (const string & init_percentage)\fC [explicit]\fP"

.PP
Definition at line 201 of file percentage\&.cpp\&.
.PP
.nf
201                                                         : value()
202     {
203         initialize_from_string(init_percentage);
204     }
.fi
.SS "scifir::percentage::percentage (const \fBscalar_unit\fP & x)\fC [explicit]\fP"

.PP
Definition at line 206 of file percentage\&.cpp\&.
.PP
.nf
207     {
208         if (x\&.has_empty_dimensions())
209         {
210             value = float(x);
211         }
212         else
213         {
214             cerr << "A percentage cannot be initialized with dimensions" << endl;
215             value = 0\&.0f;
216         }
217     }
.fi
.SH "Member Function Documentation"
.PP 
.SS "string scifir::percentage::display_percentage (int number_of_decimals = \fC2\fP) const"

.PP
Definition at line 376 of file percentage\&.cpp\&.
.PP
.nf
377     {
378         ostringstream out;
379         out << display_float(value,number_of_decimals) << "%";
380         return out\&.str();
381     }
.fi
.SS "string scifir::percentage::display_ppm () const"

.PP
Definition at line 383 of file percentage\&.cpp\&.
.PP
.nf
384     {
385         ostringstream out;
386         out << display_float(get_ppm()) << " ppm";
387         return out\&.str();
388     }
.fi
.SS "float scifir::percentage::get_factor () const"

.PP
Definition at line 351 of file percentage\&.cpp\&.
.PP
.nf
352     {
353         return value / 100;
354     }
.fi
.SS "float scifir::percentage::get_ppm () const"

.PP
Definition at line 356 of file percentage\&.cpp\&.
.PP
.nf
357     {
358         return value * 10000\&.0f;
359     }
.fi
.SS "const float& scifir::percentage::get_value () const\fC [inline]\fP"

.PP
Definition at line 50 of file percentage\&.hpp\&.
.PP
.nf
51             {
52                 return value;
53             }
.fi
.SS "void scifir::percentage::initialize_from_string (const string & init_percentage)\fC [private]\fP"

.PP
Definition at line 411 of file percentage\&.cpp\&.
.PP
.nf
412     {
413         if (init_percentage[init_percentage\&.length() - 1] == '%')
414         {
415             value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 1));
416         }
417         else if (init_percentage\&.find(" ") != string::npos)
418         {
419             string percentage_unit = init_percentage\&.substr(init_percentage\&.length() - 4,4);
420             if (percentage_unit == " ppm")
421             {
422                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 4)) / 10000\&.0f;
423             }
424             else
425             {
426                 value = 0\&.0f;
427             }
428             /*else if (percentage_unit == " ppb")
429             {
430                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 4)) / 10000000\&.0f;
431             }
432             else if (percentage_unit == " ppt")
433             {
434                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 4)) / 10000000000\&.0f;
435             }
436             else if (percentage_unit == " ppq")
437             {
438                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 4)) / 10000000000000\&.0f;
439             }*/
440         }
441         else if (init_percentage\&.length() > 3)
442         {
443             string percentage_unit = init_percentage\&.substr(init_percentage\&.length() - 3,3);
444             if (percentage_unit == "ppm")
445             {
446                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 3)) / 10000\&.0f;
447             }
448             /*else if (percentage_unit == "ppb")
449             {
450                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 3)) / 10000000\&.0f;
451             }
452             else if (percentage_unit == "ppt")
453             {
454                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 3)) / 10000000000\&.0f;
455             }
456             else if (percentage_unit == "ppq")
457             {
458                 value = stof(init_percentage\&.substr(0,init_percentage\&.length() - 3)) / 10000000000000\&.0f;
459             }*/
460             else
461             {
462                 value = 0\&.0f;
463             }
464         }
465         else
466         {
467             value = 0\&.0f;
468         }
469     }
.fi
.SS "scifir::percentage::operator float () const\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 45 of file percentage\&.hpp\&.
.PP
.nf
46             {
47                 return float(value);
48             }
.fi
.SS "\fBpercentage\fP scifir::percentage::operator* (const \fBpercentage\fP & x) const"

.PP
Definition at line 285 of file percentage\&.cpp\&.
.PP
.nf
286     {
287         return percentage(value * x\&.get_value() / 100);
288     }
.fi
.SS "\fBscalar_unit\fP scifir::percentage::operator* (const \fBscalar_unit\fP & x) const"

.PP
Definition at line 341 of file percentage\&.cpp\&.
.PP
.nf
342     {
343         return get_factor() * x;
344     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> float scifir::percentage::operator* (T x) const\fC [inline]\fP"

.PP
Definition at line 83 of file percentage\&.hpp\&.
.PP
.nf
84             {
85                 return float(value * x / 100);
86             }
.fi
.SS "void scifir::percentage::operator*= (const \fBpercentage\fP & x)"

.PP
Definition at line 305 of file percentage\&.cpp\&.
.PP
.nf
306     {
307         value *= (x\&.get_value() / 100);
308     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void scifir::percentage::operator*= (T x)\fC [inline]\fP"

.PP
Definition at line 107 of file percentage\&.hpp\&.
.PP
.nf
108             {
109                 value *= x;
110             }
.fi
.SS "\fBpercentage\fP scifir::percentage::operator+ (const \fBpercentage\fP & x) const"

.PP
Definition at line 275 of file percentage\&.cpp\&.
.PP
.nf
276     {
277         return percentage(value + x\&.get_value());
278     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP scifir::percentage::operator+ (T x) const\fC [inline]\fP"

.PP
Definition at line 71 of file percentage\&.hpp\&.
.PP
.nf
72             {
73                 return percentage(value + x);
74             }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator++ ()"

.PP
Definition at line 315 of file percentage\&.cpp\&.
.PP
.nf
316     {
317         value++;
318         return *this;
319     }
.fi
.SS "\fBpercentage\fP scifir::percentage::operator++ (int)"

.PP
Definition at line 321 of file percentage\&.cpp\&.
.PP
.nf
322     {
323         percentage tmp = percentage(*this);
324         operator++();
325         return tmp;
326     }
.fi
.SS "void scifir::percentage::operator+= (const \fBpercentage\fP & x)"

.PP
Definition at line 295 of file percentage\&.cpp\&.
.PP
.nf
296     {
297         value += x\&.get_value();
298     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void scifir::percentage::operator+= (T x)\fC [inline]\fP"

.PP
Definition at line 95 of file percentage\&.hpp\&.
.PP
.nf
96             {
97                 value += x;
98             }
.fi
.SS "\fBpercentage\fP scifir::percentage::operator\- (const \fBpercentage\fP & x) const"

.PP
Definition at line 280 of file percentage\&.cpp\&.
.PP
.nf
281     {
282         return percentage(value - x\&.get_value());
283     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBpercentage\fP scifir::percentage::operator\- (T x) const\fC [inline]\fP"

.PP
Definition at line 77 of file percentage\&.hpp\&.
.PP
.nf
78             {
79                 return percentage(value - x);
80             }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator\-\- ()"

.PP
Definition at line 328 of file percentage\&.cpp\&.
.PP
.nf
329     {
330         value--;
331         return *this;
332     }
.fi
.SS "\fBpercentage\fP scifir::percentage::operator\-\- (int)"

.PP
Definition at line 334 of file percentage\&.cpp\&.
.PP
.nf
335     {
336         percentage tmp = percentage(*this);
337         operator\-\-();
338         return tmp;
339     }
.fi
.SS "void scifir::percentage::operator\-= (const \fBpercentage\fP & x)"

.PP
Definition at line 300 of file percentage\&.cpp\&.
.PP
.nf
301     {
302         value -= x\&.get_value();
303     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void scifir::percentage::operator\-= (T x)\fC [inline]\fP"

.PP
Definition at line 101 of file percentage\&.hpp\&.
.PP
.nf
102             {
103                 value -= x;
104             }
.fi
.SS "\fBpercentage\fP scifir::percentage::operator/ (const \fBpercentage\fP & x) const"

.PP
Definition at line 290 of file percentage\&.cpp\&.
.PP
.nf
291     {
292         return percentage(100 * value / x\&.get_value());
293     }
.fi
.SS "\fBscalar_unit\fP scifir::percentage::operator/ (const \fBscalar_unit\fP & x) const"

.PP
Definition at line 346 of file percentage\&.cpp\&.
.PP
.nf
347     {
348         return get_factor() / x;
349     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> float scifir::percentage::operator/ (T x) const\fC [inline]\fP"

.PP
Definition at line 89 of file percentage\&.hpp\&.
.PP
.nf
90             {
91                 return float(value / (100 * x));
92             }
.fi
.SS "void scifir::percentage::operator/= (const \fBpercentage\fP & x)"

.PP
Definition at line 310 of file percentage\&.cpp\&.
.PP
.nf
311     {
312         value *= 100 / x\&.get_value();
313     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void scifir::percentage::operator/= (T x)\fC [inline]\fP"

.PP
Definition at line 113 of file percentage\&.hpp\&.
.PP
.nf
114             {
115                 value /= x;
116             }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator= (const \fBpercentage\fP & x)"

.PP
Definition at line 219 of file percentage\&.cpp\&.
.PP
.nf
220     {
221         value = x\&.get_value();
222         return *this;
223     }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator= (const \fBscalar_unit\fP & x)"

.PP
Definition at line 261 of file percentage\&.cpp\&.
.PP
.nf
262     {
263         if (x\&.has_empty_dimensions())
264         {
265             value = x\&.get_value();
266         }
267         else
268         {
269             cerr << "A percentage cannot be initialized with dimensions" << endl;
270             value = 0\&.0f;
271         }
272         return *this;
273     }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator= (const string & init_percentage)"

.PP
Definition at line 255 of file percentage\&.cpp\&.
.PP
.nf
256     {
257         initialize_from_string(init_percentage);
258         return *this;
259     }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator= (double new_value)"

.PP
Definition at line 237 of file percentage\&.cpp\&.
.PP
.nf
238     {
239         value = float(new_value);
240         return *this;
241     }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator= (float new_value)"

.PP
Definition at line 231 of file percentage\&.cpp\&.
.PP
.nf
232     {
233         value = new_value;
234         return *this;
235     }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator= (int new_value)"

.PP
Definition at line 249 of file percentage\&.cpp\&.
.PP
.nf
250     {
251         value = float(new_value);
252         return *this;
253     }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator= (long double new_value)"

.PP
Definition at line 243 of file percentage\&.cpp\&.
.PP
.nf
244     {
245         value = float(new_value);
246         return *this;
247     }
.fi
.SS "\fBpercentage\fP & scifir::percentage::operator= (\fBpercentage\fP && x)"

.PP
Definition at line 225 of file percentage\&.cpp\&.
.PP
.nf
226     {
227         value = std::move(x\&.get_value());
228         return *this;
229     }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> void scifir::percentage::operator= (T x)\fC [inline]\fP"

.PP
Definition at line 65 of file percentage\&.hpp\&.
.PP
.nf
66             {
67                 value = x;
68             }
.fi
.SH "Member Data Documentation"
.PP 
.SS "float scifir::percentage::value\fC [private]\fP"

.PP
Definition at line 140 of file percentage\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
