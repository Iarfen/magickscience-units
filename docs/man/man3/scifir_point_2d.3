.TH "scifir::point_2d< T >" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::point_2d< T >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <point_2d\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpoint_2d\fP ()"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBconst\fP \fBpoint_2d\fP< T > &\fBx_point\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBpoint_2d\fP< T > &&\fBx_point\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBconst\fP T &\fBnew_x\fP, \fBconst\fP T &\fBnew_y\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBconst\fP T &\fBnew_p\fP, \fBconst\fP \fBangle\fP &\fBnew_theta\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBconst\fP \fBscifir::coordinates_2d\fP< T > &\fBx_coordinates\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBscifir::coordinates_2d\fP< T > &&\fBx_coordinates\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBconst\fP \fBstring\fP &\fBinit_point_2d\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< T > & \fBoperator=\fP (\fBconst\fP \fBpoint_2d\fP< T > &\fBx_point\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< T > & \fBoperator=\fP (\fBpoint_2d\fP< T > &&\fBx_point\fP)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< T > & \fBoperator=\fP (\fBconst\fP \fBcoordinates_2d\fP< T > &)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< T > & \fBoperator=\fP (\fBcoordinates_2d\fP< T > &&)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< T > & \fBoperator=\fP (\fBconst\fP \fBstring\fP &\fBinit_point_2d\fP)"
.br
.ti -1c
.RI "T \fBget_p\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBangle\fP \fBget_theta\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_position\fP (\fBconst\fP T &\fBnew_x\fP, \fBconst\fP T &\fBnew_y\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_position\fP (\fBconst\fP T &\fBnew_p\fP, \fBconst\fP \fBangle\fP &\fBnew_theta\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrotate\fP (\fBconst\fP \fBangle\fP &\fBx_angle\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBmove\fP (\fBconst\fP \fBdisplacement_2d\fP &\fBx_displacement\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBmove\fP (\fBconst\fP T &\fBnew_x\fP, \fBconst\fP T &\fBnew_y\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBmove\fP (\fBconst\fP T &\fBnew_p\fP, \fBconst\fP \fBangle\fP &\fBnew_theta\fP)"
.br
.ti -1c
.RI "T \fBdistance_to_origin\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay_cartesian\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay_polar\fP () \fBconst\fP"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "T \fBx\fP"
.br
.ti -1c
.RI "T \fBy\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBinitialize_from_string\fP (\fBstring\fP \fBinit_point_2d\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<\fBtypename\fP T = length>
.br
class scifir::point_2d< T >"
.PP
Definition at line \fB18\fP of file \fBpoint_2d\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBtypename\fP T  = length> \fBscifir::point_2d\fP< T >::point_2d ()\fC [inline]\fP"

.PP
Definition at line \fB21\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
21                        : x(),y()
22             {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::point_2d\fP< T >::point_2d (\fBconst\fP \fBpoint_2d\fP< T > & x_point)\fC [inline]\fP"

.PP
Definition at line \fB24\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
24                                                  : x(x_point\&.x),y(x_point\&.y)
25             {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::point_2d\fP< T >::point_2d (\fBpoint_2d\fP< T > && x_point)\fC [inline]\fP"

.PP
Definition at line \fB27\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
27                                             : x(std::move(x_point\&.x)),y(std::move(x_point\&.y))
28             {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::point_2d\fP< T >::point_2d (\fBconst\fP T & new_x, \fBconst\fP T & new_y)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line \fB30\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
30                                                              : x(new_x),y(new_y)
31             {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::point_2d\fP< T >::point_2d (\fBconst\fP T & new_p, \fBconst\fP \fBangle\fP & new_theta)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line \fB33\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
34             {
35                 set_position(new_p,new_theta);
36             }
.fi

.SS "template<\fBtypename\fP T > \fBscifir::point_2d\fP< T >::point_2d (\fBconst\fP \fBscifir::coordinates_2d\fP< T > & x_coordinates)\fC [explicit]\fP"

.PP
Definition at line \fB13\fP of file \fBpoint_2d_impl\&.hpp\fP\&..PP
.nf
13                                                                 : x(x_coordinates\&.x),y(x_coordinates\&.y)
14     {}
.fi

.SS "template<\fBtypename\fP T > \fBscifir::point_2d\fP< T >::point_2d (\fBscifir::coordinates_2d\fP< T > && x_coordinates)\fC [explicit]\fP"

.PP
Definition at line \fB17\fP of file \fBpoint_2d_impl\&.hpp\fP\&..PP
.nf
17                                                            : x(std::move(x_coordinates\&.x)),y(std::move(x_coordinates\&.y))
18     {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::point_2d\fP< T >::point_2d (\fBconst\fP \fBstring\fP & init_point_2d)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line \fB42\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
42                                                            : point_2d()
43             {
44                 initialize_from_string(init_point_2d);
45             }
.fi

.SH "Member Function Documentation"
.PP 
.SS "template<\fBtypename\fP T  = length> \fBstring\fP \fBscifir::point_2d\fP< T >::display_cartesian () const\fC [inline]\fP"

.PP
Definition at line \fB124\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
125             {
126                 ostringstream out;
127                 out << "(" << x << "," << y << ")";
128                 return out\&.str();
129             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBstring\fP \fBscifir::point_2d\fP< T >::display_polar () const\fC [inline]\fP"

.PP
Definition at line \fB131\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
132             {
133                 ostringstream out;
134                 out << "(" << get_p() << "," << get_theta() << ")";
135                 return out\&.str();
136             }
.fi

.SS "template<\fBtypename\fP T  = length> T \fBscifir::point_2d\fP< T >::distance_to_origin () const\fC [inline]\fP"

.PP
Definition at line \fB119\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
120             {
121                 return scifir::sqrt(scifir::pow(x,2) + scifir::pow(y,2));
122             }
.fi

.SS "template<\fBtypename\fP T  = length> T \fBscifir::point_2d\fP< T >::get_p () const\fC [inline]\fP"

.PP
Definition at line \fB71\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
72             {
73                 return scifir::sqrt(scifir::pow(x,2) + scifir::pow(y,2));
74             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBangle\fP \fBscifir::point_2d\fP< T >::get_theta () const\fC [inline]\fP"

.PP
Definition at line \fB76\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
77             {
78                 return angle(radian_to_grade(std::atan2(y\&.get_value(),x\&.get_value())));
79             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::point_2d\fP< T >::initialize_from_string (\fBstring\fP init_point_2d)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB142\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
143             {
144                 vector<string> values;
145                 if (init_point_2d\&.front() == '(')
146                 {
147                     init_point_2d\&.erase(0,1);
148                 }
149                 if (init_point_2d\&.back() == ')')
150                 {
151                     init_point_2d\&.erase(init_point_2d\&.size()\-1,1);
152                 }
153                 boost::split(values,init_point_2d,boost::is_any_of(","));
154                 if (values\&.size() == 2)
155                 {
156                     if (is_angle(values[1]))
157                     {
158                         set_position(length(values[0]),angle(values[1]));
159                     }
160                     else
161                     {
162                         set_position(length(values[0]),length(values[1]));
163                     }
164                 }
165             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::point_2d\fP< T >::move (\fBconst\fP \fBdisplacement_2d\fP & x_displacement)\fC [inline]\fP"

.PP
Definition at line \fB101\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
102             {
103                 x += x_displacement\&.x_projection();
104                 y += x_displacement\&.y_projection();
105             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::point_2d\fP< T >::move (\fBconst\fP T & new_p, \fBconst\fP \fBangle\fP & new_theta)\fC [inline]\fP"

.PP
Definition at line \fB113\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
114             {
115                 x += new_p * scifir::cos(new_theta);
116                 y += new_p * scifir::sin(new_theta);
117             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::point_2d\fP< T >::move (\fBconst\fP T & new_x, \fBconst\fP T & new_y)\fC [inline]\fP"

.PP
Definition at line \fB107\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
108             {
109                 x += new_x;
110                 y += new_y;
111             }
.fi

.SS "template<\fBtypename\fP T > \fBpoint_2d\fP< T > & \fBscifir::point_2d\fP< T >::operator= (\fBconst\fP \fBcoordinates_2d\fP< T > & x_coordinates)"

.PP
Definition at line \fB21\fP of file \fBpoint_2d_impl\&.hpp\fP\&..PP
.nf
22     {
23         x = x_coordinates\&.x;
24         y = x_coordinates\&.y;
25         return *this;
26     }
.fi

.SS "template<\fBtypename\fP T  = length> \fBpoint_2d\fP< T > & \fBscifir::point_2d\fP< T >::operator= (\fBconst\fP \fBpoint_2d\fP< T > & x_point)\fC [inline]\fP"

.PP
Definition at line \fB47\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
48             {
49                 x = x_point\&.x;
50                 y = x_point\&.y;
51                 return *this;
52             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBpoint_2d\fP< T > & \fBscifir::point_2d\fP< T >::operator= (\fBconst\fP \fBstring\fP & init_point_2d)\fC [inline]\fP"

.PP
Definition at line \fB65\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
66             {
67                 initialize_from_string(init_point_2d);
68                 return *this;
69             }
.fi

.SS "template<\fBtypename\fP T > \fBpoint_2d\fP< T > & \fBscifir::point_2d\fP< T >::operator= (\fBcoordinates_2d\fP< T > && x_coordinates)"

.PP
Definition at line \fB29\fP of file \fBpoint_2d_impl\&.hpp\fP\&..PP
.nf
30     {
31         x = std::move(x_coordinates\&.x);
32         y = std::move(x_coordinates\&.y);
33         return *this;
34     }
.fi

.SS "template<\fBtypename\fP T  = length> \fBpoint_2d\fP< T > & \fBscifir::point_2d\fP< T >::operator= (\fBpoint_2d\fP< T > && x_point)\fC [inline]\fP"

.PP
Definition at line \fB54\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
55             {
56                 x = std::move(x_point\&.x);
57                 y = std::move(x_point\&.y);
58                 return *this;
59             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::point_2d\fP< T >::rotate (\fBconst\fP \fBangle\fP & x_angle)\fC [inline]\fP"

.PP
Definition at line \fB93\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
94             {
95                 T x_coord = x;
96                 T y_coord = y;
97                 x = x_coord * scifir::cos(x_angle) \- y_coord * scifir::sin(x_angle);
98                 y = x_coord * scifir::sin(x_angle) + y_coord * scifir::cos(x_angle);
99             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::point_2d\fP< T >::set_position (\fBconst\fP T & new_p, \fBconst\fP \fBangle\fP & new_theta)\fC [inline]\fP"

.PP
Definition at line \fB87\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
88             {
89                 x = T(new_p * scifir::cos(new_theta));
90                 y = T(new_p * scifir::sin(new_theta));
91             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::point_2d\fP< T >::set_position (\fBconst\fP T & new_x, \fBconst\fP T & new_y)\fC [inline]\fP"

.PP
Definition at line \fB81\fP of file \fBpoint_2d\&.hpp\fP\&..PP
.nf
82             {
83                 x = new_x;
84                 y = new_y;
85             }
.fi

.SH "Member Data Documentation"
.PP 
.SS "template<\fBtypename\fP T  = length> T \fBscifir::point_2d\fP< T >::x"

.PP
Definition at line \fB138\fP of file \fBpoint_2d\&.hpp\fP\&.
.SS "template<\fBtypename\fP T  = length> T \fBscifir::point_2d\fP< T >::y"

.PP
Definition at line \fB139\fP of file \fBpoint_2d\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
