.TH "scifir::point_2d< float >" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::point_2d< float >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <point_2d\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpoint_2d\fP ()"
.br
.ti -1c
.RI "\fBpoint_2d\fP (const \fBpoint_2d\fP< float > &x_point)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBpoint_2d\fP< float > &&x_point)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (float new_x, float new_y)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (float new_p, const \fBangle\fP &new_theta)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (const \fBcoordinates_2d\fP< float > &x_coordinates)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (\fBcoordinates_2d\fP< float > &&x_coordinates)"
.br
.ti -1c
.RI "\fBpoint_2d\fP (const string &init_point_2d)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< float > & \fBoperator=\fP (const \fBpoint_2d\fP< float > &x_point)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< float > & \fBoperator=\fP (\fBpoint_2d\fP< float > &&x_point)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< float > & \fBoperator=\fP (const \fBcoordinates_2d\fP< float > &x_coordinates)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< float > & \fBoperator=\fP (\fBcoordinates_2d\fP< float > &&x_coordinates)"
.br
.ti -1c
.RI "\fBpoint_2d\fP< float > & \fBoperator=\fP (const string &init_point_2d)"
.br
.ti -1c
.RI "float \fBget_p\fP () const"
.br
.ti -1c
.RI "\fBangle\fP \fBget_theta\fP () const"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_x, float new_y)"
.br
.ti -1c
.RI "void \fBset_position\fP (float new_p, const \fBangle\fP &new_theta)"
.br
.ti -1c
.RI "void \fBrotate\fP (const \fBangle\fP &x_angle)"
.br
.ti -1c
.RI "void \fBmove\fP (const displacement_2d &x_displacement)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_x, float new_y)"
.br
.ti -1c
.RI "void \fBmove\fP (float new_p, const \fBangle\fP &new_theta)"
.br
.ti -1c
.RI "float \fBdistance_to_origin\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_cartesian\fP () const"
.br
.ti -1c
.RI "string \fBdisplay_polar\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "float \fBx\fP"
.br
.ti -1c
.RI "float \fBy\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialize_from_string\fP (string init_point_2d)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 169 of file point_2d\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBscifir::point_2d\fP< float >::\fBpoint_2d\fP ()\fC [inline]\fP"

.PP
Definition at line 172 of file point_2d\&.hpp\&.
.PP
.nf
172                        : x(),y()
173             {}
.fi
.SS "\fBscifir::point_2d\fP< float >::\fBpoint_2d\fP (const \fBpoint_2d\fP< float > & x_point)\fC [inline]\fP"

.PP
Definition at line 175 of file point_2d\&.hpp\&.
.PP
.nf
175                                                      : x(x_point\&.x),y(x_point\&.y)
176             {}
.fi
.SS "\fBscifir::point_2d\fP< float >::\fBpoint_2d\fP (\fBpoint_2d\fP< float > && x_point)\fC [inline]\fP"

.PP
Definition at line 178 of file point_2d\&.hpp\&.
.PP
.nf
178                                                 : x(std::move(x_point\&.x)),y(std::move(x_point\&.y))
179             {}
.fi
.SS "\fBscifir::point_2d\fP< float >::\fBpoint_2d\fP (float new_x, float new_y)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 181 of file point_2d\&.hpp\&.
.PP
.nf
181                                                        : x(new_x),y(new_y)
182             {}
.fi
.SS "\fBscifir::point_2d\fP< float >::\fBpoint_2d\fP (float new_p, const \fBangle\fP & new_theta)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 184 of file point_2d\&.hpp\&.
.PP
.nf
185             {
186                 set_position(new_p,new_theta);
187             }
.fi
.SS "\fBscifir::point_2d\fP< float >::\fBpoint_2d\fP (const \fBcoordinates_2d\fP< float > & x_coordinates)\fC [explicit]\fP"

.PP
Definition at line 10 of file point_2d\&.cpp\&.
.PP
.nf
10                                                                         : x(x_coordinates\&.x),y(x_coordinates\&.y)
11     {}
.fi
.SS "\fBscifir::point_2d\fP< float >::\fBpoint_2d\fP (\fBcoordinates_2d\fP< float > && x_coordinates)\fC [explicit]\fP"

.PP
Definition at line 13 of file point_2d\&.cpp\&.
.PP
.nf
13                                                                    : x(std::move(x_coordinates\&.x)),y(std::move(x_coordinates\&.y))
14     {}
.fi
.SS "\fBscifir::point_2d\fP< float >::\fBpoint_2d\fP (const string & init_point_2d)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 193 of file point_2d\&.hpp\&.
.PP
.nf
193                                                            : point_2d()
194             {
195                 initialize_from_string(init_point_2d);
196             }
.fi
.SH "Member Function Documentation"
.PP 
.SS "string \fBscifir::point_2d\fP< float >::display_cartesian () const\fC [inline]\fP"

.PP
Definition at line 275 of file point_2d\&.hpp\&.
.PP
.nf
276             {
277                 ostringstream out;
278                 out << "(" << display_float(x) << "," << display_float(y) << ")";
279                 return out\&.str();
280             }
.fi
.SS "string \fBscifir::point_2d\fP< float >::display_polar () const\fC [inline]\fP"

.PP
Definition at line 282 of file point_2d\&.hpp\&.
.PP
.nf
283             {
284                 ostringstream out;
285                 out << "(" << display_float(get_p(),2) << "," << get_theta() << ")";
286                 return out\&.str();
287             }
.fi
.SS "float \fBscifir::point_2d\fP< float >::distance_to_origin () const\fC [inline]\fP"

.PP
Definition at line 270 of file point_2d\&.hpp\&.
.PP
.nf
271             {
272                 return float(std::sqrt(std::pow(x,2) + std::pow(y,2)));
273             }
.fi
.SS "float \fBscifir::point_2d\fP< float >::get_p () const\fC [inline]\fP"

.PP
Definition at line 222 of file point_2d\&.hpp\&.
.PP
.nf
223             {
224                 return float(std::sqrt(std::pow(x,2) + std::pow(y,2)));
225             }
.fi
.SS "\fBangle\fP \fBscifir::point_2d\fP< float >::get_theta () const\fC [inline]\fP"

.PP
Definition at line 227 of file point_2d\&.hpp\&.
.PP
.nf
228             {
229                 return angle(radian_to_degree(std::atan2(y,x)));
230             }
.fi
.SS "void \fBscifir::point_2d\fP< float >::initialize_from_string (string init_point_2d)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 293 of file point_2d\&.hpp\&.
.PP
.nf
294             {
295                 vector<string> values;
296                 if (init_point_2d\&.front() == '(')
297                 {
298                     init_point_2d\&.erase(0,1);
299                 }
300                 if (init_point_2d\&.back() == ')')
301                 {
302                     init_point_2d\&.erase(init_point_2d\&.size()-1,1);
303                 }
304                 boost::split(values,init_point_2d,boost::is_any_of(","));
305                 if (values\&.size() == 2)
306                 {
307                     if (is_angle(values[1]))
308                     {
309                         set_position(stof(values[0]),angle(values[1]));
310                     }
311                     else
312                     {
313                         set_position(stof(values[0]),stof(values[1]));
314                     }
315                 }
316             }
.fi
.SS "void \fBscifir::point_2d\fP< float >::move (const displacement_2d & x_displacement)\fC [inline]\fP"

.PP
Definition at line 252 of file point_2d\&.hpp\&.
.PP
.nf
253             {
254                 x += float(x_displacement\&.x_projection());
255                 y += float(x_displacement\&.y_projection());
256             }
.fi
.SS "void \fBscifir::point_2d\fP< float >::move (float new_p, const \fBangle\fP & new_theta)\fC [inline]\fP"

.PP
Definition at line 264 of file point_2d\&.hpp\&.
.PP
.nf
265             {
266                 x += new_p * scifir::cos(new_theta);
267                 y += new_p * scifir::sin(new_theta);
268             }
.fi
.SS "void \fBscifir::point_2d\fP< float >::move (float new_x, float new_y)\fC [inline]\fP"

.PP
Definition at line 258 of file point_2d\&.hpp\&.
.PP
.nf
259             {
260                 x += new_x;
261                 y += new_y;
262             }
.fi
.SS "\fBpoint_2d\fP< float > & \fBscifir::point_2d\fP< float >::operator= (const \fBcoordinates_2d\fP< float > & x_coordinates)"

.PP
Definition at line 16 of file point_2d\&.cpp\&.
.PP
.nf
17     {
18         x = x_coordinates\&.x;
19         y = x_coordinates\&.y;
20         return *this;
21     }
.fi
.SS "\fBpoint_2d\fP<float>& \fBscifir::point_2d\fP< float >::operator= (const \fBpoint_2d\fP< float > & x_point)\fC [inline]\fP"

.PP
Definition at line 198 of file point_2d\&.hpp\&.
.PP
.nf
199             {
200                 x = x_point\&.x;
201                 y = x_point\&.y;
202                 return *this;
203             }
.fi
.SS "\fBpoint_2d\fP<float>& \fBscifir::point_2d\fP< float >::operator= (const string & init_point_2d)\fC [inline]\fP"

.PP
Definition at line 216 of file point_2d\&.hpp\&.
.PP
.nf
217             {
218                 initialize_from_string(init_point_2d);
219                 return *this;
220             }
.fi
.SS "\fBpoint_2d\fP< float > & \fBscifir::point_2d\fP< float >::operator= (\fBcoordinates_2d\fP< float > && x_coordinates)"

.PP
Definition at line 23 of file point_2d\&.cpp\&.
.PP
.nf
24     {
25         x = std::move(x_coordinates\&.x);
26         y = std::move(x_coordinates\&.y);
27         return *this;
28     }
.fi
.SS "\fBpoint_2d\fP<float>& \fBscifir::point_2d\fP< float >::operator= (\fBpoint_2d\fP< float > && x_point)\fC [inline]\fP"

.PP
Definition at line 205 of file point_2d\&.hpp\&.
.PP
.nf
206             {
207                 x = std::move(x_point\&.x);
208                 y = std::move(x_point\&.y);
209                 return *this;
210             }
.fi
.SS "void \fBscifir::point_2d\fP< float >::rotate (const \fBangle\fP & x_angle)\fC [inline]\fP"

.PP
Definition at line 244 of file point_2d\&.hpp\&.
.PP
.nf
245             {
246                 float x_coord = x;
247                 float y_coord = y;
248                 x = x_coord * scifir::cos(x_angle) - y_coord * scifir::sin(x_angle);
249                 y = x_coord * scifir::sin(x_angle) + y_coord * scifir::cos(x_angle);
250             }
.fi
.SS "void \fBscifir::point_2d\fP< float >::set_position (float new_p, const \fBangle\fP & new_theta)\fC [inline]\fP"

.PP
Definition at line 238 of file point_2d\&.hpp\&.
.PP
.nf
239             {
240                 x = new_p * scifir::cos(new_theta);
241                 y = new_p * scifir::sin(new_theta);
242             }
.fi
.SS "void \fBscifir::point_2d\fP< float >::set_position (float new_x, float new_y)\fC [inline]\fP"

.PP
Definition at line 232 of file point_2d\&.hpp\&.
.PP
.nf
233             {
234                 x = new_x;
235                 y = new_y;
236             }
.fi
.SH "Member Data Documentation"
.PP 
.SS "float \fBscifir::point_2d\fP< float >::x"

.PP
Definition at line 289 of file point_2d\&.hpp\&.
.SS "float \fBscifir::point_2d\fP< float >::y"

.PP
Definition at line 290 of file point_2d\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
