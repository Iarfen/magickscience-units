.TH "scifir::prefix" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::prefix \- Class that represents prefixes of the SI system of units\&. Each prefix sizes 1 byte\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <prefix\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBtype\fP : int8_t { \fBNONE\fP, \fBQUETTA\fP, \fBRONNA\fP, \fBYOTTA\fP, \fBZETTA\fP, \fBEXA\fP, \fBPETA\fP, \fBTERA\fP, \fBGIGA\fP, \fBMEGA\fP, \fBKILO\fP, \fBHECTO\fP, \fBDECA\fP, \fBDECI\fP, \fBCENTI\fP, \fBMILLI\fP, \fBMICRO\fP, \fBNANO\fP, \fBPICO\fP, \fBFEMTO\fP, \fBATTO\fP, \fBZEPTO\fP, \fBYOCTO\fP, \fBRONTO\fP, \fBQUECTO\fP }"
.br
.RI "Represents a prefix of the SI system of units\&. All the prefixes of the SI system of units are supported\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBprefix\fP ()"
.br
.RI "Default constructor\&. The prefix_type is set to NONE\&. "
.ti -1c
.RI "\fBprefix\fP (const \fBprefix\fP &x)"
.br
.RI "Copy constructor\&. The prefix_type is copied from the prefix x\&. "
.ti -1c
.RI "\fBprefix\fP (\fBprefix\fP &&x)"
.br
.RI "Move constructor\&. The prefix_type is moved from the prefix x\&. "
.ti -1c
.RI "\fBprefix\fP (\fBprefix::type\fP new_type)"
.br
.RI "Constructor\&. The prefix_type is set to the new_type given\&. "
.ti -1c
.RI "\fBprefix\fP (const string &new_type)"
.br
.RI "Constructor\&. The prefix_type is set to the new_type specified in the string\&. "
.ti -1c
.RI "\fBprefix\fP & \fBoperator=\fP (const \fBprefix\fP &x)"
.br
.RI "Copy assignment\&. The prefix_type is copied from the prefix x\&. "
.ti -1c
.RI "\fBprefix\fP & \fBoperator=\fP (\fBprefix\fP &&x)"
.br
.RI "Move assignment\&. The prefix_type is moved from the prefix x\&. "
.ti -1c
.RI "int \fBget_conversion_factor\fP () const"
.br
.RI "Returns the conversion factor of the prefix given the prefix_type\&. It uses the SI system of units for the value of each conversion factor\&. "
.ti -1c
.RI "string \fBget_name\fP () const"
.br
.RI "Name of the prefix given the prefix_type\&. "
.ti -1c
.RI "string \fBget_symbol\fP () const"
.br
.RI "Symbol of the prefix given the prefix_type\&. The symbol of micro is supported in his Unicode version\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBscifir::prefix\fP &x) const"
.br
.RI "This operator allows to order the prefixes from the lower to the greather\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBprefix::type\fP \fBprefix_type\fP"
.br
.RI "It stores the prefix type currently being used\&. "
.in -1c
.SH "Detailed Description"
.PP 
Class that represents prefixes of the SI system of units\&. Each prefix sizes 1 byte\&. 
.PP
Definition at line 13 of file prefix\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBscifir::prefix::type\fP : int8_t"

.PP
Represents a prefix of the SI system of units\&. All the prefixes of the SI system of units are supported\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINONE \fP\fP
There is no prefix\&. Then, the dimension is not increased or decreased by some factor\&. 
.TP
\fB\fIQUETTA \fP\fP
Prefix of a factor of 10^30\&. 
.TP
\fB\fIRONNA \fP\fP
Prefix of a factor of 10^27\&. 
.TP
\fB\fIYOTTA \fP\fP
Prefix of a factor of 10^24\&. 
.TP
\fB\fIZETTA \fP\fP
Prefix of a factor of 10^21\&. 
.TP
\fB\fIEXA \fP\fP
Prefix of a factor of 10^18\&. 
.TP
\fB\fIPETA \fP\fP
Prefix of a factor of 10^15\&. 
.TP
\fB\fITERA \fP\fP
Prefix of a factor of 10^12\&. 
.TP
\fB\fIGIGA \fP\fP
Prefix of a factor of 10^9\&. 
.TP
\fB\fIMEGA \fP\fP
Prefix of a factor of 10^6\&. 
.TP
\fB\fIKILO \fP\fP
Prefix of a factor of 10^3\&. 
.TP
\fB\fIHECTO \fP\fP
Prefix of a factor of 10^2\&. 
.TP
\fB\fIDECA \fP\fP
Prefix of a factor of 10^1\&. 
.TP
\fB\fIDECI \fP\fP
Prefix of a factor of 10^-1\&. 
.TP
\fB\fICENTI \fP\fP
Prefix of a factor of 10^-2\&. 
.TP
\fB\fIMILLI \fP\fP
Prefix of a factor of 10^-3\&. 
.TP
\fB\fIMICRO \fP\fP
Prefix of a factor of 10^-6\&. 
.TP
\fB\fINANO \fP\fP
Prefix of a factor of 10^-9\&. 
.TP
\fB\fIPICO \fP\fP
Prefix of a factor of 10^-12\&. 
.TP
\fB\fIFEMTO \fP\fP
Prefix of a factor of 10^-15\&. 
.TP
\fB\fIATTO \fP\fP
Prefix of a factor of 10^-18\&. 
.TP
\fB\fIZEPTO \fP\fP
Prefix of a factor of 10^-21\&. 
.TP
\fB\fIYOCTO \fP\fP
Prefix of a factor of 10^-24\&. 
.TP
\fB\fIRONTO \fP\fP
Prefix of a factor of 10^-27\&. 
.TP
\fB\fIQUECTO \fP\fP
Prefix of a factor of 10^-30\&. 
.PP
Definition at line 16 of file prefix\&.hpp\&.
.PP
.nf
16 : int8_t {NONE,QUETTA,RONNA,YOTTA,ZETTA,EXA,PETA,TERA,GIGA,MEGA,KILO,HECTO,DECA,DECI,CENTI,MILLI,MICRO,NANO,PICO,FEMTO,ATTO,ZEPTO,YOCTO,RONTO,QUECTO};
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "prefix::prefix ()"

.PP
Default constructor\&. The prefix_type is set to NONE\&. 
.PP
Definition at line 9 of file prefix\&.cpp\&.
.PP
.nf
9                   : prefix_type(prefix::NONE)
10     {}
.fi
.SS "prefix::prefix (const \fBprefix\fP & x)"

.PP
Copy constructor\&. The prefix_type is copied from the prefix x\&. 
.PP
Definition at line 12 of file prefix\&.cpp\&.
.PP
.nf
12                                   : prefix_type(x\&.prefix_type)
13     {}
.fi
.SS "prefix::prefix (\fBprefix\fP && x)"

.PP
Move constructor\&. The prefix_type is moved from the prefix x\&. 
.PP
Definition at line 15 of file prefix\&.cpp\&.
.PP
.nf
15                              : prefix_type(std::move(x\&.prefix_type))
16     {}
.fi
.SS "prefix::prefix (\fBprefix::type\fP new_type)\fC [explicit]\fP"

.PP
Constructor\&. The prefix_type is set to the new_type given\&. 
.PP
Definition at line 18 of file prefix\&.cpp\&.
.PP
.nf
18                                       : prefix_type(new_type)
19     {}
.fi
.SS "prefix::prefix (const string & new_type)\fC [explicit]\fP"

.PP
Constructor\&. The prefix_type is set to the new_type specified in the string\&. 
.PP
Definition at line 21 of file prefix\&.cpp\&.
.PP
.nf
21                                          : prefix_type(prefix_string(new_type))
22     {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "int prefix::get_conversion_factor () const"

.PP
Returns the conversion factor of the prefix given the prefix_type\&. It uses the SI system of units for the value of each conversion factor\&. 
.PP
Definition at line 36 of file prefix\&.cpp\&.
.PP
.nf
37     {
38         switch (prefix_type)
39         {
40             case prefix::QUETTA:
41                 return 30;
42             case prefix::RONNA:
43                 return 27;
44             case prefix::YOTTA:
45                 return 24;
46             case prefix::ZETTA:
47                 return 21;
48             case prefix::EXA:
49                 return 18;
50             case prefix::PETA:
51                 return 15;
52             case prefix::TERA:
53                 return 12;
54             case prefix::GIGA:
55                 return 9;
56             case prefix::MEGA:
57                 return 6;
58             case prefix::KILO:
59                 return 3;
60             case prefix::HECTO:
61                 return 2;
62             case prefix::DECA:
63                 return 1;
64             case prefix::NONE:
65                 return 0;
66             case prefix::DECI:
67                 return -1;
68             case prefix::CENTI:
69                 return -2;
70             case prefix::MILLI:
71                 return -3;
72             case prefix::MICRO:
73                 return -6;
74             case prefix::NANO:
75                 return -9;
76             case prefix::PICO:
77                 return -12;
78             case prefix::FEMTO:
79                 return -15;
80             case prefix::ATTO:
81                 return -18;
82             case prefix::ZEPTO:
83                 return -21;
84             case prefix::YOCTO:
85                 return -24;
86             case prefix::RONTO:
87                 return -27;
88             case prefix::QUECTO:
89                 return -30;
90         }
91         return 0;
92     }
.fi
.SS "string prefix::get_name () const"

.PP
Name of the prefix given the prefix_type\&. 
.PP
Definition at line 94 of file prefix\&.cpp\&.
.PP
.nf
95     {
96         switch (prefix_type)
97         {
98             case prefix::QUETTA:
99                 return "quetta";
100             case prefix::RONNA:
101                 return "ronna";
102             case prefix::YOTTA:
103                 return "yotta";
104             case prefix::ZETTA:
105                 return "zetta";
106             case prefix::EXA:
107                 return "exa";
108             case prefix::PETA:
109                 return "peta";
110             case prefix::TERA:
111                 return "tera";
112             case prefix::GIGA:
113                 return "giga";
114             case prefix::MEGA:
115                 return "mega";
116             case prefix::KILO:
117                 return "kilo";
118             case prefix::HECTO:
119                 return "hecto";
120             case prefix::DECA:
121                 return "deca";
122             case prefix::NONE:
123                 return "";
124             case prefix::DECI:
125                 return "deci";
126             case prefix::CENTI:
127                 return "centi";
128             case prefix::MILLI:
129                 return "milli";
130             case prefix::MICRO:
131                 return "micro";
132             case prefix::NANO:
133                 return "nano";
134             case prefix::PICO:
135                 return "pico";
136             case prefix::FEMTO:
137                 return "femto";
138             case prefix::ATTO:
139                 return "atto";
140             case prefix::ZEPTO:
141                 return "zepto";
142             case prefix::YOCTO:
143                 return "yocto";
144             case prefix::RONTO:
145                 return "ronto";
146             case prefix::QUECTO:
147                 return "quecto";
148         }
149         return "";
150     }
.fi
.SS "string prefix::get_symbol () const"

.PP
Symbol of the prefix given the prefix_type\&. The symbol of micro is supported in his Unicode version\&. 
.PP
Definition at line 152 of file prefix\&.cpp\&.
.PP
.nf
153     {
154         switch (prefix_type)
155         {
156             case prefix::QUETTA:
157                 return "Q";
158             case prefix::RONNA:
159                 return "R";
160             case prefix::YOTTA:
161                 return "Y";
162             case prefix::ZETTA:
163                 return "Z";
164             case prefix::EXA:
165                 return "E";
166             case prefix::PETA:
167                 return "P";
168             case prefix::TERA:
169                 return "T";
170             case prefix::GIGA:
171                 return "G";
172             case prefix::MEGA:
173                 return "M";
174             case prefix::KILO:
175                 return "k";
176             case prefix::HECTO:
177                 return "h";
178             case prefix::DECA:
179                 return "da";
180             case prefix::NONE:
181                 return "";
182             case prefix::DECI:
183                 return "d";
184             case prefix::CENTI:
185                 return "c";
186             case prefix::MILLI:
187                 return "m";
188             case prefix::MICRO:
189                 return "\u00B5";
190             case prefix::NANO:
191                 return "n";
192             case prefix::PICO:
193                 return "p";
194             case prefix::FEMTO:
195                 return "f";
196             case prefix::ATTO:
197                 return "a";
198             case prefix::ZEPTO:
199                 return "z";
200             case prefix::YOCTO:
201                 return "y";
202             case prefix::RONTO:
203                 return "r";
204             case prefix::QUECTO:
205                 return "q";
206         }
207         return "";
208     }
.fi
.SS "bool prefix::operator< (const \fBscifir::prefix\fP & x) const"

.PP
This operator allows to order the prefixes from the lower to the greather\&. 
.PP
Definition at line 210 of file prefix\&.cpp\&.
.PP
.nf
211     {
212         return (get_conversion_factor() < x\&.get_conversion_factor());
213     }
.fi
.SS "\fBprefix\fP & prefix::operator= (const \fBprefix\fP & x)"

.PP
Copy assignment\&. The prefix_type is copied from the prefix x\&. 
.PP
Definition at line 24 of file prefix\&.cpp\&.
.PP
.nf
25     {
26         prefix_type = x\&.prefix_type;
27         return *this;
28     }
.fi
.SS "\fBprefix\fP & prefix::operator= (\fBprefix\fP && x)"

.PP
Move assignment\&. The prefix_type is moved from the prefix x\&. 
.PP
Definition at line 30 of file prefix\&.cpp\&.
.PP
.nf
31     {
32         prefix_type = std::move(x\&.prefix_type);
33         return *this;
34     }
.fi
.SH "Member Data Documentation"
.PP 
.SS "prefix::prefix_type"

.PP
It stores the prefix type currently being used\&. 
.PP
Definition at line 33 of file prefix\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
