.TH "scifir::size_3d< T >" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::size_3d< T >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <size_3d\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsize_3d\fP ()"
.br
.ti -1c
.RI "\fBsize_3d\fP (const \fBsize_3d\fP< T > &x)"
.br
.ti -1c
.RI "\fBsize_3d\fP (\fBsize_3d\fP< T > &&x)"
.br
.ti -1c
.RI "\fBsize_3d\fP (const T &new_width, const T &new_height, const T &new_depth)"
.br
.ti -1c
.RI "\fBsize_3d\fP (const string &new_width, const string &new_height, const string &new_depth)"
.br
.ti -1c
.RI "\fBsize_3d\fP (const string &init_size_3d)"
.br
.ti -1c
.RI "\fBsize_3d\fP< T > & \fBoperator=\fP (const \fBsize_3d\fP< T > &x)"
.br
.ti -1c
.RI "\fBsize_3d\fP< T > & \fBoperator=\fP (\fBsize_3d\fP< T > &&x)"
.br
.ti -1c
.RI "\fBsize_3d\fP< T > & \fBoperator=\fP (const string &init_size_3d)"
.br
.ti -1c
.RI "\fBsize_3d\fP< T > \fBoperator+\fP (const \fBsize_3d\fP< T > &x) const"
.br
.ti -1c
.RI "\fBsize_3d\fP< T > \fBoperator\-\fP (const \fBsize_3d\fP< T > &x) const"
.br
.ti -1c
.RI "void \fBoperator+=\fP (const \fBsize_3d\fP< T > &x)"
.br
.ti -1c
.RI "void \fBoperator\-=\fP (const \fBsize_3d\fP< T > &x)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBget_volume\fP () const"
.br
.ti -1c
.RI "string \fBdisplay\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "T \fBwidth\fP"
.br
.ti -1c
.RI "T \fBheight\fP"
.br
.ti -1c
.RI "T \fBdepth\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialize_from_string\fP (const string &init_size_3d)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T = length>
.br
class scifir::size_3d< T >"

.PP
Definition at line 16 of file size_3d\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T  = length> \fBscifir::size_3d\fP< T >::\fBsize_3d\fP ()\fC [inline]\fP"

.PP
Definition at line 19 of file size_3d\&.hpp\&.
.PP
.nf
19                       : width(),height(),depth()
20             {}
.fi
.SS "template<typename T  = length> \fBscifir::size_3d\fP< T >::\fBsize_3d\fP (const \fBsize_3d\fP< T > & x)\fC [inline]\fP"

.PP
Definition at line 22 of file size_3d\&.hpp\&.
.PP
.nf
22                                          : width(x\&.width),height(x\&.height),depth(x\&.depth)
23             {}
.fi
.SS "template<typename T  = length> \fBscifir::size_3d\fP< T >::\fBsize_3d\fP (\fBsize_3d\fP< T > && x)\fC [inline]\fP"

.PP
Definition at line 25 of file size_3d\&.hpp\&.
.PP
.nf
25                                     : width(std::move(x\&.width)),height(std::move(x\&.height)),depth(std::move(x\&.depth))
26             {}
.fi
.SS "template<typename T  = length> \fBscifir::size_3d\fP< T >::\fBsize_3d\fP (const T & new_width, const T & new_height, const T & new_depth)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 28 of file size_3d\&.hpp\&.
.PP
.nf
28                                                                                         : width(new_width),height(new_height),depth(new_depth)
29             {}
.fi
.SS "template<typename T  = length> \fBscifir::size_3d\fP< T >::\fBsize_3d\fP (const string & new_width, const string & new_height, const string & new_depth)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 31 of file size_3d\&.hpp\&.
.PP
.nf
31                                                                                                        : width(new_width),height(new_height),depth(new_depth)
32             {}
.fi
.SS "template<typename T  = length> \fBscifir::size_3d\fP< T >::\fBsize_3d\fP (const string & init_size_3d)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 34 of file size_3d\&.hpp\&.
.PP
.nf
34                                                          : size_3d()
35             {
36                 initialize_from_string(init_size_3d);
37             }
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<typename T  = length> string \fBscifir::size_3d\fP< T >::display () const\fC [inline]\fP"

.PP
Definition at line 90 of file size_3d\&.hpp\&.
.PP
.nf
91             {
92                 ostringstream output;
93                 output << width << " * " << height << " * " << depth;
94                 return output\&.str();
95             }
.fi
.SS "template<typename T  = length> \fBscalar_unit\fP \fBscifir::size_3d\fP< T >::get_volume () const\fC [inline]\fP"

.PP
Definition at line 85 of file size_3d\&.hpp\&.
.PP
.nf
86             {
87                 return scalar_unit(width * height * depth);
88             }
.fi
.SS "template<typename T  = length> void \fBscifir::size_3d\fP< T >::initialize_from_string (const string & init_size_3d)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 102 of file size_3d\&.hpp\&.
.PP
.nf
103             {
104                 vector<string> widths;
105                 boost::split(widths,init_size_3d,boost::is_any_of("*"));
106                 if (widths\&.size() == 3)
107                 {
108                     boost::trim(widths[0]);
109                     boost::trim(widths[1]);
110                     boost::trim(widths[2]);
111                     width = T(widths[0]);
112                     height = T(widths[1]);
113                     depth = T(widths[2]);
114                 }
115             }
.fi
.SS "template<typename T  = length> \fBsize_3d\fP<T> \fBscifir::size_3d\fP< T >::operator+ (const \fBsize_3d\fP< T > & x) const\fC [inline]\fP"

.PP
Definition at line 61 of file size_3d\&.hpp\&.
.PP
.nf
62             {
63                 return size_3d<T>(width + x\&.width,height + x\&.height,depth + x\&.depth);
64             }
.fi
.SS "template<typename T  = length> void \fBscifir::size_3d\fP< T >::operator+= (const \fBsize_3d\fP< T > & x)\fC [inline]\fP"

.PP
Definition at line 71 of file size_3d\&.hpp\&.
.PP
.nf
72             {
73                 width += x\&.width;
74                 height += x\&.height;
75                 depth += x\&.depth;
76             }
.fi
.SS "template<typename T  = length> \fBsize_3d\fP<T> \fBscifir::size_3d\fP< T >::operator\- (const \fBsize_3d\fP< T > & x) const\fC [inline]\fP"

.PP
Definition at line 66 of file size_3d\&.hpp\&.
.PP
.nf
67             {
68                 return size_3d<T>(width - x\&.width,height - x\&.height,depth - x\&.depth);
69             }
.fi
.SS "template<typename T  = length> void \fBscifir::size_3d\fP< T >::operator\-= (const \fBsize_3d\fP< T > & x)\fC [inline]\fP"

.PP
Definition at line 78 of file size_3d\&.hpp\&.
.PP
.nf
79             {
80                 width -= x\&.width;
81                 height -= x\&.height;
82                 depth -= x\&.depth;
83             }
.fi
.SS "template<typename T  = length> \fBsize_3d\fP<T>& \fBscifir::size_3d\fP< T >::operator= (const \fBsize_3d\fP< T > & x)\fC [inline]\fP"

.PP
Definition at line 39 of file size_3d\&.hpp\&.
.PP
.nf
40             {
41                 width = x\&.width;
42                 height = x\&.height;
43                 depth = x\&.depth;
44                 return *this;
45             }
.fi
.SS "template<typename T  = length> \fBsize_3d\fP<T>& \fBscifir::size_3d\fP< T >::operator= (const string & init_size_3d)\fC [inline]\fP"

.PP
Definition at line 55 of file size_3d\&.hpp\&.
.PP
.nf
56             {
57                 initialize_from_string(init_size_3d);
58                 return *this;
59             }
.fi
.SS "template<typename T  = length> \fBsize_3d\fP<T>& \fBscifir::size_3d\fP< T >::operator= (\fBsize_3d\fP< T > && x)\fC [inline]\fP"

.PP
Definition at line 47 of file size_3d\&.hpp\&.
.PP
.nf
48             {
49                 width = std::move(x\&.width);
50                 height = std::move(x\&.height);
51                 depth = std::move(x\&.depth);
52                 return *this;
53             }
.fi
.SH "Member Data Documentation"
.PP 
.SS "template<typename T  = length> T \fBscifir::size_3d\fP< T >::depth"

.PP
Definition at line 99 of file size_3d\&.hpp\&.
.SS "template<typename T  = length> T \fBscifir::size_3d\fP< T >::height"

.PP
Definition at line 98 of file size_3d\&.hpp\&.
.SS "template<typename T  = length> T \fBscifir::size_3d\fP< T >::width"

.PP
Definition at line 97 of file size_3d\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
