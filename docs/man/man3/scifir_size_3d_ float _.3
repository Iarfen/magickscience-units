.TH "scifir::size_3d< float >" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::size_3d< float >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <size_3d\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsize_3d\fP ()"
.br
.ti -1c
.RI "\fBsize_3d\fP (const \fBsize_3d\fP< float > &x)"
.br
.ti -1c
.RI "\fBsize_3d\fP (\fBsize_3d\fP< float > &&x)"
.br
.ti -1c
.RI "\fBsize_3d\fP (const float &new_width, const float &new_height, const float &new_depth)"
.br
.ti -1c
.RI "\fBsize_3d\fP (const string &new_width, const string &new_height, const string &new_depth)"
.br
.ti -1c
.RI "\fBsize_3d\fP (const string &init_size_3d)"
.br
.ti -1c
.RI "\fBsize_3d\fP< float > & \fBoperator=\fP (const \fBsize_3d\fP< float > &x)"
.br
.ti -1c
.RI "\fBsize_3d\fP< float > & \fBoperator=\fP (\fBsize_3d\fP< float > &&x)"
.br
.ti -1c
.RI "\fBsize_3d\fP< float > & \fBoperator=\fP (const string &init_size_3d)"
.br
.ti -1c
.RI "\fBsize_3d\fP< float > \fBoperator+\fP (const \fBsize_3d\fP< float > &x) const"
.br
.ti -1c
.RI "\fBsize_3d\fP< float > \fBoperator\-\fP (const \fBsize_3d\fP< float > &x) const"
.br
.ti -1c
.RI "void \fBoperator+=\fP (const \fBsize_3d\fP< float > &x)"
.br
.ti -1c
.RI "void \fBoperator\-=\fP (const \fBsize_3d\fP< float > &x)"
.br
.ti -1c
.RI "float \fBget_volume\fP () const"
.br
.ti -1c
.RI "string \fBdisplay\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "float \fBwidth\fP"
.br
.ti -1c
.RI "float \fBheight\fP"
.br
.ti -1c
.RI "float \fBdepth\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialize_from_string\fP (const string &init_size_3d)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 119 of file size_3d\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBscifir::size_3d\fP< float >::\fBsize_3d\fP ()\fC [inline]\fP"

.PP
Definition at line 122 of file size_3d\&.hpp\&.
.PP
.nf
122                       : width(),height(),depth()
123             {}
.fi
.SS "\fBscifir::size_3d\fP< float >::\fBsize_3d\fP (const \fBsize_3d\fP< float > & x)\fC [inline]\fP"

.PP
Definition at line 125 of file size_3d\&.hpp\&.
.PP
.nf
125                                              : width(x\&.width),height(x\&.height),depth(x\&.depth)
126             {}
.fi
.SS "\fBscifir::size_3d\fP< float >::\fBsize_3d\fP (\fBsize_3d\fP< float > && x)\fC [inline]\fP"

.PP
Definition at line 128 of file size_3d\&.hpp\&.
.PP
.nf
128                                         : width(std::move(x\&.width)),height(std::move(x\&.height)),depth(std::move(x\&.depth))
129             {}
.fi
.SS "\fBscifir::size_3d\fP< float >::\fBsize_3d\fP (const float & new_width, const float & new_height, const float & new_depth)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 131 of file size_3d\&.hpp\&.
.PP
.nf
131                                                                                                     : width(new_width),height(new_height),depth(new_depth)
132             {}
.fi
.SS "\fBscifir::size_3d\fP< float >::\fBsize_3d\fP (const string & new_width, const string & new_height, const string & new_depth)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 134 of file size_3d\&.hpp\&.
.PP
.nf
134                                                                                                        : width(stof(new_width)),height(stof(new_height)),depth(stof(new_depth))
135             {}
.fi
.SS "\fBscifir::size_3d\fP< float >::\fBsize_3d\fP (const string & init_size_3d)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 137 of file size_3d\&.hpp\&.
.PP
.nf
137                                                          : size_3d()
138             {
139                 initialize_from_string(init_size_3d);
140             }
.fi
.SH "Member Function Documentation"
.PP 
.SS "string \fBscifir::size_3d\fP< float >::display () const\fC [inline]\fP"

.PP
Definition at line 193 of file size_3d\&.hpp\&.
.PP
.nf
194             {
195                 ostringstream output;
196                 output << display_float(width,2) << " * " << display_float(height,2) << " * " << display_float(depth,2);
197                 return output\&.str();
198             }
.fi
.SS "float \fBscifir::size_3d\fP< float >::get_volume () const\fC [inline]\fP"

.PP
Definition at line 188 of file size_3d\&.hpp\&.
.PP
.nf
189             {
190                 return width * height * depth;
191             }
.fi
.SS "void \fBscifir::size_3d\fP< float >::initialize_from_string (const string & init_size_3d)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 205 of file size_3d\&.hpp\&.
.PP
.nf
206             {
207                 vector<string> widths;
208                 boost::split(widths,init_size_3d,boost::is_any_of("*"));
209                 if (widths\&.size() == 3)
210                 {
211                     boost::trim(widths[0]);
212                     boost::trim(widths[1]);
213                     boost::trim(widths[2]);
214                     width = stof(widths[0]);
215                     height = stof(widths[1]);
216                     depth = stof(widths[2]);
217                 }
218             }
.fi
.SS "\fBsize_3d\fP<float> \fBscifir::size_3d\fP< float >::operator+ (const \fBsize_3d\fP< float > & x) const\fC [inline]\fP"

.PP
Definition at line 164 of file size_3d\&.hpp\&.
.PP
.nf
165             {
166                 return size_3d<float>(width + x\&.width,height + x\&.height,depth + x\&.depth);
167             }
.fi
.SS "void \fBscifir::size_3d\fP< float >::operator+= (const \fBsize_3d\fP< float > & x)\fC [inline]\fP"

.PP
Definition at line 174 of file size_3d\&.hpp\&.
.PP
.nf
175             {
176                 width += x\&.width;
177                 height += x\&.height;
178                 depth += x\&.depth;
179             }
.fi
.SS "\fBsize_3d\fP<float> \fBscifir::size_3d\fP< float >::operator\- (const \fBsize_3d\fP< float > & x) const\fC [inline]\fP"

.PP
Definition at line 169 of file size_3d\&.hpp\&.
.PP
.nf
170             {
171                 return size_3d<float>(width - x\&.width,height - x\&.height,depth - x\&.depth);
172             }
.fi
.SS "void \fBscifir::size_3d\fP< float >::operator\-= (const \fBsize_3d\fP< float > & x)\fC [inline]\fP"

.PP
Definition at line 181 of file size_3d\&.hpp\&.
.PP
.nf
182             {
183                 width -= x\&.width;
184                 height -= x\&.height;
185                 depth -= x\&.depth;
186             }
.fi
.SS "\fBsize_3d\fP<float>& \fBscifir::size_3d\fP< float >::operator= (const \fBsize_3d\fP< float > & x)\fC [inline]\fP"

.PP
Definition at line 142 of file size_3d\&.hpp\&.
.PP
.nf
143             {
144                 width = x\&.width;
145                 height = x\&.height;
146                 depth = x\&.depth;
147                 return *this;
148             }
.fi
.SS "\fBsize_3d\fP<float>& \fBscifir::size_3d\fP< float >::operator= (const string & init_size_3d)\fC [inline]\fP"

.PP
Definition at line 158 of file size_3d\&.hpp\&.
.PP
.nf
159             {
160                 initialize_from_string(init_size_3d);
161                 return *this;
162             }
.fi
.SS "\fBsize_3d\fP<float>& \fBscifir::size_3d\fP< float >::operator= (\fBsize_3d\fP< float > && x)\fC [inline]\fP"

.PP
Definition at line 150 of file size_3d\&.hpp\&.
.PP
.nf
151             {
152                 width = std::move(x\&.width);
153                 height = std::move(x\&.height);
154                 depth = std::move(x\&.depth);
155                 return *this;
156             }
.fi
.SH "Member Data Documentation"
.PP 
.SS "float \fBscifir::size_3d\fP< float >::depth"

.PP
Definition at line 202 of file size_3d\&.hpp\&.
.SS "float \fBscifir::size_3d\fP< float >::height"

.PP
Definition at line 201 of file size_3d\&.hpp\&.
.SS "float \fBscifir::size_3d\fP< float >::width"

.PP
Definition at line 200 of file size_3d\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
