.TH "scifir::size_nd< T >" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scifir::size_nd< T >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <size_nd\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsize_nd\fP ()"
.br
.ti -1c
.RI "\fBsize_nd\fP (\fBconst\fP \fBsize_nd\fP< T > &x)"
.br
.ti -1c
.RI "\fBsize_nd\fP (\fBsize_nd\fP< T > &&x)"
.br
.ti -1c
.RI "\fBsize_nd\fP (\fBconst\fP vector< T > &\fBnew_widths\fP)"
.br
.ti -1c
.RI "\fBsize_nd\fP (\fBconst\fP vector< \fBstring\fP > &\fBnew_widths\fP)"
.br
.ti -1c
.RI "\fBsize_nd\fP (\fBconst\fP \fBstring\fP &\fBinit_size_nd\fP)"
.br
.ti -1c
.RI "\fBsize_nd\fP< T > & \fBoperator=\fP (\fBconst\fP \fBsize_nd\fP< T > &x)"
.br
.ti -1c
.RI "\fBsize_nd\fP< T > & \fBoperator=\fP (\fBsize_nd\fP< T > &&x)"
.br
.ti -1c
.RI "\fBsize_nd\fP< T > & \fBoperator=\fP (\fBconst\fP \fBstring\fP &\fBinit_size_nd\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBis_nd\fP (\fBint\fP \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBint\fP \fBget_nd\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsize_nd\fP< T > \fBoperator+\fP (\fBconst\fP \fBsize_nd\fP< T > &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBsize_nd\fP< T > \fBoperator\-\fP (\fBconst\fP \fBsize_nd\fP< T > &x) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator+=\fP (\fBconst\fP \fBsize_nd\fP< T > &x)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator\-=\fP (\fBconst\fP \fBsize_nd\fP< T > &x)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBget_volume_nd\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBdisplay\fP () \fBconst\fP"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "vector< T > \fBwidths\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBinitialize_from_string\fP (\fBconst\fP \fBstring\fP &\fBinit_size_nd\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<\fBtypename\fP T = length>
.br
class scifir::size_nd< T >"
.PP
Definition at line \fB17\fP of file \fBsize_nd\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBtypename\fP T  = length> \fBscifir::size_nd\fP< T >::size_nd ()\fC [inline]\fP"

.PP
Definition at line \fB20\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
20                       : widths()
21             {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::size_nd\fP< T >::size_nd (\fBconst\fP \fBsize_nd\fP< T > & x)\fC [inline]\fP"

.PP
Definition at line \fB23\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
23                                          : widths(x\&.widths)
24             {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::size_nd\fP< T >::size_nd (\fBsize_nd\fP< T > && x)\fC [inline]\fP"

.PP
Definition at line \fB26\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
26                                     : widths(std::move(x\&.widths))
27             {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::size_nd\fP< T >::size_nd (\fBconst\fP vector< T > & new_widths)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line \fB29\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
29                                                           : widths(new_widths)
30             {}
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::size_nd\fP< T >::size_nd (\fBconst\fP vector< \fBstring\fP > & new_widths)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line \fB32\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
32                                                                : widths()
33             {
34                 for (const string& new_width : new_widths)
35                 {
36                     widths\&.push_back(T(new_width));
37                 }
38             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBscifir::size_nd\fP< T >::size_nd (\fBconst\fP \fBstring\fP & init_size_nd)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line \fB40\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
40                                                          : size_nd()
41             {
42                 initialize_from_string(init_size_nd);
43             }
.fi

.SH "Member Function Documentation"
.PP 
.SS "template<\fBtypename\fP T  = length> \fBstring\fP \fBscifir::size_nd\fP< T >::display () const\fC [inline]\fP"

.PP
Definition at line \fB140\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
141             {
142                 if (widths\&.size() > 0)
143                 {
144                     ostringstream output;
145                     output << widths[0];
146                     for (int i = 1; i < widths\&.size(); i++)
147                     {
148                         output << " * " << widths[i];
149                     }
150                     return output\&.str();
151                 }
152                 else
153                 {
154                     return "[empty]";
155                 }
156             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBint\fP \fBscifir::size_nd\fP< T >::get_nd () const\fC [inline]\fP"

.PP
Definition at line \fB68\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
69             {
70                 return widths\&.size();
71             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBscalar_unit\fP \fBscifir::size_nd\fP< T >::get_volume_nd () const\fC [inline]\fP"

.PP
Definition at line \fB129\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
130             {
131                 vector<dimension> new_dimensions = create_dimensions(widths[0]\&.get_dimensions()[0]\&.get_symbol() + std::to_string(get_nd()));
132                 float new_value = 1;
133                 for (int i = 0; i < widths\&.size(); i++)
134                 {
135                     new_value *= widths[i]\&.get_value();
136                 }
137                 return scalar_unit(new_value,new_dimensions);
138             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::size_nd\fP< T >::initialize_from_string (\fBconst\fP \fBstring\fP & init_size_nd)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB161\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
162             {
163                 widths\&.clear();
164                 vector<string> new_widths;
165                 boost::split(new_widths,init_size_nd,boost::is_any_of("*"));
166                 for (string& new_width : new_widths)
167                 {
168                     boost::trim(new_width);
169                     widths\&.push_back(T(new_width));
170                 }
171             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBbool\fP \fBscifir::size_nd\fP< T >::is_nd (\fBint\fP i) const\fC [inline]\fP"

.PP
Definition at line \fB63\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
64             {
65                 return widths\&.size() == i;
66             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBsize_nd\fP< T > \fBscifir::size_nd\fP< T >::operator+ (\fBconst\fP \fBsize_nd\fP< T > & x) const\fC [inline]\fP"

.PP
Definition at line \fB73\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
74             {
75                 if (get_nd() == x\&.get_nd())
76                 {
77                     vector<T> new_widths = widths;
78                     for (int i = 0; i < new_widths\&.size(); i++)
79                     {
80                         new_widths[i] += x\&.widths[i];
81                     }
82                     return size_nd<T>(new_widths);
83                 }
84                 else
85                 {
86                     return size_nd<T>();
87                 }
88             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::size_nd\fP< T >::operator+= (\fBconst\fP \fBsize_nd\fP< T > & x)\fC [inline]\fP"

.PP
Definition at line \fB107\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
108             {
109                 if (get_nd() == x\&.get_nd())
110                 {
111                     for (int i = 0; i < widths\&.size(); i++)
112                     {
113                         widths[i] += x\&.widths[i];
114                     }
115                 }
116             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBsize_nd\fP< T > \fBscifir::size_nd\fP< T >::operator\- (\fBconst\fP \fBsize_nd\fP< T > & x) const\fC [inline]\fP"

.PP
Definition at line \fB90\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
91             {
92                 if (get_nd() == x\&.get_nd())
93                 {
94                     vector<T> new_widths = widths;
95                     for (int i = 0; i < new_widths\&.size(); i++)
96                     {
97                         new_widths[i] \-= x\&.widths[i];
98                     }
99                     return size_nd<T>(new_widths);
100                 }
101                 else
102                 {
103                     return size_nd<T>();
104                 }
105             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBvoid\fP \fBscifir::size_nd\fP< T >::operator\-= (\fBconst\fP \fBsize_nd\fP< T > & x)\fC [inline]\fP"

.PP
Definition at line \fB118\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
119             {
120                 if (get_nd() == x\&.get_nd())
121                 {
122                     for (int i = 0; i < widths\&.size(); i++)
123                     {
124                         widths[i] \-= x\&.widths[i];
125                     }
126                 }
127             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBsize_nd\fP< T > & \fBscifir::size_nd\fP< T >::operator= (\fBconst\fP \fBsize_nd\fP< T > & x)\fC [inline]\fP"

.PP
Definition at line \fB45\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
46             {
47                 widths = x\&.widths;
48                 return *this;
49             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBsize_nd\fP< T > & \fBscifir::size_nd\fP< T >::operator= (\fBconst\fP \fBstring\fP & init_size_nd)\fC [inline]\fP"

.PP
Definition at line \fB57\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
58             {
59                 initialize_from_string(init_size_nd);
60                 return *this;
61             }
.fi

.SS "template<\fBtypename\fP T  = length> \fBsize_nd\fP< T > & \fBscifir::size_nd\fP< T >::operator= (\fBsize_nd\fP< T > && x)\fC [inline]\fP"

.PP
Definition at line \fB51\fP of file \fBsize_nd\&.hpp\fP\&..PP
.nf
52             {
53                 widths = std::move(x\&.widths);
54                 return *this;
55             }
.fi

.SH "Member Data Documentation"
.PP 
.SS "template<\fBtypename\fP T  = length> vector<T> \fBscifir::size_nd\fP< T >::widths"

.PP
Definition at line \fB158\fP of file \fBsize_nd\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
