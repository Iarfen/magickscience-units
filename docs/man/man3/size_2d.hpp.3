.TH "special_units/size_2d.hpp" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
special_units/size_2d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./predefined_units/space_units\&.hpp'\fP
.br
\fC#include '\&.\&./util/types\&.hpp'\fP
.br
\fC#include 'boost/algorithm/string\&.hpp'\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::size_2d< T >\fP"
.br
.ti -1c
.RI "class \fBscifir::size_2d< float >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<\fBtypename\fP T > \fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBsize_2d\fP< T > &x)"
.br
.ti -1c
.RI "\fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBsize_2d\fP< \fBfloat\fP > &x)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBscifir::size_2d\fP< T > &x, const \fBscifir::size_2d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBscifir::size_2d\fP< T > &x, const \fBscifir::size_2d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const \fBscifir::size_2d\fP< T > &x, const string &init_size_2d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const \fBscifir::size_2d\fP< T > &x, const string &init_size_2d)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator==\fP (const string &init_size_2d, const \fBscifir::size_2d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > bool \fBoperator!=\fP (const string &init_size_2d, const \fBscifir::size_2d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > void \fBoperator+=\fP (string &x, const \fBscifir::size_2d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const string &x, const \fBscifir::size_2d\fP< T > &y)"
.br
.ti -1c
.RI "template<typename T > string \fBoperator+\fP (const \fBscifir::size_2d\fP< T > &x, const string &y)"
.br
.ti -1c
.RI "template<typename T > ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::size_2d\fP< T > &x)"
.br
.ti -1c
.RI "template<typename T > istream & \fBoperator>>\fP (istream &is, \fBscifir::size_2d\fP< T > &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename T > bool operator!= (const \fBscifir::size_2d\fP< T > & x, const \fBscifir::size_2d\fP< T > & y)"

.PP
Definition at line \fB230\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
231 {
232     return !(x == y);
233 }
.fi

.SS "template<typename T > bool operator!= (const \fBscifir::size_2d\fP< T > & x, const string & init_size_2d)"

.PP
Definition at line \fB243\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
244 {
245     return !(x == init_size_2d);
246 }
.fi

.SS "template<typename T > bool operator!= (const string & init_size_2d, const \fBscifir::size_2d\fP< T > & x)"

.PP
Definition at line \fB256\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
257 {
258     return !(init_size_2d == x);
259 }
.fi

.SS "template<typename T > string operator+ (const \fBscifir::size_2d\fP< T > & x, const string & y)"

.PP
Definition at line \fB274\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
275 {
276     return to_string(x) + y;
277 }
.fi

.SS "template<typename T > string operator+ (const string & x, const \fBscifir::size_2d\fP< T > & y)"

.PP
Definition at line \fB268\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
269 {
270     return x + to_string(y);
271 }
.fi

.SS "template<typename T > void operator+= (string & x, const \fBscifir::size_2d\fP< T > & y)"

.PP
Definition at line \fB262\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
263 {
264     x += to_string(y);
265 }
.fi

.SS "template<typename T > ostream & operator<< (ostream & os, const \fBscifir::size_2d\fP< T > & x)"

.PP
Definition at line \fB280\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
281 {
282     return os << to_string(x);
283 }
.fi

.SS "template<typename T > bool operator== (const \fBscifir::size_2d\fP< T > & x, const \fBscifir::size_2d\fP< T > & y)"

.PP
Definition at line \fB217\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
218 {
219     if (x\&.width == y\&.width and x\&.height == y\&.height)
220     {
221         return true;
222     }
223     else
224     {
225         return false;
226     }
227 }
.fi

.SS "template<typename T > bool operator== (const \fBscifir::size_2d\fP< T > & x, const string & init_size_2d)"

.PP
Definition at line \fB236\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
237 {
238     scifir::size_2d<T> y(init_size_2d);
239     return (x == y);
240 }
.fi

.SS "template<typename T > bool operator== (const string & init_size_2d, const \fBscifir::size_2d\fP< T > & x)"

.PP
Definition at line \fB249\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
250 {
251     scifir::size_2d<T> y(init_size_2d);
252     return (x == y);
253 }
.fi

.SS "template<typename T > istream & operator>> (istream & is, \fBscifir::size_2d\fP< T > & x)"

.PP
Definition at line \fB286\fP of file \fBsize_2d\&.hpp\fP\&..PP
.nf
287 {
288     char a[256];
289     is\&.getline(a, 256);
290     string b(a);
291     x = scifir::size_2d<T>(b);
292     return is;
293 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
