.TH "units/vector_unit_2d.cpp" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
units/vector_unit_2d.cpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&./vector_unit_2d\&.hpp'\fP
.br
\fC#include '\&.\&./coordinates/coordinates_2d\&.hpp'\fP
.br
\fC#include '\&.\&./util/types\&.hpp'\fP
.br
\fC#include 'boost/algorithm/string\&.hpp'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBscalar_unit\fP \fBscifir::norm\fP (\fBconst\fP \fBvector_unit_2d\fP &x)"
.br
.ti -1c
.RI "\fBvector_unit_2d\fP \fBscifir::sqrt\fP (\fBconst\fP \fBvector_unit_2d\fP &x)"
.br
.ti -1c
.RI "\fBvector_unit_2d\fP \fBscifir::sqrt_nth\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBint\fP index)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBscifir::dot_product\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBangle\fP \fBscifir::angle_between\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBbool\fP \fBscifir::same_direction\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBbool\fP \fBscifir::parallel\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBbool\fP \fBscifir::orthogonal\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBscifir::vector_unit_2d\fP \fBoperator*\fP (const \fBscifir::scalar_unit\fP &x, const \fBscifir::vector_unit_2d\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::vector_unit_2d\fP &x, const \fBscifir::vector_unit_2d\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::vector_unit_2d\fP &x, const string &init_vector_2d)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::vector_unit_2d\fP &x, const string &init_vector_2d)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const string &init_vector_2d, const \fBscifir::vector_unit_2d\fP &x)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const string &init_vector_2d, const \fBscifir::vector_unit_2d\fP &x)"
.br
.ti -1c
.RI "void \fBoperator+=\fP (string &x, const \fBscifir::vector_unit_2d\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const string &x, const \fBscifir::vector_unit_2d\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const \fBscifir::vector_unit_2d\fP &y, const string &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::vector_unit_2d\fP &x)"
.br
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBscifir::vector_unit_2d\fP &x)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool operator!= (const \fBscifir::vector_unit_2d\fP & x, const \fBscifir::vector_unit_2d\fP & y)"

.PP
Definition at line \fB373\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
374 {
375     return !(x == y);
376 }
.fi

.SS "bool operator!= (const \fBscifir::vector_unit_2d\fP & x, const string & init_vector_2d)"

.PP
Definition at line \fB384\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
385 {
386     return !(x == init_vector_2d);
387 }
.fi

.SS "bool operator!= (const string & init_vector_2d, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB395\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
396 {
397     return !(init_vector_2d == x);
398 }
.fi

.SS "\fBscifir::vector_unit_2d\fP operator* (const \fBscifir::scalar_unit\fP & x, const \fBscifir::vector_unit_2d\fP & y)"

.PP
Definition at line \fB366\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
367 {
368     long double new_value = x\&.get_value() * y\&.get_value();
369     vector<scifir::dimension> new_dimensions = multiply_dimensions(x\&.get_dimensions(), y\&.get_dimensions(),new_value);
370     return scifir::vector_unit_2d(float(new_value), new_dimensions, y\&.theta);
371 }
.fi

.SS "string operator+ (const \fBscifir::vector_unit_2d\fP & y, const string & x)"

.PP
Definition at line \fB415\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
416 {
417     ostringstream output;
418     output << y;
419     output << x;
420     return output\&.str();
421 }
.fi

.SS "string operator+ (const string & x, const \fBscifir::vector_unit_2d\fP & y)"

.PP
Definition at line \fB407\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
408 {
409     ostringstream output;
410     output << x;
411     output << y;
412     return output\&.str();
413 }
.fi

.SS "void operator+= (string & x, const \fBscifir::vector_unit_2d\fP & y)"

.PP
Definition at line \fB400\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
401 {
402     ostringstream output;
403     output << y;
404     x += output\&.str();
405 }
.fi

.SS "ostream & operator<< (ostream & os, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB423\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
424 {
425     return os << to_string(x);
426 }
.fi

.SS "bool operator== (const \fBscifir::vector_unit_2d\fP & x, const string & init_vector_2d)"

.PP
Definition at line \fB378\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
379 {
380     scifir::vector_unit_2d y(init_vector_2d);
381     return (x == y);
382 }
.fi

.SS "bool operator== (const string & init_vector_2d, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB389\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
390 {
391     scifir::vector_unit_2d y(init_vector_2d);
392     return (y == x);
393 }
.fi

.SS "istream & operator>> (istream & is, \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB428\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
429 {
430     char a[256];
431     is\&.getline(a, 256);
432     string b(a);
433     boost::trim(b);
434     x = scifir::vector_unit_2d(b);
435     return is;
436 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
