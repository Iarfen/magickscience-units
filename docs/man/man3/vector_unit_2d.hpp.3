.TH "units/vector_unit_2d.hpp" 3 "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
units/vector_unit_2d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./units/scalar_unit\&.hpp'\fP
.br
\fC#include '\&.\&./meca_number/angle\&.hpp'\fP
.br
\fC#include '\&.\&./util/is_number\&.hpp'\fP
.br
\fC#include '\&.\&./topology/direction\&.hpp'\fP
.br
\fC#include 'boost/algorithm/string\&.hpp'\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::vector_unit_2d\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBVECTOR_UNIT_2D_HPP_BEGIN\fP(name)"
.br
.ti -1c
.RI "#define \fBVECTOR_UNIT_2D_HPP_END\fP()"
.br
.ti -1c
.RI "#define \fBVECTOR_UNIT_2D_HPP\fP(name)"
.br
.ti -1c
.RI "#define \fBVECTOR_UNIT_2D_CPP\fP(name,  init_dimensions)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBstring\fP \fBscifir::to_string\fP (\fBconst\fP \fBvector_unit_2d\fP &x)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBscifir::norm\fP (\fBconst\fP \fBvector_unit_2d\fP &x)"
.br
.ti -1c
.RI "\fBvector_unit_2d\fP \fBscifir::sqrt\fP (\fBconst\fP \fBvector_unit_2d\fP &x)"
.br
.ti -1c
.RI "\fBvector_unit_2d\fP \fBscifir::sqrt_nth\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBint\fP index)"
.br
.ti -1c
.RI "\fBscalar_unit\fP \fBscifir::dot_product\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBangle\fP \fBscifir::angle_between\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBbool\fP \fBscifir::same_direction\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBbool\fP \fBscifir::parallel\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBbool\fP \fBscifir::orthogonal\fP (\fBconst\fP \fBvector_unit_2d\fP &x, \fBconst\fP \fBvector_unit_2d\fP &y)"
.br
.ti -1c
.RI "\fBscifir::vector_unit_2d\fP \fBoperator*\fP (const \fBscifir::scalar_unit\fP &x, const \fBscifir::vector_unit_2d\fP &y)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_2d\fP \fBoperator+\fP (const T y, const \fBscifir::vector_unit_2d\fP &x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_2d\fP \fBoperator\-\fP (const T y, const \fBscifir::vector_unit_2d\fP &x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_2d\fP \fBoperator*\fP (const T y, const \fBscifir::vector_unit_2d\fP &x)"
.br
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_2d\fP \fBoperator/\fP (const T y, const \fBscifir::vector_unit_2d\fP &x)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::vector_unit_2d\fP &x, const \fBscifir::vector_unit_2d\fP &y)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::vector_unit_2d\fP &, const string &init_vector_2d)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::vector_unit_2d\fP &, const string &init_vector_2d)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const string &init_vector_2d, const \fBscifir::vector_unit_2d\fP &)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const string &init_vector_2d, const \fBscifir::vector_unit_2d\fP &)"
.br
.ti -1c
.RI "void \fBoperator+=\fP (string &x, const \fBscifir::vector_unit_2d\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const string &x, const \fBscifir::vector_unit_2d\fP &y)"
.br
.ti -1c
.RI "string \fBoperator+\fP (const \fBscifir::vector_unit_2d\fP &y, const string &x)"
.br
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::vector_unit_2d\fP &x)"
.br
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBscifir::vector_unit_2d\fP &x)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define VECTOR_UNIT_2D_CPP(name, init_dimensions)"
\fBValue:\fP.PP
.nf
    name##_2d::name##_2d() : vector_unit_2d() {} \\
    name##_2d::name##_2d(const name##_2d& x) : vector_unit_2d(x) {} \\
    name##_2d::name##_2d(name##_2d&& x) : vector_unit_2d(std::move(x)) {} \\
const string name##_2d::dimensions_match = init_dimensions; \\
const vector<dimension> name##_2d::real_dimensions = create_derived_dimensions(init_dimensions)
.fi

.PP
Definition at line \fB45\fP of file \fBvector_unit_2d\&.hpp\fP\&..PP
.nf
45                                                                       : vector_unit_2d() {} \\
46     name##_2d::name##_2d(const name##_2d& x) : vector_unit_2d(x) {} \\
47     name##_2d::name##_2d(name##_2d&& x) : vector_unit_2d(std::move(x)) {} \\
48 const string name##_2d::dimensions_match = init_dimensions; \\
49 const vector<dimension> name##_2d::real_dimensions = create_derived_dimensions(init_dimensions)
.fi

.SS "#define VECTOR_UNIT_2D_HPP(name)"
\fBValue:\fP.PP
.nf
    class name##_2d : public vector_unit_2d \\
    {   \\
        public: \\
            using vector_unit_2d::vector_unit_2d; \\
            name##_2d(); \\
            name##_2d(const name##_2d&); \\
            name##_2d(name##_2d&&); \\
            using vector_unit_2d::operator=; \\
            using vector_unit_2d::operator+=; \\
            using vector_unit_2d::operator\-=; \\
\\
            static const string dimensions_match; \\
            static const vector<dimension> real_dimensions; \\
    }
.fi

.PP
Definition at line \fB30\fP of file \fBvector_unit_2d\&.hpp\fP\&..PP
.nf
30                                                  : public vector_unit_2d \\
31     {   \\
32         public: \\
33             using vector_unit_2d::vector_unit_2d; \\
34             name##_2d(); \\
35             name##_2d(const name##_2d&); \\
36             name##_2d(name##_2d&&); \\
37             using vector_unit_2d::operator=; \\
38             using vector_unit_2d::operator+=; \\
39             using vector_unit_2d::operator\-=; \\
40 \\
41             static const string dimensions_match; \\
42             static const vector<dimension> real_dimensions; \\
43     }
.fi

.SS "#define VECTOR_UNIT_2D_HPP_BEGIN(name)"
\fBValue:\fP.PP
.nf
    class name##_2d : public vector_unit_2d \\
    {   \\
        public: \\
            using vector_unit_2d::vector_unit_2d; \\
            name##_2d(); \\
            name##_2d(const name##_2d&); \\
            name##_2d(name##_2d&&); \\
            using vector_unit_2d::operator=; \\
            using vector_unit_2d::operator+=; \\
            using vector_unit_2d::operator\-=
.fi

.PP
Definition at line \fB14\fP of file \fBvector_unit_2d\&.hpp\fP\&..PP
.nf
14                                                        : public vector_unit_2d \\
15     {   \\
16         public: \\
17             using vector_unit_2d::vector_unit_2d; \\
18             name##_2d(); \\
19             name##_2d(const name##_2d&); \\
20             name##_2d(name##_2d&&); \\
21             using vector_unit_2d::operator=; \\
22             using vector_unit_2d::operator+=; \\
23             using vector_unit_2d::operator\-=
.fi

.SS "#define VECTOR_UNIT_2D_HPP_END()"
\fBValue:\fP.PP
.nf
        public: \\
        static const string dimensions_match; \\
        static const vector<dimension> real_dimensions; \\
    }
.fi

.PP
Definition at line \fB25\fP of file \fBvector_unit_2d\&.hpp\fP\&..PP
.nf
25                                        : \\
26         static const string dimensions_match; \\
27         static const vector<dimension> real_dimensions; \\
28     }
.fi

.SH "Function Documentation"
.PP 
.SS "bool operator!= (const \fBscifir::vector_unit_2d\fP & x, const string & init_vector_2d)"

.PP
Definition at line \fB384\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
385 {
386     return !(x == init_vector_2d);
387 }
.fi

.SS "bool operator!= (const \fBscifir::vector_unit_2d\fP & x, const \fBscifir::vector_unit_2d\fP & y)"

.PP
Definition at line \fB373\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
374 {
375     return !(x == y);
376 }
.fi

.SS "bool operator!= (const string & init_vector_2d, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB395\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
396 {
397     return !(init_vector_2d == x);
398 }
.fi

.SS "\fBscifir::vector_unit_2d\fP operator* (const \fBscifir::scalar_unit\fP & x, const \fBscifir::vector_unit_2d\fP & y)"

.PP
Definition at line \fB366\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
367 {
368     long double new_value = x\&.get_value() * y\&.get_value();
369     vector<scifir::dimension> new_dimensions = multiply_dimensions(x\&.get_dimensions(), y\&.get_dimensions(),new_value);
370     return scifir::vector_unit_2d(float(new_value), new_dimensions, y\&.theta);
371 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_2d\fP operator* (const T y, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB233\fP of file \fBvector_unit_2d\&.hpp\fP\&..PP
.nf
234 {
235     scifir::vector_unit_2d z = x;
236     z *= y;
237     return z;
238 }
.fi

.SS "string operator+ (const \fBscifir::vector_unit_2d\fP & y, const string & x)"

.PP
Definition at line \fB415\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
416 {
417     ostringstream output;
418     output << y;
419     output << x;
420     return output\&.str();
421 }
.fi

.SS "string operator+ (const string & x, const \fBscifir::vector_unit_2d\fP & y)"

.PP
Definition at line \fB407\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
408 {
409     ostringstream output;
410     output << x;
411     output << y;
412     return output\&.str();
413 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_2d\fP operator+ (const T y, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB219\fP of file \fBvector_unit_2d\&.hpp\fP\&..PP
.nf
220 {
221     scifir::vector_unit_2d z = x;
222     z += y;
223     return z;
224 }
.fi

.SS "void operator+= (string & x, const \fBscifir::vector_unit_2d\fP & y)"

.PP
Definition at line \fB400\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
401 {
402     ostringstream output;
403     output << y;
404     x += output\&.str();
405 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_2d\fP operator\- (const T y, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB227\fP of file \fBvector_unit_2d\&.hpp\fP\&..PP
.nf
228 {
229     return scifir::vector_unit_2d(y \- x\&.get_value(),x\&.get_dimensions(),x\&.theta);
230 }
.fi

.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_2d\fP operator/ (const T y, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB241\fP of file \fBvector_unit_2d\&.hpp\fP\&..PP
.nf
242 {
243     vector<scifir::dimension> new_dimensions = x\&.get_dimensions();
244     for (scifir::dimension& new_dimension : new_dimensions)
245     {
246         new_dimension\&.invert();
247     }
248     return scifir::vector_unit_2d(y / x\&.get_value(),new_dimensions,x\&.theta);
249 }
.fi

.SS "ostream & operator<< (ostream & os, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB423\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
424 {
425     return os << to_string(x);
426 }
.fi

.SS "bool operator== (const \fBscifir::vector_unit_2d\fP & x, const string & init_vector_2d)"

.PP
Definition at line \fB378\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
379 {
380     scifir::vector_unit_2d y(init_vector_2d);
381     return (x == y);
382 }
.fi

.SS "bool operator== (const string & init_vector_2d, const \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB389\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
390 {
391     scifir::vector_unit_2d y(init_vector_2d);
392     return (y == x);
393 }
.fi

.SS "istream & operator>> (istream & is, \fBscifir::vector_unit_2d\fP & x)"

.PP
Definition at line \fB428\fP of file \fBvector_unit_2d\&.cpp\fP\&..PP
.nf
429 {
430     char a[256];
431     is\&.getline(a, 256);
432     string b(a);
433     boost::trim(b);
434     x = scifir::vector_unit_2d(b);
435     return is;
436 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
