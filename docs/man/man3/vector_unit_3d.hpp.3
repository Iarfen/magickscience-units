.TH "units/vector_unit_3d.hpp" 3 "Sat Jul 13 2024" "Version 2.0.0" "scifir-units" \" -*- nroff -*-
.ad l
.nh
.SH NAME
units/vector_unit_3d.hpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./units/scalar_unit\&.hpp'\fP
.br
\fC#include '\&.\&./units/vector_unit_2d\&.hpp'\fP
.br
\fC#include '\&.\&./units/vector_unit_nd\&.hpp'\fP
.br
\fC#include '\&.\&./meca_number/angle\&.hpp'\fP
.br
\fC#include '\&.\&./util/is_number\&.hpp'\fP
.br
\fC#include '\&.\&./topology/direction\&.hpp'\fP
.br
\fC#include 'boost/algorithm/string\&.hpp'\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <functional>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <list>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBscifir::vector_unit_3d\fP"
.br
.RI "Class that creates a vector unit in 3D\&. The vector is in \fBspherical coordinates\fP with a value and dimensions of the \fBscalar_unit\fP, and an angle theta and another angle phi for his direction\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBscifir\fP"
.br
.RI "The namespace scifir contains all scifir-units, excepting the string literals, which are outside\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBVECTOR_UNIT_3D_HPP_BEGIN\fP(name)"
.br
.ti -1c
.RI "#define \fBVECTOR_UNIT_3D_HPP_END\fP()"
.br
.ti -1c
.RI "#define \fBVECTOR_UNIT_3D_HPP\fP(name)"
.br
.ti -1c
.RI "#define \fBVECTOR_UNIT_3D_CPP\fP(name,  init_dimensions)"
.br
.ti -1c
.RI "#define \fBVECTOR_UNIT_HPP\fP(name)"
.br
.ti -1c
.RI "#define \fBVECTOR_UNIT_CPP\fP(name,  init_dimensions)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "string \fBscifir::to_string\fP (const vector_unit_3d &x)"
.br
.RI "It generates a string representation of \fBvector_unit_3d\fP\&. "
.ti -1c
.RI "scalar_unit \fBscifir::norm\fP (const vector_unit_3d &x)"
.br
.RI "It returns the value of the vector in spherical coordinates, r\&. "
.ti -1c
.RI "vector_unit_3d \fBscifir::sqrt\fP (const vector_unit_3d &x)"
.br
.RI "It squares the vector, creating a \fBvector_unit_3d\fP with the value squared and always the same theta and the same phi\&. The dimensions are squared with the same rules for the square of dimensions than \fBscalar_unit\fP classes\&. "
.ti -1c
.RI "vector_unit_3d \fBscifir::sqrt_nth\fP (const vector_unit_3d &x, int index)"
.br
.RI "It takes the root of the vector with the index given, creating a \fBvector_unit_3d\fP with the value rooted to that index and always maintains the same theta and the same phi\&. The dimensions are squared with the same rules for the square of dimensions than \fBscalar_unit\fP classes\&. "
.ti -1c
.RI "scalar_unit \fBscifir::dot_product\fP (const vector_unit_3d &x, const vector_unit_3d &y)"
.br
.RI "Creates a \fBscalar_unit\fP as the dot product of the two vectors x and y\&. "
.ti -1c
.RI "vector_unit_3d \fBscifir::cross_product\fP (const vector_unit_3d &x, const vector_unit_3d &y)"
.br
.RI "Creates a \fBvector_unit_3d\fP as the cross product of the two vectors x and y\&. "
.ti -1c
.RI "angle \fBscifir::angle_between\fP (const vector_unit_3d &x, const vector_unit_3d &y)"
.br
.RI "Returns the angle between two vectors x and y inside a 3D space\&. "
.ti -1c
.RI "bool \fBscifir::same_direction\fP (const vector_unit_3d &x, const vector_unit_3d &y)"
.br
.RI "Checks if two vectors x and y have the same direction\&. "
.ti -1c
.RI "bool \fBscifir::parallel\fP (const vector_unit_3d &x, const vector_unit_3d &y)"
.br
.RI "Checks if two vectors x and y are parallel, which means that their direction is the same or the exact opposite\&. "
.ti -1c
.RI "bool \fBscifir::orthogonal\fP (const vector_unit_3d &x, const vector_unit_3d &y)"
.br
.RI "Checks if two vectors x and y are orthogonal, that's, if they have 90 degrees between them\&. "
.ti -1c
.RI "\fBscifir::vector_unit_3d\fP \fBoperator*\fP (const \fBscifir::scalar_unit\fP &x, const \fBscifir::vector_unit_3d\fP &y)"
.br
.RI "It creates a new vector_unit_3d scaling a vector_unit_3d by the scalar_unit x\&. "
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_3d\fP \fBoperator+\fP (const T y, const \fBscifir::vector_unit_3d\fP &x)"
.br
.RI "It creates a new vector as the addition of the numeric type x to the value\&. Theta and phi are not changed\&. "
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_3d\fP \fBoperator\-\fP (const T y, const \fBscifir::vector_unit_3d\fP &x)"
.br
.RI "It creates a new vector as the substraction of the numeric type x with the value\&. Theta and phi are not changed\&. "
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_3d\fP \fBoperator*\fP (const T y, const \fBscifir::vector_unit_3d\fP &x)"
.br
.RI "It creates a new vector as the multiplication of the numeric type x to the value\&. Theta and phi are not changed\&. "
.ti -1c
.RI "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_3d\fP \fBoperator/\fP (const T y, const \fBscifir::vector_unit_3d\fP &x)"
.br
.RI "It creates a new vector as the division of the numeric type x with the value\&. Theta and phi are not changed\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::vector_unit_3d\fP &x, const \fBscifir::vector_unit_3d\fP &y)"
.br
.RI "Comparison operator\&. Two vector_unit_3d are not equal if their value, dimensions, theta or phi are different\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBscifir::vector_unit_3d\fP &x, const string &init_vector_3d)"
.br
.RI "Returns true if x is equal to the vector_unit_3d initialized with the string being compared\&. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBscifir::vector_unit_3d\fP &x, const string &init_vector_3d)"
.br
.RI "Returns true if x is not equal to the vector_unit_3d initialized with the string being compared\&. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const string &init_vector_3d, const \fBscifir::vector_unit_3d\fP &x)"
.br
.RI "Returns true if x is equal to the vector_unit_3d initialized with the string being compared\&. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const string &init_vector_3d, const \fBscifir::vector_unit_3d\fP &x)"
.br
.RI "Returns true if x is not equal to the vector_unit_3d initialized with the string being compared\&. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers\&. "
.ti -1c
.RI "void \fBoperator+=\fP (string &x, const \fBscifir::vector_unit_3d\fP &y)"
.br
.RI "Concatenates the string representation of the vector_unit_3d y to the string x\&. "
.ti -1c
.RI "string \fBoperator+\fP (const string &x, const \fBscifir::vector_unit_3d\fP &y)"
.br
.RI "Creates a new string as the concatenation of the string x with the representation string of the vector_unit_3d y\&. "
.ti -1c
.RI "string \fBoperator+\fP (const \fBscifir::vector_unit_3d\fP &y, const string &x)"
.br
.RI "Creates a new string as the concatenation of the string x with the representation string of the vector_unit_3d y\&. "
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBscifir::vector_unit_3d\fP &x)"
.br
.RI "Adds the string representation of the vector_unit_3d x to an output stream os\&. "
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBscifir::vector_unit_3d\fP &x)"
.br
.RI "Allows that an istream initializes by string a vector_unit_3d x\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define VECTOR_UNIT_3D_CPP(name, init_dimensions)"
\fBValue:\fP
.PP
.nf
  name##_3d::name##_3d() : vector_unit_3d() {} \
    name##_3d::name##_3d(const name##_3d& x) : vector_unit_3d(x) {} \
    name##_3d::name##_3d(name##_3d&& x) : vector_unit_3d(std::move(x)) {} \
const string name##_3d::dimensions_match = init_dimensions; \
const vector<dimension> name##_3d::real_dimensions = create_derived_dimensions(init_dimensions)
.fi
.PP
Definition at line 52 of file vector_unit_3d\&.hpp\&.
.SS "#define VECTOR_UNIT_3D_HPP(name)"
\fBValue:\fP
.PP
.nf
 class name##_3d : public vector_unit_3d \
    {   \
        public: \
            using vector_unit_3d::vector_unit_3d; \
            name##_3d(); \
            name##_3d(const name##_3d&); \
            name##_3d(name##_3d&&); \
            using vector_unit_3d::operator =; \
            using vector_unit_3d::operator+=; \
            using vector_unit_3d::operator-=; \
\
            static const string dimensions_match; \
            static const vector<dimension> real_dimensions; \
    }
.fi
.PP
Definition at line 37 of file vector_unit_3d\&.hpp\&.
.SS "#define VECTOR_UNIT_3D_HPP_BEGIN(name)"
\fBValue:\fP
.PP
.nf
   class name##_3d : public vector_unit_3d \
    {   \
        public: \
            using vector_unit_3d::vector_unit_3d; \
            name##_3d(); \
            name##_3d(const name##_3d&); \
            name##_3d(name##_3d&&); \
            using vector_unit_3d::operator =; \
            using vector_unit_3d::operator+=; \
            using vector_unit_3d::operator-=
.fi
.PP
Definition at line 21 of file vector_unit_3d\&.hpp\&.
.SS "#define VECTOR_UNIT_3D_HPP_END()"
\fBValue:\fP
.PP
.nf
     public: \
        static const string dimensions_match; \
        static const vector<dimension> real_dimensions; \
    }
.fi
.PP
Definition at line 32 of file vector_unit_3d\&.hpp\&.
.SS "#define VECTOR_UNIT_CPP(name, init_dimensions)"
\fBValue:\fP
.PP
.nf
SCALAR_UNIT_CPP(name,init_dimensions); \
VECTOR_UNIT_2D_CPP(name,init_dimensions); \
VECTOR_UNIT_3D_CPP(name,init_dimensions); \
VECTOR_UNIT_ND_CPP(name,init_dimensions)
.fi
.PP
Definition at line 63 of file vector_unit_3d\&.hpp\&.
.SS "#define VECTOR_UNIT_HPP(name)"
\fBValue:\fP
.PP
.nf
SCALAR_UNIT_HPP(name); \
VECTOR_UNIT_2D_HPP(name); \
VECTOR_UNIT_3D_HPP(name); \
VECTOR_UNIT_ND_HPP(name)
.fi
.PP
Definition at line 58 of file vector_unit_3d\&.hpp\&.
.SH "Function Documentation"
.PP 
.SS "bool operator!= (const \fBscifir::vector_unit_3d\fP & x, const \fBscifir::vector_unit_3d\fP & y)"

.PP
Comparison operator\&. Two vector_unit_3d are not equal if their value, dimensions, theta or phi are different\&. 
.PP
Definition at line 515 of file vector_unit_3d\&.cpp\&.
.PP
.nf
516 {
517     return !(x == y);
518 }
.fi
.SS "bool operator!= (const \fBscifir::vector_unit_3d\fP & x, const string & init_vector_3d)"

.PP
Returns true if x is not equal to the vector_unit_3d initialized with the string being compared\&. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers\&. 
.PP
Definition at line 526 of file vector_unit_3d\&.cpp\&.
.PP
.nf
527 {
528     return !(x == init_vector_3d);
529 }
.fi
.SS "bool operator!= (const string & init_vector_3d, const \fBscifir::vector_unit_3d\fP & x)"

.PP
Returns true if x is not equal to the vector_unit_3d initialized with the string being compared\&. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers\&. 
.PP
Definition at line 537 of file vector_unit_3d\&.cpp\&.
.PP
.nf
538 {
539     return !(init_vector_3d == y);
540 }
.fi
.SS "\fBscifir::vector_unit_3d\fP operator* (const \fBscifir::scalar_unit\fP & x, const \fBscifir::vector_unit_3d\fP & y)"

.PP
It creates a new vector_unit_3d scaling a vector_unit_3d by the scalar_unit x\&. 
.PP
Definition at line 508 of file vector_unit_3d\&.cpp\&.
.PP
.nf
509 {
510     long double new_value = x\&.get_value() * y\&.get_value();
511     vector<scifir::dimension> new_dimensions = multiply_dimensions(x\&.get_dimensions(), y\&.get_dimensions(),new_value);
512     return scifir::vector_unit_3d(float(new_value), new_dimensions, y\&.theta, y\&.phi);
513 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_3d\fP operator* (const T y, const \fBscifir::vector_unit_3d\fP & x)"

.PP
It creates a new vector as the multiplication of the numeric type x to the value\&. Theta and phi are not changed\&. 
.PP
Definition at line 266 of file vector_unit_3d\&.hpp\&.
.PP
.nf
267 {
268     scifir::vector_unit_3d z = x;
269     z *= y;
270     return z;
271 }
.fi
.SS "string operator+ (const \fBscifir::vector_unit_3d\fP & y, const string & x)"

.PP
Creates a new string as the concatenation of the string x with the representation string of the vector_unit_3d y\&. 
.PP
Definition at line 557 of file vector_unit_3d\&.cpp\&.
.PP
.nf
558 {
559     ostringstream output;
560     output << y;
561     output << x;
562     return output\&.str();
563 }
.fi
.SS "string operator+ (const string & x, const \fBscifir::vector_unit_3d\fP & y)"

.PP
Creates a new string as the concatenation of the string x with the representation string of the vector_unit_3d y\&. 
.PP
Definition at line 549 of file vector_unit_3d\&.cpp\&.
.PP
.nf
550 {
551     ostringstream output;
552     output << x;
553     output << y;
554     return output\&.str();
555 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_3d\fP operator+ (const T y, const \fBscifir::vector_unit_3d\fP & x)"

.PP
It creates a new vector as the addition of the numeric type x to the value\&. Theta and phi are not changed\&. 
.PP
Definition at line 252 of file vector_unit_3d\&.hpp\&.
.PP
.nf
253 {
254     scifir::vector_unit_3d z = x;
255     z += y;
256     return z;
257 }
.fi
.SS "void operator+= (string & x, const \fBscifir::vector_unit_3d\fP & y)"

.PP
Concatenates the string representation of the vector_unit_3d y to the string x\&. 
.PP
Definition at line 542 of file vector_unit_3d\&.cpp\&.
.PP
.nf
543 {
544     ostringstream output;
545     output << y;
546     x += output\&.str();
547 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_3d\fP operator\- (const T y, const \fBscifir::vector_unit_3d\fP & x)"

.PP
It creates a new vector as the substraction of the numeric type x with the value\&. Theta and phi are not changed\&. 
.PP
Definition at line 260 of file vector_unit_3d\&.hpp\&.
.PP
.nf
261 {
262     return scifir::vector_unit_3d(y - x\&.get_value(),x\&.get_dimensions(),x\&.theta,x\&.phi);
263 }
.fi
.SS "template<typename T , typename  = typename enable_if<scifir::is_number<T>::value>::type> \fBscifir::vector_unit_3d\fP operator/ (const T y, const \fBscifir::vector_unit_3d\fP & x)"

.PP
It creates a new vector as the division of the numeric type x with the value\&. Theta and phi are not changed\&. 
.PP
Definition at line 274 of file vector_unit_3d\&.hpp\&.
.PP
.nf
275 {
276     vector<scifir::dimension> new_dimensions = x\&.get_dimensions();
277     for (scifir::dimension& new_dimension : new_dimensions)
278     {
279         new_dimension\&.invert();
280     }
281     return scifir::vector_unit_3d(y / x\&.get_value(),new_dimensions,x\&.theta,x\&.phi);
282 }
.fi
.SS "ostream& operator<< (ostream & os, const \fBscifir::vector_unit_3d\fP & x)"

.PP
Adds the string representation of the vector_unit_3d x to an output stream os\&. 
.PP
Definition at line 565 of file vector_unit_3d\&.cpp\&.
.PP
.nf
566 {
567     return os << to_string(x);
568 }
.fi
.SS "bool operator== (const \fBscifir::vector_unit_3d\fP & x, const string & init_vector_3d)"

.PP
Returns true if x is equal to the vector_unit_3d initialized with the string being compared\&. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers\&. 
.PP
Definition at line 520 of file vector_unit_3d\&.cpp\&.
.PP
.nf
521 {
522     scifir::vector_unit_3d y(init_vector_3d);
523     return (x == y);
524 }
.fi
.SS "bool operator== (const string & init_vector_3d, const \fBscifir::vector_unit_3d\fP & x)"

.PP
Returns true if x is equal to the vector_unit_3d initialized with the string being compared\&. The vectorial_display() function is not used, and so the values are compared with all its decimal numbers\&. 
.PP
Definition at line 531 of file vector_unit_3d\&.cpp\&.
.PP
.nf
532 {
533     scifir::vector_unit_3d x(init_vector_3d);
534     return (x == y);
535 }
.fi
.SS "istream& operator>> (istream & is, \fBscifir::vector_unit_3d\fP & x)"

.PP
Allows that an istream initializes by string a vector_unit_3d x\&. #endif // SCIFIR_UNITS_UNITS_VECTOR_UNIT_3D_HPP_INCLUDED 
.PP
Definition at line 570 of file vector_unit_3d\&.cpp\&.
.PP
.nf
571 {
572     char a[256];
573     is\&.getline(a, 256);
574     string b(a);
575     boost::trim(b);
576     x = scifir::vector_unit_3d(b);
577     return is;
578 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for scifir-units from the source code\&.
