<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="angle_8hpp" kind="file" language="C++">
    <compoundname>angle.hpp</compoundname>
    <includes refid="constants_8hpp" local="yes">../topology/constants.hpp</includes>
    <includes refid="is__number_8hpp" local="yes">../util/is_number.hpp</includes>
    <includes refid="scalar__unit_8hpp" local="yes">../units/scalar_unit.hpp</includes>
    <includes local="yes">boost/math/constants/constants.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">string</includes>
    <includedby refid="units_8hpp" local="yes">units.hpp</includedby>
    <includedby refid="coordinates__2dr_8hpp" local="yes">coordinates/coordinates_2dr.hpp</includedby>
    <includedby refid="coordinates__3d_8hpp" local="yes">coordinates/coordinates_3d.hpp</includedby>
    <includedby refid="coordinates__3dr_8hpp" local="yes">coordinates/coordinates_3dr.hpp</includedby>
    <includedby refid="angle_8cpp" local="yes">meca_number/angle.cpp</includedby>
    <includedby refid="complex__number_8hpp" local="yes">meca_number/complex_number.hpp</includedby>
    <includedby refid="vector__unit__2d_8hpp" local="yes">units/vector_unit_2d.hpp</includedby>
    <includedby refid="vector__unit__3d_8hpp" local="yes">units/vector_unit_3d.hpp</includedby>
    <includedby refid="vector__unit__nd_8hpp" local="yes">units/vector_unit_nd.hpp</includedby>
    <incdepgraph>
      <node id="13">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="3">
        <label>boost/math/constants/constants.hpp</label>
      </node>
      <node id="7">
        <label>../units/dimension.hpp</label>
        <link refid="dimension_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="6">
        <label>../units/scalar_unit.hpp</label>
        <link refid="scalar__unit_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="1">
        <label>meca_number/angle.hpp</label>
        <link refid="angle_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../units/prefix.hpp</label>
        <link refid="prefix_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>string_view</label>
      </node>
      <node id="20">
        <label>vector</label>
      </node>
      <node id="4">
        <label>../util/is_number.hpp</label>
        <link refid="is__number_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>sstream</label>
      </node>
      <node id="2">
        <label>../topology/constants.hpp</label>
        <link refid="constants_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="16">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>type_traits</label>
      </node>
      <node id="18">
        <label>set</label>
      </node>
      <node id="14">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>coordinates/coordinates_3d.hpp</label>
        <link refid="coordinates__3d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>meca_number/angle.cpp</label>
        <link refid="angle_8cpp"/>
      </node>
      <node id="38">
        <label>units/unit_abbreviation.hpp</label>
        <link refid="unit__abbreviation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>predefined_units/physics_units.cpp</label>
        <link refid="physics__units_8cpp"/>
      </node>
      <node id="8">
        <label>coordinates/coordinates_3dr.cpp</label>
        <link refid="coordinates__3dr_8cpp"/>
      </node>
      <node id="51">
        <label>special_units/size_3d.hpp</label>
        <link refid="size__3d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>special_units/size_2d.cpp</label>
        <link refid="size__2d_8cpp"/>
      </node>
      <node id="25">
        <label>topology/point_2d_impl.hpp</label>
        <link refid="point__2d__impl_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>units/vector_unit_nd.cpp</label>
        <link refid="vector__unit__nd_8cpp"/>
      </node>
      <node id="35">
        <label>topology/point_2d.hpp</label>
        <link refid="point__2d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>topology/point_1d.hpp</label>
        <link refid="point__1d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>units/vector_unit_3d.cpp</label>
        <link refid="vector__unit__3d_8cpp"/>
      </node>
      <node id="32">
        <label>topology/point_nd_impl.hpp</label>
        <link refid="point__nd__impl_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>topology/point_3d_impl.hpp</label>
        <link refid="point__3d__impl_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>topology/point_3d.cpp</label>
        <link refid="point__3d_8cpp"/>
      </node>
      <node id="19">
        <label>coordinates/coordinates_1d.cpp</label>
        <link refid="coordinates__1d_8cpp"/>
      </node>
      <node id="22">
        <label>coordinates/coordinates_2d.hpp</label>
        <link refid="coordinates__2d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>predefined_units/astronomy_units.cpp</label>
        <link refid="astronomy__units_8cpp"/>
      </node>
      <node id="1">
        <label>meca_number/angle.hpp</label>
        <link refid="angle_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>predefined_units/radiometry_units.cpp</label>
        <link refid="radiometry__units_8cpp"/>
      </node>
      <node id="39">
        <label>units/unit_abbreviation.cpp</label>
        <link refid="unit__abbreviation_8cpp"/>
      </node>
      <node id="53">
        <label>special_units/size_nd.hpp</label>
        <link refid="size__nd_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>special_units/size_3d.cpp</label>
        <link refid="size__3d_8cpp"/>
      </node>
      <node id="17">
        <label>predefined_units/physics_units.hpp</label>
        <link refid="physics__units_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>units/vector_unit_2d.cpp</label>
        <link refid="vector__unit__2d_8cpp"/>
      </node>
      <node id="3">
        <label>coordinates/coordinates_2dr.hpp</label>
        <link refid="coordinates__2dr_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>units/vector_unit_nd.hpp</label>
        <link refid="vector__unit__nd_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>topology/point_2d.cpp</label>
        <link refid="point__2d_8cpp"/>
      </node>
      <node id="20">
        <label>topology/point_1d.cpp</label>
        <link refid="point__1d_8cpp"/>
      </node>
      <node id="40">
        <label>units/vector_unit_3d.hpp</label>
        <link refid="vector__unit__3d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>coordinates/coordinates_1d.hpp</label>
        <link refid="coordinates__1d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>predefined_units/astronomy_units.hpp</label>
        <link refid="astronomy__units_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>predefined_units/space_units.cpp</label>
        <link refid="space__units_8cpp"/>
      </node>
      <node id="15">
        <label>meca_number/complex_number.cpp</label>
        <link refid="complex__number_8cpp"/>
      </node>
      <node id="54">
        <label>special_units/size_nd.cpp</label>
        <link refid="size__nd_8cpp"/>
      </node>
      <node id="45">
        <label>predefined_units/radiometry_units.hpp</label>
        <link refid="radiometry__units_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>units/vector_unit_2d.hpp</label>
        <link refid="vector__unit__2d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>topology/point_1d_impl.hpp</label>
        <link refid="point__1d__impl_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>coordinates/coordinates_2dr.cpp</label>
        <link refid="coordinates__2dr_8cpp"/>
      </node>
      <node id="37">
        <label>topology/point_nd.hpp</label>
        <link refid="point__nd_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>coordinates/coordinates_ndr.hpp</label>
        <link refid="coordinates__ndr_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>units.hpp</label>
        <link refid="units_8hpp"/>
      </node>
      <node id="44">
        <label>predefined_units/electronics_units.cpp</label>
        <link refid="electronics__units_8cpp"/>
      </node>
      <node id="28">
        <label>coordinates/coordinates_nd.cpp</label>
        <link refid="coordinates__nd_8cpp"/>
      </node>
      <node id="6">
        <label>coordinates/coordinates_3d.cpp</label>
        <link refid="coordinates__3d_8cpp"/>
      </node>
      <node id="47">
        <label>predefined_units/space_units.hpp</label>
        <link refid="space__units_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>coordinates/coordinates_3dr.hpp</label>
        <link refid="coordinates__3dr_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>meca_number/complex_number.hpp</label>
        <link refid="complex__number_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>special_units/size_2d.hpp</label>
        <link refid="size__2d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>topology/point_3d.hpp</label>
        <link refid="point__3d_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>topology/point_nd.cpp</label>
        <link refid="point__nd_8cpp"/>
      </node>
      <node id="43">
        <label>predefined_units/electronics_units.hpp</label>
        <link refid="electronics__units_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>coordinates/coordinates_ndr.cpp</label>
        <link refid="coordinates__ndr_8cpp"/>
      </node>
      <node id="27">
        <label>coordinates/coordinates_nd.hpp</label>
        <link refid="coordinates__nd_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>coordinates/coordinates_2d.cpp</label>
        <link refid="coordinates__2d_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classscifir_1_1angle" prot="public">scifir::angle</innerclass>
    <innernamespace refid="namespacescifir">scifir</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="angle_8hpp_1a24405fc1fdf065543346a4b96efc737f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref></type>
        <definition>scifir::angle operator+</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the sum of a numeric type with the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="220" column="15" bodyfile="meca_number/angle.hpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a0962f28ca147b65932f14efcba2d6456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref></type>
        <definition>scifir::angle operator-</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator-</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the substraction of the numeric type with the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="226" column="15" bodyfile="meca_number/angle.hpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1ac3b72e0356c0f211031603d2f6fcce21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref></type>
        <definition>scifir::angle operator*</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the multiplication of a numeric type with the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="232" column="15" bodyfile="meca_number/angle.hpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a59c4fb09633884237c429669e1a00599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref></type>
        <definition>scifir::angle operator/</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator/</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the division of the value of this angle with the numeric type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="238" column="15" bodyfile="meca_number/angle.hpp" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a1dc90f302050f4f63fac2eb49b60f431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref></type>
        <definition>scifir::angle operator^</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator^</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the power of a numeric type with the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="244" column="15" bodyfile="meca_number/angle.hpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1af0536e61a5aa61b01e4b261b0366f667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is equal to a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="250" column="6" bodyfile="meca_number/angle.hpp" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1ae1d2f1bedcb72ef5fc0bfced4316ecc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is not equal to a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="256" column="6" bodyfile="meca_number/angle.hpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1add64f0c17e44e287024623f2f0209a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is greather to a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="262" column="1" bodyfile="meca_number/angle.hpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1aac64783c181a770b790e577dcf8d531d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is lower to a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="268" column="6" bodyfile="meca_number/angle.hpp" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a777abbd039cbbb7470ca1252962a85d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is equal or greather than a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="274" column="1" bodyfile="meca_number/angle.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a1f1de769691bb494d02de921059d06b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(T x, const scifir::angle &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is lower or equal than a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="280" column="6" bodyfile="meca_number/angle.hpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1acb5bc28ff191c4a072d78a56b2c509f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const scifir::angle &amp;y, T x)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is equal to a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="286" column="6" bodyfile="meca_number/angle.hpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1ab4f3e92470c478bd3c6ac1f8311361e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const scifir::angle &amp;y, T x)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is not equal to a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="292" column="6" bodyfile="meca_number/angle.hpp" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a3663ec48daf70f254b09ec57cea30d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const scifir::angle &amp;y, T x)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is lower to a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="298" column="1" bodyfile="meca_number/angle.hpp" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a368478a0c68650f34ec7bf36783c460e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const scifir::angle &amp;y, T x)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is greather to a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="304" column="6" bodyfile="meca_number/angle.hpp" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a35d2363989efff6a928cb48a7592209a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const scifir::angle &amp;y, T x)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is lower or equal than a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="310" column="1" bodyfile="meca_number/angle.hpp" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a004b28327bddcb78dd7df84f1d381d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const scifir::angle &amp;y, T x)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle y is equal or greather than a numeric type x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="316" column="6" bodyfile="meca_number/angle.hpp" bodystart="316" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a403c125e0eb9086121d11d020f78c0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const scifir::angle &amp;x, const scifir::angle &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if two angles have equal value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="321" column="6" bodyfile="meca_number/angle.cpp" bodystart="407" bodyend="417" declfile="meca_number/angle.hpp" declline="321" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a3f4ef9933f79fc79eda3ea263e1fd679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const scifir::angle &amp;x, const scifir::angle &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if two angles have not equal value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="322" column="6" bodyfile="meca_number/angle.cpp" bodystart="419" bodyend="422" declfile="meca_number/angle.hpp" declline="322" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a1ab87d7f0fd4ec88b62af8ed20aa000c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const scifir::angle &amp;x, const scifir::angle &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle x is lower than the value of angle y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="323" column="1" bodyfile="meca_number/angle.cpp" bodystart="424" bodyend="434" declfile="meca_number/angle.hpp" declline="323" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a40cc7c890e50fc4601c5841711ebea90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const scifir::angle &amp;x, const scifir::angle &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle x is greather than the value of angle y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="324" column="6" bodyfile="meca_number/angle.cpp" bodystart="436" bodyend="446" declfile="meca_number/angle.hpp" declline="324" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1ade9441e95f2ee04d45c9d499138ecc67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const scifir::angle &amp;x, const scifir::angle &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle x is lower or equal than the value of angle y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="325" column="1" bodyfile="meca_number/angle.cpp" bodystart="448" bodyend="451" declfile="meca_number/angle.hpp" declline="325" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1aa6c69360367103f831ddf2e2ef15cae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const scifir::angle &amp;x, const scifir::angle &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks if the value of angle x is equal or greather than the value of angle y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="326" column="6" bodyfile="meca_number/angle.cpp" bodystart="453" bodyend="456" declfile="meca_number/angle.hpp" declline="326" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1addb2eba1a507c677898d41bbfe501560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const scifir::angle &amp;x, const string &amp;init_angle)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_angle</declname>
        </param>
        <briefdescription>
<para>Checks if the angle x is equal than the angle initialized with the initialization string of angle init_angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="328" column="6" bodyfile="meca_number/angle.cpp" bodystart="458" bodyend="462" declfile="meca_number/angle.hpp" declline="328" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a08447059da8d150091b248d4e80b7449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const scifir::angle &amp;x, const string &amp;init_angle)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_angle</declname>
        </param>
        <briefdescription>
<para>Checks if the angle x is not equal than the angle initialized with the initialization string of angle init_angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="329" column="6" bodyfile="meca_number/angle.cpp" bodystart="464" bodyend="467" declfile="meca_number/angle.hpp" declline="329" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a9acd4355fb3fac59d5c88321ce22093b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const string &amp;init_angle, const scifir::angle &amp;x)</argsstring>
        <name>operator==</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_angle</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the angle x is equal than the angle initialized with the initialization string of angle init_angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="331" column="6" bodyfile="meca_number/angle.cpp" bodystart="469" bodyend="473" declfile="meca_number/angle.hpp" declline="331" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a89a0b1aec65425b16ac0c4133acab0a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const string &amp;init_angle, const scifir::angle &amp;x)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_angle</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the angle x is not equal than the angle initialized with the initialization string of angle init_angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="332" column="6" bodyfile="meca_number/angle.cpp" bodystart="475" bodyend="478" declfile="meca_number/angle.hpp" declline="332" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1af5134978a1a12312809a2b7d552618a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operator+=</definition>
        <argsstring>(string &amp;x, const scifir::angle &amp;y)</argsstring>
        <name>operator+=</name>
        <param>
          <type>string &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Concatenates to string x the string representation of angle y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="334" column="6" bodyfile="meca_number/angle.cpp" bodystart="480" bodyend="485" declfile="meca_number/angle.hpp" declline="334" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1af3432d1643944e783e1254bccff7dce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string operator+</definition>
        <argsstring>(const string &amp;x, const scifir::angle &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const string &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Concatenates the string x with the string representation of angle y into a new string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="335" column="8" bodyfile="meca_number/angle.cpp" bodystart="487" bodyend="493" declfile="meca_number/angle.hpp" declline="335" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a6b664feed583adf5460fe6804677ac14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string operator+</definition>
        <argsstring>(const scifir::angle &amp;y, const string &amp;x)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Concatenates the string x with the string representation of angle y into a new string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="336" column="8" bodyfile="meca_number/angle.cpp" bodystart="495" bodyend="501" declfile="meca_number/angle.hpp" declline="336" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a1979fb0d7a01ed175bd7f7f18a3e6070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const scifir::angle &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Sends the string representation of angle x to an output stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="338" column="1" bodyfile="meca_number/angle.cpp" bodystart="503" bodyend="506" declfile="meca_number/angle.hpp" declline="338" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a2f47db1e2f5018a35c1230c9eb6a581a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, scifir::angle &amp;x)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Initializes an angle with an initialization string obtained from an input stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="339" column="9" bodyfile="meca_number/angle.cpp" bodystart="508" bodyend="516" declfile="meca_number/angle.hpp" declline="339" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SCIFIR_UNITS_MECA_NUMBER_ANGLE_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIFIR_UNITS_MECA_NUMBER_ANGLE_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../topology/constants.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../util/is_number.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../units/scalar_unit.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/math/constants/constants.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacescifir" kindref="compound">scifir</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17" refid="namespacescifir_1a4279b6b5a8b758d99f7f94f0ed400977" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4279b6b5a8b758d99f7f94f0ed400977" kindref="member">radian_to_degree</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>180.0f<sp/>/<sp/><ref refid="namespacescifir_1aba6ebba65e0f0326f9bf57eaba1351ba" kindref="member">PI</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="namespacescifir_1a5f6a331e2ea05821aad3167e2b42b626" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a5f6a331e2ea05821aad3167e2b42b626" kindref="member">degree_to_radian</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/><ref refid="namespacescifir_1aba6ebba65e0f0326f9bf57eaba1351ba" kindref="member">PI</ref><sp/>/<sp/>180.0f;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classscifir_1_1angle" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30" refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4a954b9343ae2db0c68edab65f1a6b1a95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref><sp/>:<sp/>int8_t<sp/>{<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4a954b9343ae2db0c68edab65f1a6b1a95" kindref="member">DEGREE</ref>,RADIAN};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(<ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;&amp;<sp/>x);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_value,<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">angle::type</ref><sp/>init_type<sp/>=<sp/>angle::DEGREE);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value,<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">angle::type</ref><sp/>init_type<sp/>=<sp/>angle::DEGREE);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value,<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">angle::type</ref><sp/>init_type<sp/>=<sp/>angle::DEGREE);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">angle::type</ref><sp/>init_type<sp/>=<sp/>angle::DEGREE);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>init_angle);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>operator<sp/>=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>operator<sp/>=(<ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;&amp;<sp/>x);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>operator<sp/>=(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>operator<sp/>=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>init_angle);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>operator<sp/>=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classscifir_1_1angle_1ae5362046e202f53179be6f64acb56b79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>float()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="49"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>float(value);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/><ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="54"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1a24405fc1fdf065543346a4b96efc737f" kindref="member">operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1a0962f28ca147b65932f14efcba2d6456" kindref="member">operator -</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1ac3b72e0356c0f211031603d2f6fcce21" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1a59c4fb09633884237c429669e1a00599" kindref="member">operator /</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1a1dc90f302050f4f63fac2eb49b60f431" kindref="member">operator ^</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1af5134978a1a12312809a2b7d552618a8" kindref="member">operator +=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a44885d7837e32965f8cecbbb378d7606" kindref="member">operator -=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator<sp/>*=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator<sp/>/=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator<sp/>^=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="70" refid="classscifir_1_1angle_1ab4232d4a7c763ba5202379e5a4bc15df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator<sp/>=(T<sp/>new_value)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>float(new_value);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize_value();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="77" refid="classscifir_1_1angle_1ad080e98d7074a899a4ec374f4fdecdac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1a24405fc1fdf065543346a4b96efc737f" kindref="member">operator +</ref>(T<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="78"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(value<sp/>+<sp/>x);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="83" refid="classscifir_1_1angle_1a6b8f5b864cbda129b8ed37b0c84045f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1a0962f28ca147b65932f14efcba2d6456" kindref="member">operator -</ref>(T<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="84"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(value<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="89" refid="classscifir_1_1angle_1a28155a06cc1bed061a72f61004bd6dee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1ac3b72e0356c0f211031603d2f6fcce21" kindref="member">operator *</ref>(T<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="90"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(value<sp/>*<sp/>x);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="95" refid="classscifir_1_1angle_1ad333538b43349cfcb6a1944f45127b3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1a59c4fb09633884237c429669e1a00599" kindref="member">operator /</ref>(T<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="96"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(value<sp/>/<sp/>x);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="101" refid="classscifir_1_1angle_1a54ee78fca1e7d2d8f0314dd0f9cd9340" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="angle_8hpp_1a1dc90f302050f4f63fac2eb49b60f431" kindref="member">operator ^</ref>(T<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="102"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>(<ref refid="namespacescifir_1a44533727ef4f03e8303664cdd665c2bc" kindref="member">std::pow</ref>(value,<sp/>x));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="107" refid="classscifir_1_1angle_1a1e47f99c79ee9ed1defa85708577e96d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1af5134978a1a12312809a2b7d552618a8" kindref="member">operator +=</ref>(T<sp/>x)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize_value();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="114" refid="classscifir_1_1angle_1ad2bb2917dbfb4e614c519e87c87bf656" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a44885d7837e32965f8cecbbb378d7606" kindref="member">operator -=</ref>(T<sp/>x)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>-=<sp/>x;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize_value();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="121" refid="classscifir_1_1angle_1a20f5bf44b97ee0ff7d561de854e88de5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator<sp/>*=(T<sp/>x)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>*=<sp/>x;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize_value();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="128" refid="classscifir_1_1angle_1a5d1156d4948464c8cc6550aefd05a5b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator<sp/>/=(T<sp/>x)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>/=<sp/>x;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize_value();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="135" refid="classscifir_1_1angle_1a6ac4db37672545a8e5b676f1c433ac41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator<sp/>^=(T<sp/>x)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="namespacescifir_1a44533727ef4f03e8303664cdd665c2bc" kindref="member">std::pow</ref>(value,<sp/>x);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize_value();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>operator++();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>operator--();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/>operator--(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a0dccca47be7b8a3781d743c46394dd20" kindref="member">invert</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>display(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_decimals<sp/>=<sp/>2)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classscifir_1_1angle_1a5a4d42b33e811ce6cbfe4071fac3ef97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle_1a5a4d42b33e811ce6cbfe4071fac3ef97" kindref="member">get_degree</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="151"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="classscifir_1_1angle_1aa00ccd7a91c0118e83e7d36fd506d644" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle_1aa00ccd7a91c0118e83e7d36fd506d644" kindref="member">get_radian</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="156"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a5f6a331e2ea05821aad3167e2b42b626" kindref="member">degree_to_radian</ref>(value);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="161" refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>normalize_value();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize_from_string(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>init_angle);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a421182d5f93abcbbaeadc7c14112bdd5" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1af5a4683671f496fe4aaa2d378c81d0b1" kindref="member">is_angle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>init_angle);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1ae4beaddada9427f8c7a53e3381c5b796" kindref="member">parallel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a3ea95ad2c4137768f1e541e77db8a97a" kindref="member">orthogonal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="namespacescifir_1adeff4b825414d35ce963977f181f1b5c" kindref="member">sqrt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="namespacescifir_1a0b02e4d82f1d2253f6901264ff11ca38" kindref="member">sqrt_nth</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1ad3b92cdb628eeec991c326c1727fdd9e" kindref="member">sin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a36d6ffb762d9c276b4229a2bedf3bca9" kindref="member">cos</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1af04388d6eae86667f93b8f8b347b92f4" kindref="member">tan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="namespacescifir_1a1f303936f1ea7ec91375b8d707a51a90" kindref="member">asin</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="namespacescifir_1ad107726d553b98dd1061fa75b7f9cc60" kindref="member">acos</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="namespacescifir_1a6238e1d28db776a5d6497d463cc18a24" kindref="member">atan</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4707b4683c6bef04243c9affcdbe0a63" kindref="member">sinh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a770ad7122728e4dfa85221c2c372e54c" kindref="member">cosh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a3f2de7afed6fb51c22c9b81346a6642c" kindref="member">tanh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="namespacescifir_1ac003e3c2113237706f4c4c50164a4024" kindref="member">asinh</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="namespacescifir_1a83266adde7a9639563d4ab6ae9090a7a" kindref="member">acosh</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classscifir_1_1angle" kindref="compound">angle</ref><sp/><ref refid="namespacescifir_1acb80729ddcfa267023fefe9d39abac38" kindref="member">atanh</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="namespacescifir_1ab782cb5f71f809b8001c676db39ae105" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1ab782cb5f71f809b8001c676db39ae105" kindref="member">asin_degree</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4279b6b5a8b758d99f7f94f0ed400977" kindref="member">radian_to_degree</ref>(<ref refid="namespacescifir_1a1f303936f1ea7ec91375b8d707a51a90" kindref="member">std::asin</ref>(x));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="namespacescifir_1a73055e45327c72e4bc3f1e392c3c019e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a73055e45327c72e4bc3f1e392c3c019e" kindref="member">acos_degree</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4279b6b5a8b758d99f7f94f0ed400977" kindref="member">radian_to_degree</ref>(<ref refid="namespacescifir_1ad107726d553b98dd1061fa75b7f9cc60" kindref="member">std::acos</ref>(x));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="namespacescifir_1a4f9e2e4c610d0caaeaeb057eba2d0ab9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4f9e2e4c610d0caaeaeb057eba2d0ab9" kindref="member">atan_degree</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4279b6b5a8b758d99f7f94f0ed400977" kindref="member">radian_to_degree</ref>(<ref refid="namespacescifir_1a6238e1d28db776a5d6497d463cc18a24" kindref="member">std::atan</ref>(x));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="namespacescifir_1add12c2189775431391a01da44451c555" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1add12c2189775431391a01da44451c555" kindref="member">asinh_degree</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4279b6b5a8b758d99f7f94f0ed400977" kindref="member">radian_to_degree</ref>(<ref refid="namespacescifir_1ac003e3c2113237706f4c4c50164a4024" kindref="member">std::asinh</ref>(x));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="namespacescifir_1aa30920e8c4e52f3c9f1087b97b053585" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1aa30920e8c4e52f3c9f1087b97b053585" kindref="member">acosh_degree</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4279b6b5a8b758d99f7f94f0ed400977" kindref="member">radian_to_degree</ref>(<ref refid="namespacescifir_1a83266adde7a9639563d4ab6ae9090a7a" kindref="member">std::acosh</ref>(x));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="namespacescifir_1a18598f24883d62e6686b822fd43451b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a18598f24883d62e6686b822fd43451b8" kindref="member">atanh_degree</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacescifir_1a4279b6b5a8b758d99f7f94f0ed400977" kindref="member">radian_to_degree</ref>(<ref refid="namespacescifir_1acb80729ddcfa267023fefe9d39abac38" kindref="member">std::atanh</ref>(x));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="220" refid="angle_8hpp_1a24405fc1fdf065543346a4b96efc737f" refkind="member"><highlight class="normal"><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref><sp/><ref refid="angle_8hpp_1a24405fc1fdf065543346a4b96efc737f" kindref="member">operator +</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>(x<sp/>+<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="226" refid="angle_8hpp_1a0962f28ca147b65932f14efcba2d6456" refkind="member"><highlight class="normal"><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref><sp/><ref refid="angle_8hpp_1a0962f28ca147b65932f14efcba2d6456" kindref="member">operator -</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>(x<sp/>-<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="232" refid="angle_8hpp_1ac3b72e0356c0f211031603d2f6fcce21" refkind="member"><highlight class="normal"><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref><sp/><ref refid="angle_8hpp_1ac3b72e0356c0f211031603d2f6fcce21" kindref="member">operator *</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>(x<sp/>*<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="238" refid="angle_8hpp_1a59c4fb09633884237c429669e1a00599" refkind="member"><highlight class="normal"><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref><sp/><ref refid="angle_8hpp_1a59c4fb09633884237c429669e1a00599" kindref="member">operator /</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>(x<sp/>/<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="244" refid="angle_8hpp_1a1dc90f302050f4f63fac2eb49b60f431" refkind="member"><highlight class="normal"><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref><sp/><ref refid="angle_8hpp_1a1dc90f302050f4f63fac2eb49b60f431" kindref="member">operator ^</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>(<ref refid="namespacescifir_1a44533727ef4f03e8303664cdd665c2bc" kindref="member">pow</ref>(x,<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>()));</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="250" refid="angle_8hpp_1af0536e61a5aa61b01e4b261b0366f667" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1af0536e61a5aa61b01e4b261b0366f667" kindref="member">operator ==</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="256" refid="angle_8hpp_1ae1d2f1bedcb72ef5fc0bfced4316ecc2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1ae1d2f1bedcb72ef5fc0bfced4316ecc2" kindref="member">operator !=</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="262" refid="angle_8hpp_1add64f0c17e44e287024623f2f0209a9e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1add64f0c17e44e287024623f2f0209a9e" kindref="member">operator &lt;</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="268" refid="angle_8hpp_1aac64783c181a770b790e577dcf8d531d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1aac64783c181a770b790e577dcf8d531d" kindref="member">operator &gt;</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="274" refid="angle_8hpp_1a777abbd039cbbb7470ca1252962a85d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1a777abbd039cbbb7470ca1252962a85d7" kindref="member">operator &lt;=</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="280" refid="angle_8hpp_1a1f1de769691bb494d02de921059d06b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1a1f1de769691bb494d02de921059d06b9" kindref="member">operator &gt;=</ref>(T<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="286" refid="angle_8hpp_1acb5bc28ff191c4a072d78a56b2c509f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1af0536e61a5aa61b01e4b261b0366f667" kindref="member">operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y,<sp/>T<sp/>x)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="292" refid="angle_8hpp_1ab4f3e92470c478bd3c6ac1f8311361e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1ae1d2f1bedcb72ef5fc0bfced4316ecc2" kindref="member">operator !=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y,<sp/>T<sp/>x)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>());</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="298" refid="angle_8hpp_1a3663ec48daf70f254b09ec57cea30d22" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1add64f0c17e44e287024623f2f0209a9e" kindref="member">operator &lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y,<sp/>T<sp/>x)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>()<sp/>&lt;<sp/>x);</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="304" refid="angle_8hpp_1a368478a0c68650f34ec7bf36783c460e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1aac64783c181a770b790e577dcf8d531d" kindref="member">operator &gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y,<sp/>T<sp/>x)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>()<sp/>&gt;<sp/>x);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="310" refid="angle_8hpp_1a35d2363989efff6a928cb48a7592209a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1a777abbd039cbbb7470ca1252962a85d7" kindref="member">operator &lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y,<sp/>T<sp/>x)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>()<sp/>&lt;=<sp/>x);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>enable_if&lt;scifir::is_number&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="316" refid="angle_8hpp_1a004b28327bddcb78dd7df84f1d381d78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1a1f1de769691bb494d02de921059d06b9" kindref="member">operator &gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y,<sp/>T<sp/>x)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(y.<ref refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" kindref="member">get_value</ref>()<sp/>&gt;=<sp/>x);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1af0536e61a5aa61b01e4b261b0366f667" kindref="member">operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1ae1d2f1bedcb72ef5fc0bfced4316ecc2" kindref="member">operator !=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1add64f0c17e44e287024623f2f0209a9e" kindref="member">operator &lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1aac64783c181a770b790e577dcf8d531d" kindref="member">operator &gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1a777abbd039cbbb7470ca1252962a85d7" kindref="member">operator &lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1a1f1de769691bb494d02de921059d06b9" kindref="member">operator &gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1af0536e61a5aa61b01e4b261b0366f667" kindref="member">operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>init_angle);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1ae1d2f1bedcb72ef5fc0bfced4316ecc2" kindref="member">operator !=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>init_angle);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1af0536e61a5aa61b01e4b261b0366f667" kindref="member">operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>init_angle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1ae1d2f1bedcb72ef5fc0bfced4316ecc2" kindref="member">operator !=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>init_angle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1af5134978a1a12312809a2b7d552618a8" kindref="member">operator +=</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1a24405fc1fdf065543346a4b96efc737f" kindref="member">operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="angle_8hpp_1a24405fc1fdf065543346a4b96efc737f" kindref="member">operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>x);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">ostream&amp;<sp/><ref refid="angle_8hpp_1a1979fb0d7a01ed175bd7f7f18a3e6070" kindref="member">operator &lt;&lt;</ref>(ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">istream&amp;<sp/><ref refid="angle_8hpp_1a2f47db1e2f5018a35c1230c9eb6a581a" kindref="member">operator &gt;&gt;</ref>(istream&amp;<sp/>is,<sp/><ref refid="classscifir_1_1angle" kindref="compound">scifir::angle</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>SCIFIR_UNITS_MECA_NUMBER_ANGLE_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="meca_number/angle.hpp"/>
  </compounddef>
</doxygen>
