<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classscifir_1_1angle" kind="class" language="C++" prot="public">
    <compoundname>scifir::angle</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classscifir_1_1angle_1abf0a15a9992815559fdb667439d7b1b4" prot="private" static="no" mutable="no">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::angle::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <qualifiedname>scifir::angle::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="159" column="7" bodyfile="meca_number/angle.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classscifir_1_1angle_1aa45df1d6206b6c400493853953db8c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>()</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="30" column="1" bodyfile="meca_number/angle.cpp" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a00115e0e7930a93b2a1df63ecbaa75c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(const angle &amp;)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="31" column="1" bodyfile="meca_number/angle.cpp" bodystart="21" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a3235f001adef6ce24daf63d8bf174266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(angle &amp;&amp;)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;&amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="32" column="1" bodyfile="meca_number/angle.cpp" bodystart="24" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a1cf8cce75ff80c4c187fd7230daaae6b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(float)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="33" column="10" bodyfile="meca_number/angle.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a84af56ff81383bf1c7800d2a365005a4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(double)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="34" column="10" bodyfile="meca_number/angle.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1acdd6b4037e62064da6854dea266659f2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(long double)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="35" column="10" bodyfile="meca_number/angle.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a8796e11f3261006a0838944f41e97068" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(int)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="36" column="10" bodyfile="meca_number/angle.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aa1c0dfabac64b68581e9e09411c72fd9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(string)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
          <defname>init_angle</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="37" column="10" bodyfile="meca_number/angle.cpp" bodystart="47" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a7a8607fc5775eb92e522b0445e4f4cac" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(const scalar_unit &amp;)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="38" column="10" bodyfile="meca_number/angle.cpp" bodystart="60" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ad04b271160f6013b0ead3b2282fa76c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(const angle &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="40" column="7" bodyfile="meca_number/angle.cpp" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a367de71ca4ca3aec060592bc21aab460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(angle &amp;&amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;&amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="41" column="7" bodyfile="meca_number/angle.cpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ab7ef54cfc2fc5dd2418e4ad1e4512f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(float)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="42" column="7" bodyfile="meca_number/angle.cpp" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a104ae02cc1cc2bf439cc8ff8675a4ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(string)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
          <defname>init_angle</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="43" column="7" bodyfile="meca_number/angle.cpp" bodystart="93" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a8197c58e9e2a6a7f8837bf541e56f5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(const scalar_unit &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="44" column="7" bodyfile="meca_number/angle.cpp" bodystart="108" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a56283b82a3dd8f71212bcfbe040a62f1" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::operator float</definition>
        <argsstring>() const</argsstring>
        <name>operator float</name>
        <qualifiedname>scifir::angle::operator float</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="46" column="10" bodyfile="meca_number/angle.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a61e436c1eb66a6ed10924e641a4a4ba3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &amp;</type>
        <definition>const float &amp; scifir::angle::get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <qualifiedname>scifir::angle::get_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="51" column="20" bodyfile="meca_number/angle.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a69c74103bf6a5961d1f8baf9b2f4591a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator+</definition>
        <argsstring>(const angle &amp;) const</argsstring>
        <name>operator+</name>
        <qualifiedname>scifir::angle::operator+</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="56" column="7" bodyfile="meca_number/angle.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a6d1563f685ce144c053d82b2e0b95c4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator-</definition>
        <argsstring>(const angle &amp;) const</argsstring>
        <name>operator-</name>
        <qualifiedname>scifir::angle::operator-</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="57" column="7" bodyfile="meca_number/angle.cpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a17c9db24528f6f9fb1145d9ef73a139d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator*</definition>
        <argsstring>(const angle &amp;) const</argsstring>
        <name>operator*</name>
        <qualifiedname>scifir::angle::operator*</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="58" column="7" bodyfile="meca_number/angle.cpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a666ac8877f6bca990ba83d50f3890a8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator/</definition>
        <argsstring>(const angle &amp;) const</argsstring>
        <name>operator/</name>
        <qualifiedname>scifir::angle::operator/</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="59" column="7" bodyfile="meca_number/angle.cpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a698b8d48017fc18f56783182fd1738ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator^</definition>
        <argsstring>(const angle &amp;) const</argsstring>
        <name>operator^</name>
        <qualifiedname>scifir::angle::operator^</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="60" column="7" bodyfile="meca_number/angle.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a2e4b95b5bc23888b0288b4d5436b6d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator+=</definition>
        <argsstring>(const angle &amp;)</argsstring>
        <name>operator+=</name>
        <qualifiedname>scifir::angle::operator+=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="61" column="6" bodyfile="meca_number/angle.cpp" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ae3028b005f2989ca7a73edfcb09b2402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator-=</definition>
        <argsstring>(const angle &amp;)</argsstring>
        <name>operator-=</name>
        <qualifiedname>scifir::angle::operator-=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="62" column="6" bodyfile="meca_number/angle.cpp" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a3883bc2b38e50e14b2bfa2bf5f8298af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator*=</definition>
        <argsstring>(const angle &amp;)</argsstring>
        <name>operator*=</name>
        <qualifiedname>scifir::angle::operator*=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="63" column="6" bodyfile="meca_number/angle.cpp" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a0b88037cb0b9fbe920674b6c2aae41a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator/=</definition>
        <argsstring>(const angle &amp;)</argsstring>
        <name>operator/=</name>
        <qualifiedname>scifir::angle::operator/=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="64" column="6" bodyfile="meca_number/angle.cpp" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a6bf546ba057201839936d3a1220f392d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator^=</definition>
        <argsstring>(const angle &amp;)</argsstring>
        <name>operator^=</name>
        <qualifiedname>scifir::angle::operator^=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="65" column="6" bodyfile="meca_number/angle.cpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a74e4811b91c9c1ce62f630e1520256e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="68" column="6" bodyfile="meca_number/angle.hpp" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a601b8a24f80ddf0bb99f7948fbfc6cc2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator+</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator+</name>
        <qualifiedname>scifir::angle::operator+</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="75" column="7" bodyfile="meca_number/angle.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a1ea8641a14f0c5f39dd9142d5e5ebd69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator-</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator-</name>
        <qualifiedname>scifir::angle::operator-</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="81" column="7" bodyfile="meca_number/angle.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a5a2e7da446bb34c2139377ee6c42bef7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator*</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator*</name>
        <qualifiedname>scifir::angle::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="87" column="7" bodyfile="meca_number/angle.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a17f083b8d153d99d28aa84ea444d5553" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator/</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator/</name>
        <qualifiedname>scifir::angle::operator/</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="93" column="7" bodyfile="meca_number/angle.hpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a72551824ddbf03cba398171f5f52a13d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator^</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator^</name>
        <qualifiedname>scifir::angle::operator^</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="99" column="7" bodyfile="meca_number/angle.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1abca991ef6c2aa3a27022ca2f9aa54bcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator+=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator+=</name>
        <qualifiedname>scifir::angle::operator+=</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="105" column="6" bodyfile="meca_number/angle.hpp" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ad07edc310f6cbd8baeffe143437ed00d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator-=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator-=</name>
        <qualifiedname>scifir::angle::operator-=</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="112" column="6" bodyfile="meca_number/angle.hpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aa41412521ae9632cb1b5620d2ad382fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator*=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator*=</name>
        <qualifiedname>scifir::angle::operator*=</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="119" column="6" bodyfile="meca_number/angle.hpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1af2b1d3dafd336c9758cae76844856fde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator/=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator/=</name>
        <qualifiedname>scifir::angle::operator/=</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="126" column="6" bodyfile="meca_number/angle.hpp" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a4a33778ad3310083f89f17023a33da0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator^=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator^=</name>
        <qualifiedname>scifir::angle::operator^=</qualifiedname>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="133" column="6" bodyfile="meca_number/angle.hpp" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a511ad114fe3feb22650961027bea453e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>scifir::angle::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="139" column="7" bodyfile="meca_number/angle.cpp" bodystart="177" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1acd47f615a78aff4354caadc0a32f1f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>scifir::angle::operator++</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="140" column="7" bodyfile="meca_number/angle.cpp" bodystart="183" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a1774b30a6e5643c5f37dfa9b8d3fe791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <qualifiedname>scifir::angle::operator--</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="141" column="7" bodyfile="meca_number/angle.cpp" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1afc0d65fce6543eddf82bf3254efd497b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <qualifiedname>scifir::angle::operator--</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="142" column="7" bodyfile="meca_number/angle.cpp" bodystart="196" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ace0d6e31f63c9c375ca18124a75b08bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::invert</definition>
        <argsstring>()</argsstring>
        <name>invert</name>
        <qualifiedname>scifir::angle::invert</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="144" column="6" bodyfile="meca_number/angle.cpp" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a7d4fa76d47e1e5b18fe3a174682d79d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::angle::display</definition>
        <argsstring>(int=2) const</argsstring>
        <name>display</name>
        <qualifiedname>scifir::angle::display</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <defname>number_of_decimals</defname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="146" column="8" bodyfile="meca_number/angle.cpp" bodystart="209" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a23c090d4d89ec0f6f920c7f6c7646e48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::angle::get_grade</definition>
        <argsstring>() const</argsstring>
        <name>get_grade</name>
        <qualifiedname>scifir::angle::get_grade</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="148" column="14" bodyfile="meca_number/angle.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aae89eb053da66e9e8a5b940b4ec5e011" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::angle::get_radian</definition>
        <argsstring>() const</argsstring>
        <name>get_radian</name>
        <qualifiedname>scifir::angle::get_radian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="153" column="14" bodyfile="meca_number/angle.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classscifir_1_1angle_1a92290e7a3b1806470e55ead162f012f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::normalize_value</definition>
        <argsstring>()</argsstring>
        <name>normalize_value</name>
        <qualifiedname>scifir::angle::normalize_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="161" column="6" bodyfile="meca_number/angle.cpp" bodystart="224" bodyend="243"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="meca_number/angle.hpp" line="27" column="1" bodyfile="meca_number/angle.hpp" bodystart="28" bodyend="162"/>
    <listofallmembers>
      <member refid="classscifir_1_1angle_1aa45df1d6206b6c400493853953db8c62" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a00115e0e7930a93b2a1df63ecbaa75c2" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a3235f001adef6ce24daf63d8bf174266" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a1cf8cce75ff80c4c187fd7230daaae6b" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a84af56ff81383bf1c7800d2a365005a4" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1acdd6b4037e62064da6854dea266659f2" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a8796e11f3261006a0838944f41e97068" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1aa1c0dfabac64b68581e9e09411c72fd9" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a7a8607fc5775eb92e522b0445e4f4cac" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a7d4fa76d47e1e5b18fe3a174682d79d2" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>display</name></member>
      <member refid="classscifir_1_1angle_1a23c090d4d89ec0f6f920c7f6c7646e48" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_grade</name></member>
      <member refid="classscifir_1_1angle_1aae89eb053da66e9e8a5b940b4ec5e011" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_radian</name></member>
      <member refid="classscifir_1_1angle_1a61e436c1eb66a6ed10924e641a4a4ba3" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_value</name></member>
      <member refid="classscifir_1_1angle_1ace0d6e31f63c9c375ca18124a75b08bd" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>invert</name></member>
      <member refid="classscifir_1_1angle_1a92290e7a3b1806470e55ead162f012f1" prot="private" virt="non-virtual"><scope>scifir::angle</scope><name>normalize_value</name></member>
      <member refid="classscifir_1_1angle_1a56283b82a3dd8f71212bcfbe040a62f1" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator float</name></member>
      <member refid="classscifir_1_1angle_1a17c9db24528f6f9fb1145d9ef73a139d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*</name></member>
      <member refid="classscifir_1_1angle_1a5a2e7da446bb34c2139377ee6c42bef7" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*</name></member>
      <member refid="classscifir_1_1angle_1a3883bc2b38e50e14b2bfa2bf5f8298af" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1angle_1aa41412521ae9632cb1b5620d2ad382fd" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1angle_1a69c74103bf6a5961d1f8baf9b2f4591a" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+</name></member>
      <member refid="classscifir_1_1angle_1a601b8a24f80ddf0bb99f7948fbfc6cc2" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+</name></member>
      <member refid="classscifir_1_1angle_1a511ad114fe3feb22650961027bea453e" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator++</name></member>
      <member refid="classscifir_1_1angle_1acd47f615a78aff4354caadc0a32f1f15" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator++</name></member>
      <member refid="classscifir_1_1angle_1a2e4b95b5bc23888b0288b4d5436b6d1e" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1angle_1abca991ef6c2aa3a27022ca2f9aa54bcc" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1angle_1a6d1563f685ce144c053d82b2e0b95c4c" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-</name></member>
      <member refid="classscifir_1_1angle_1a1ea8641a14f0c5f39dd9142d5e5ebd69" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-</name></member>
      <member refid="classscifir_1_1angle_1a1774b30a6e5643c5f37dfa9b8d3fe791" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator--</name></member>
      <member refid="classscifir_1_1angle_1afc0d65fce6543eddf82bf3254efd497b" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator--</name></member>
      <member refid="classscifir_1_1angle_1ae3028b005f2989ca7a73edfcb09b2402" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1angle_1ad07edc310f6cbd8baeffe143437ed00d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1angle_1a666ac8877f6bca990ba83d50f3890a8f" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/</name></member>
      <member refid="classscifir_1_1angle_1a17f083b8d153d99d28aa84ea444d5553" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/</name></member>
      <member refid="classscifir_1_1angle_1a0b88037cb0b9fbe920674b6c2aae41a3" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1angle_1af2b1d3dafd336c9758cae76844856fde" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1angle_1ad04b271160f6013b0ead3b2282fa76c6" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a367de71ca4ca3aec060592bc21aab460" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1ab7ef54cfc2fc5dd2418e4ad1e4512f03" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a104ae02cc1cc2bf439cc8ff8675a4ab2" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a8197c58e9e2a6a7f8837bf541e56f5f3" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a74e4811b91c9c1ce62f630e1520256e8" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a698b8d48017fc18f56783182fd1738ce" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^</name></member>
      <member refid="classscifir_1_1angle_1a72551824ddbf03cba398171f5f52a13d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^</name></member>
      <member refid="classscifir_1_1angle_1a6bf546ba057201839936d3a1220f392d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^=</name></member>
      <member refid="classscifir_1_1angle_1a4a33778ad3310083f89f17023a33da0d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^=</name></member>
      <member refid="classscifir_1_1angle_1abf0a15a9992815559fdb667439d7b1b4" prot="private" virt="non-virtual"><scope>scifir::angle</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
