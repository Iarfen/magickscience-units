<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classscifir_1_1angle" kind="class" language="C++" prot="public">
    <compoundname>scifir::angle</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classscifir_1_1angle_1abf0a15a9992815559fdb667439d7b1b4" prot="private" static="no" mutable="no">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::angle::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <qualifiedname>scifir::angle::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="159" column="7" bodyfile="meca_number/angle.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classscifir_1_1angle_1aa45df1d6206b6c400493853953db8c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>()</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="30" column="1" bodyfile="meca_number/angle.cpp" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a8e899c94771eef434430adfae098b883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="31" column="1" bodyfile="meca_number/angle.cpp" bodystart="21" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ae4f664413318d5a6a651f7c3fe10eb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(angle &amp;&amp;x)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="32" column="1" bodyfile="meca_number/angle.cpp" bodystart="24" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a632d1b2d77513453de38a65b35d3dcda" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(float new_value)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="33" column="10" bodyfile="meca_number/angle.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1adf69dc5ca149888d5fbe1ee20efb7cf4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(double new_value)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref></type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="34" column="10" bodyfile="meca_number/angle.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ac778f43b489fd266d03b5c41c2f7ca95" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(long double new_value)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref></type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="35" column="10" bodyfile="meca_number/angle.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aac4b1eff12b746a5915f10bf53a00adf" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(int new_value)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="36" column="10" bodyfile="meca_number/angle.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a0a0a9c3a1b6d598bc8ad8d97749eb258" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(const string &amp;init_angle)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>init_angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="37" column="10" bodyfile="meca_number/angle.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aaa3388fcd68dd123c73b377ae662660d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>angle</name>
        <qualifiedname>scifir::angle::angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="38" column="10" bodyfile="meca_number/angle.cpp" bodystart="52" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a57e62f9c321f6864195d1fb6bb7cbc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="40" column="7" bodyfile="meca_number/angle.cpp" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a99af609f979f3f060b667cabfb02409f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(angle &amp;&amp;x)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="41" column="7" bodyfile="meca_number/angle.cpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1adaa0fc85ba37d0b29ae14daedb123a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(float new_value)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="42" column="7" bodyfile="meca_number/angle.cpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a4eaf495e7f89d276c1f3c95106b276c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(const string &amp;init_angle)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>init_angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="43" column="7" bodyfile="meca_number/angle.cpp" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a5710c5bea8baae6ec66e49cc6ae38874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator=</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="44" column="7" bodyfile="meca_number/angle.cpp" bodystart="91" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a56283b82a3dd8f71212bcfbe040a62f1" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::operator float</definition>
        <argsstring>() const</argsstring>
        <name>operator float</name>
        <qualifiedname>scifir::angle::operator float</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="46" column="10" bodyfile="meca_number/angle.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a61e436c1eb66a6ed10924e641a4a4ba3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &amp;</type>
        <definition>const float &amp; scifir::angle::get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <qualifiedname>scifir::angle::get_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="51" column="20" bodyfile="meca_number/angle.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aeb8b8bcb20f46bb47f557fe2d356df1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator+</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator+</name>
        <qualifiedname>scifir::angle::operator+</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="56" column="7" bodyfile="meca_number/angle.cpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a050446b4fa277444f95f1d069e139a17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator-</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator-</name>
        <qualifiedname>scifir::angle::operator-</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="57" column="7" bodyfile="meca_number/angle.cpp" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a062e381e2f6f78713c8e07fa74fdc8f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator*</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator*</name>
        <qualifiedname>scifir::angle::operator*</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="58" column="7" bodyfile="meca_number/angle.cpp" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aac7d61310d1d7ba483bba1504b1e2725" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator/</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator/</name>
        <qualifiedname>scifir::angle::operator/</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="59" column="7" bodyfile="meca_number/angle.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a018ddeef5a138422b2ee7c602688da85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator^</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator^</name>
        <qualifiedname>scifir::angle::operator^</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="60" column="7" bodyfile="meca_number/angle.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a0ea46f05ced211a6c89d1aa9a3508171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator+=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator+=</name>
        <qualifiedname>scifir::angle::operator+=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="61" column="6" bodyfile="meca_number/angle.cpp" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a7e81004ba9897e0607bacfe156410b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator-=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator-=</name>
        <qualifiedname>scifir::angle::operator-=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="62" column="6" bodyfile="meca_number/angle.cpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a14bf7aed7303247d2166b5619f9a6777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator*=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator*=</name>
        <qualifiedname>scifir::angle::operator*=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="63" column="6" bodyfile="meca_number/angle.cpp" bodystart="142" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aa677506e6c1de245e90fd6de6d681f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator/=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator/=</name>
        <qualifiedname>scifir::angle::operator/=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="64" column="6" bodyfile="meca_number/angle.cpp" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a270692c7ced80eb091d193a68bfe063c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator^=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator^=</name>
        <qualifiedname>scifir::angle::operator^=</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="65" column="6" bodyfile="meca_number/angle.cpp" bodystart="154" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ad47fbc165c2771187a23714f64c37fe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator=</definition>
        <argsstring>(T new_value)</argsstring>
        <name>operator=</name>
        <qualifiedname>scifir::angle::operator=</qualifiedname>
        <param>
          <type>T</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="68" column="6" bodyfile="meca_number/angle.hpp" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1af1a0b2043c14e50d4471a03808f812c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator+</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator+</name>
        <qualifiedname>scifir::angle::operator+</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="75" column="7" bodyfile="meca_number/angle.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1af331f35b29c55719d2187a7d65c36025" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator-</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator-</name>
        <qualifiedname>scifir::angle::operator-</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="81" column="7" bodyfile="meca_number/angle.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a580bb02e8a80fc26d84efb7967fbec56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator*</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator*</name>
        <qualifiedname>scifir::angle::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="87" column="7" bodyfile="meca_number/angle.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a1c45515c33467f73900dc018e346860d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator/</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator/</name>
        <qualifiedname>scifir::angle::operator/</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="93" column="7" bodyfile="meca_number/angle.hpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aaec67828caba34b87964960243e351bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator^</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator^</name>
        <qualifiedname>scifir::angle::operator^</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="99" column="7" bodyfile="meca_number/angle.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ac18da16234c449eb4932addec7301292" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator+=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator+=</name>
        <qualifiedname>scifir::angle::operator+=</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="105" column="6" bodyfile="meca_number/angle.hpp" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ae4d9570eb178dda7e1afdc92fc843d23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator-=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator-=</name>
        <qualifiedname>scifir::angle::operator-=</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="112" column="6" bodyfile="meca_number/angle.hpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1adf6afd81dcc9151caaed819cb8c54ffc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator*=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator*=</name>
        <qualifiedname>scifir::angle::operator*=</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="119" column="6" bodyfile="meca_number/angle.hpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a07dd1540554a8aaeec8be28414ae0fdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator/=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator/=</name>
        <qualifiedname>scifir::angle::operator/=</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="126" column="6" bodyfile="meca_number/angle.hpp" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a0e24aeb55b619bb39ea6f83dbfaba385" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref></type>
            <defval><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">enable_if</ref>&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::operator^=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator^=</name>
        <qualifiedname>scifir::angle::operator^=</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="133" column="6" bodyfile="meca_number/angle.hpp" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a511ad114fe3feb22650961027bea453e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>scifir::angle::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="139" column="7" bodyfile="meca_number/angle.cpp" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1acd47f615a78aff4354caadc0a32f1f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>scifir::angle::operator++</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="140" column="7" bodyfile="meca_number/angle.cpp" bodystart="166" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a1774b30a6e5643c5f37dfa9b8d3fe791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; scifir::angle::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <qualifiedname>scifir::angle::operator--</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="141" column="7" bodyfile="meca_number/angle.cpp" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1afc0d65fce6543eddf82bf3254efd497b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <qualifiedname>scifir::angle::operator--</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="142" column="7" bodyfile="meca_number/angle.cpp" bodystart="179" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ace0d6e31f63c9c375ca18124a75b08bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::invert</definition>
        <argsstring>()</argsstring>
        <name>invert</name>
        <qualifiedname>scifir::angle::invert</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="144" column="6" bodyfile="meca_number/angle.cpp" bodystart="186" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ac80e26981e194771bd9f833f8c5d1f9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::angle::display</definition>
        <argsstring>(int number_of_decimals=2) const</argsstring>
        <name>display</name>
        <qualifiedname>scifir::angle::display</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="146" column="8" bodyfile="meca_number/angle.cpp" bodystart="192" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a23c090d4d89ec0f6f920c7f6c7646e48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::angle::get_grade</definition>
        <argsstring>() const</argsstring>
        <name>get_grade</name>
        <qualifiedname>scifir::angle::get_grade</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="148" column="14" bodyfile="meca_number/angle.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aae89eb053da66e9e8a5b940b4ec5e011" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::angle::get_radian</definition>
        <argsstring>() const</argsstring>
        <name>get_radian</name>
        <qualifiedname>scifir::angle::get_radian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="153" column="14" bodyfile="meca_number/angle.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classscifir_1_1angle_1a92290e7a3b1806470e55ead162f012f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::normalize_value</definition>
        <argsstring>()</argsstring>
        <name>normalize_value</name>
        <qualifiedname>scifir::angle::normalize_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="161" column="6" bodyfile="meca_number/angle.cpp" bodystart="207" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a4fe977fb634b4f37fa55717d7acd6cfb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">void</ref></type>
        <definition>void scifir::angle::initialize_from_string</definition>
        <argsstring>(string init_angle)</argsstring>
        <name>initialize_from_string</name>
        <qualifiedname>scifir::angle::initialize_from_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
          <declname>init_angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="162" column="6" bodyfile="meca_number/angle.cpp" bodystart="228" bodyend="239"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="meca_number/angle.hpp" line="27" column="1" bodyfile="meca_number/angle.hpp" bodystart="28" bodyend="163"/>
    <listofallmembers>
      <member refid="classscifir_1_1angle_1aa45df1d6206b6c400493853953db8c62" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a8e899c94771eef434430adfae098b883" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1ae4f664413318d5a6a651f7c3fe10eb04" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a632d1b2d77513453de38a65b35d3dcda" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1adf69dc5ca149888d5fbe1ee20efb7cf4" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1ac778f43b489fd266d03b5c41c2f7ca95" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1aac4b1eff12b746a5915f10bf53a00adf" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a0a0a9c3a1b6d598bc8ad8d97749eb258" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1aaa3388fcd68dd123c73b377ae662660d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1ac80e26981e194771bd9f833f8c5d1f9a" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>display</name></member>
      <member refid="classscifir_1_1angle_1a23c090d4d89ec0f6f920c7f6c7646e48" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_grade</name></member>
      <member refid="classscifir_1_1angle_1aae89eb053da66e9e8a5b940b4ec5e011" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_radian</name></member>
      <member refid="classscifir_1_1angle_1a61e436c1eb66a6ed10924e641a4a4ba3" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_value</name></member>
      <member refid="classscifir_1_1angle_1a4fe977fb634b4f37fa55717d7acd6cfb" prot="private" virt="non-virtual"><scope>scifir::angle</scope><name>initialize_from_string</name></member>
      <member refid="classscifir_1_1angle_1ace0d6e31f63c9c375ca18124a75b08bd" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>invert</name></member>
      <member refid="classscifir_1_1angle_1a92290e7a3b1806470e55ead162f012f1" prot="private" virt="non-virtual"><scope>scifir::angle</scope><name>normalize_value</name></member>
      <member refid="classscifir_1_1angle_1a56283b82a3dd8f71212bcfbe040a62f1" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator float</name></member>
      <member refid="classscifir_1_1angle_1a062e381e2f6f78713c8e07fa74fdc8f4" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*</name></member>
      <member refid="classscifir_1_1angle_1a580bb02e8a80fc26d84efb7967fbec56" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*</name></member>
      <member refid="classscifir_1_1angle_1a14bf7aed7303247d2166b5619f9a6777" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1angle_1adf6afd81dcc9151caaed819cb8c54ffc" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1angle_1aeb8b8bcb20f46bb47f557fe2d356df1a" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+</name></member>
      <member refid="classscifir_1_1angle_1af1a0b2043c14e50d4471a03808f812c6" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+</name></member>
      <member refid="classscifir_1_1angle_1a511ad114fe3feb22650961027bea453e" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator++</name></member>
      <member refid="classscifir_1_1angle_1acd47f615a78aff4354caadc0a32f1f15" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator++</name></member>
      <member refid="classscifir_1_1angle_1a0ea46f05ced211a6c89d1aa9a3508171" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1angle_1ac18da16234c449eb4932addec7301292" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1angle_1a050446b4fa277444f95f1d069e139a17" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-</name></member>
      <member refid="classscifir_1_1angle_1af331f35b29c55719d2187a7d65c36025" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-</name></member>
      <member refid="classscifir_1_1angle_1a1774b30a6e5643c5f37dfa9b8d3fe791" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator--</name></member>
      <member refid="classscifir_1_1angle_1afc0d65fce6543eddf82bf3254efd497b" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator--</name></member>
      <member refid="classscifir_1_1angle_1a7e81004ba9897e0607bacfe156410b88" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1angle_1ae4d9570eb178dda7e1afdc92fc843d23" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1angle_1aac7d61310d1d7ba483bba1504b1e2725" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/</name></member>
      <member refid="classscifir_1_1angle_1a1c45515c33467f73900dc018e346860d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/</name></member>
      <member refid="classscifir_1_1angle_1aa677506e6c1de245e90fd6de6d681f34" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1angle_1a07dd1540554a8aaeec8be28414ae0fdf" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1angle_1a57e62f9c321f6864195d1fb6bb7cbc4d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a99af609f979f3f060b667cabfb02409f" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1adaa0fc85ba37d0b29ae14daedb123a96" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a4eaf495e7f89d276c1f3c95106b276c9" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a5710c5bea8baae6ec66e49cc6ae38874" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1ad47fbc165c2771187a23714f64c37fe0" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a018ddeef5a138422b2ee7c602688da85" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^</name></member>
      <member refid="classscifir_1_1angle_1aaec67828caba34b87964960243e351bd" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^</name></member>
      <member refid="classscifir_1_1angle_1a270692c7ced80eb091d193a68bfe063c" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^=</name></member>
      <member refid="classscifir_1_1angle_1a0e24aeb55b619bb39ea6f83dbfaba385" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^=</name></member>
      <member refid="classscifir_1_1angle_1abf0a15a9992815559fdb667439d7b1b4" prot="private" virt="non-virtual"><scope>scifir::angle</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
