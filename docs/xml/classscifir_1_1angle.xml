<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classscifir_1_1angle" kind="class" language="C++" prot="public">
    <compoundname>scifir::angle</compoundname>
    <includes refid="angle_8hpp" local="no">angle.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" prot="public" static="no" strong="no">
        <type>int8_t</type>
        <name>type</name>
        <enumvalue id="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4a954b9343ae2db0c68edab65f1a6b1a95" prot="public">
          <name>DEGREE</name>
          <briefdescription>
<para>The angle is in DEGREE. A degree is defined as a 1/360 part of a circle. The entire circle corresponds to 360 degrees. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4afc1ecba05b162f0e97a88176b5eab48e" prot="public">
          <name>RADIAN</name>
          <briefdescription>
<para>The angle is in RADIAN. A radian is defined as the length of the perimeter of the circle that conforms an angle. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Represents an type of angle, which can be a degree or a radian. The value of the angle inside the angle class is always stored in degrees, but can be get in radian if it&apos;s needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="30" column="1" bodyfile="meca_number/angle.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>angle::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
<para>Value of the angle. It is stored in degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="161" column="7" bodyfile="meca_number/angle.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classscifir_1_1angle_1ad0dbfb238b85b3026f1ee85d77b46f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>angle::angle</definition>
        <argsstring>()</argsstring>
        <name>angle</name>
        <briefdescription>
<para>Default constructor of angle. The value is set to 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="32" column="1" bodyfile="meca_number/angle.cpp" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a3733278927c8b3923a12025d7a9da355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>angle::angle</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy constructor of angle. The value is copied from the angle x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="33" column="1" bodyfile="meca_number/angle.cpp" bodystart="21" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1acd585db51b6c10fa4ed7658bd84792e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>angle::angle</definition>
        <argsstring>(angle &amp;&amp;x)</argsstring>
        <name>angle</name>
        <param>
          <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Move constructor of angle. The value is moved from the angle x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="34" column="1" bodyfile="meca_number/angle.cpp" bodystart="24" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a5614a457bb4e581b6b2f7032978e0e8b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(float new_value, angle::type init_type=angle::DEGREE)</argsstring>
        <name>angle</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">angle::type</ref></type>
          <declname>init_type</declname>
          <defval><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4a954b9343ae2db0c68edab65f1a6b1a95" kindref="member">angle::DEGREE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="35" column="10" bodyfile="meca_number/angle.cpp" bodystart="27" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aabda1cce5564bb882153637faf0cba12" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(double new_value, angle::type init_type=angle::DEGREE)</argsstring>
        <name>angle</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">angle::type</ref></type>
          <declname>init_type</declname>
          <defval><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4a954b9343ae2db0c68edab65f1a6b1a95" kindref="member">angle::DEGREE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="36" column="10" bodyfile="meca_number/angle.cpp" bodystart="40" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ab771878a9aa88b15c9173665856fb8ea" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(long double new_value, angle::type init_type=angle::DEGREE)</argsstring>
        <name>angle</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">angle::type</ref></type>
          <declname>init_type</declname>
          <defval><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4a954b9343ae2db0c68edab65f1a6b1a95" kindref="member">angle::DEGREE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="37" column="10" bodyfile="meca_number/angle.cpp" bodystart="53" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a6a1921d9190d415b2c4e448d42575a6c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::angle::angle</definition>
        <argsstring>(int new_value, angle::type init_type=angle::DEGREE)</argsstring>
        <name>angle</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">angle::type</ref></type>
          <declname>init_type</declname>
          <defval><ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4a954b9343ae2db0c68edab65f1a6b1a95" kindref="member">angle::DEGREE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="38" column="10" bodyfile="meca_number/angle.cpp" bodystart="66" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a06972e9acf45342478b0ec481dcbd321" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>angle::angle</definition>
        <argsstring>(const string &amp;init_angle)</argsstring>
        <name>angle</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_angle</declname>
        </param>
        <briefdescription>
<para>Constructor of angle. The value is initialized from the initialization string of angle, which uses the character 00B0 or the character 00BA to represent degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="39" column="10" bodyfile="meca_number/angle.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a0aa8e5be255a2c960336f90c4c91f8f5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>angle::angle</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Constructor of angle. The value is initialized from the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x, if the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> has empty dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="40" column="10" bodyfile="meca_number/angle.cpp" bodystart="84" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a9022ae1a46ab7da43e09dfba88c67d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; angle::operator=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy assignment of angle. The value is copied to the value of angle x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="42" column="7" bodyfile="meca_number/angle.cpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a690b723759f9aa6ed67d450532dec773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; angle::operator=</definition>
        <argsstring>(angle &amp;&amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Move assignment of angle. The value is moved from the value of angle x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="43" column="7" bodyfile="meca_number/angle.cpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aa5337bfab3026bfd36832d62650e538b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; angle::operator=</definition>
        <argsstring>(float new_value)</argsstring>
        <name>operator=</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
<para>Assignment operator. The value is copied from the float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="44" column="7" bodyfile="meca_number/angle.cpp" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1adf34ae9c62d443cae4f81af7da2e1d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; angle::operator=</definition>
        <argsstring>(const string &amp;init_angle)</argsstring>
        <name>operator=</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_angle</declname>
        </param>
        <briefdescription>
<para>Assignment operator. An initialization string is used to set the value, which contains the character 00B0 or the character 00BA to represent degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="45" column="7" bodyfile="meca_number/angle.cpp" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a043644c202f2dadfeeae10ecf9f8b0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; angle::operator=</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Assignment operator. The value of the angle is set to the value of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x, only if the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> has empty dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="46" column="7" bodyfile="meca_number/angle.cpp" bodystart="123" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ae5362046e202f53179be6f64acb56b79" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>angle::operator float</definition>
        <argsstring>() const</argsstring>
        <name>operator float</name>
        <briefdescription>
<para>Cast angle to a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="48" column="10" bodyfile="meca_number/angle.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float &amp;</type>
        <definition>const float &amp; angle::get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
<para>Gets the value of the angle, in degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="53" column="20" bodyfile="meca_number/angle.hpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a46e28ea538450dd3e8934db480366c88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator+</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the sum of other two. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="58" column="7" bodyfile="meca_number/angle.cpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a734a40d34319aae1f5bee1fc635c17f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator-</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the substraction of this angle and another angle x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="59" column="7" bodyfile="meca_number/angle.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aebb8408ee687fd71e84c826d349c7e09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator*</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the multiplication of other two. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="60" column="7" bodyfile="meca_number/angle.cpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ade49ca8562a9cbdb541d24ebc937002e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator/</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the division of this angle and another angle x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="61" column="7" bodyfile="meca_number/angle.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1af303c6f6396668a6998be4f56044b7ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator^</definition>
        <argsstring>(const angle &amp;x) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle by powering the angle class with the value of another angle x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="62" column="7" bodyfile="meca_number/angle.cpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a929094036e2d0e5fa83f9ce6c8abee6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angle::operator+=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Sums the value of the angle x to the value of this angle. The value is normalized after. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="63" column="6" bodyfile="meca_number/angle.cpp" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a881cd5cdde5e3fdf198d9914996228b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angle::operator-=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Substract the value of the angle x to the value of this angle. The value is normalized after. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="64" column="6" bodyfile="meca_number/angle.cpp" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1afe09b0184ea5d2f46f97b3142ae4fd03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angle::operator*=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Multiplies the value of this angle with the value of angle x. The value is normalized after. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="65" column="6" bodyfile="meca_number/angle.cpp" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a5d57239e7dc601fd0742be6bc09aa14e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angle::operator/=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Divides the value of this angle with the value of angle x. The value is normalized after. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="66" column="6" bodyfile="meca_number/angle.cpp" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a116f629dba37b7c8ba2056d582d3677d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angle::operator^=</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Powers the value of this angle with the value of angle x. The value is normalized after. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="67" column="6" bodyfile="meca_number/angle.cpp" bodystart="186" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ab4232d4a7c763ba5202379e5a4bc15df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void angle::operator=</definition>
        <argsstring>(T new_value)</argsstring>
        <name>operator=</name>
        <param>
          <type>T</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
<para>Sets the value to the value of some numeric type, casting it to a float first, and normalizing the value after that. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="70" column="6" bodyfile="meca_number/angle.hpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ad080e98d7074a899a4ec374f4fdecdac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator+</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator+</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the sum of a numeric type with the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="77" column="7" bodyfile="meca_number/angle.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a6b8f5b864cbda129b8ed37b0c84045f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator-</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator-</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the substraction of the value of this angle with a numeric type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="83" column="7" bodyfile="meca_number/angle.hpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a28155a06cc1bed061a72f61004bd6dee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator*</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the multiplication of a numeric type with the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="89" column="7" bodyfile="meca_number/angle.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ad333538b43349cfcb6a1944f45127b3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator/</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator/</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the division of a numeric type with the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="95" column="7" bodyfile="meca_number/angle.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a54ee78fca1e7d2d8f0314dd0f9cd9340" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator^</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator^</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a new angle as the power of the value of this angle with a numeric type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="101" column="7" bodyfile="meca_number/angle.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a1e47f99c79ee9ed1defa85708577e96d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void angle::operator+=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator+=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Sums a numeric type to the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="107" column="6" bodyfile="meca_number/angle.hpp" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ad2bb2917dbfb4e614c519e87c87bf656" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void angle::operator-=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator-=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Substracts a numeric type to the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="114" column="6" bodyfile="meca_number/angle.hpp" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a20f5bf44b97ee0ff7d561de854e88de5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void angle::operator*=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Multiplies a numeric type to the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="121" column="6" bodyfile="meca_number/angle.hpp" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a5d1156d4948464c8cc6550aefd05a5b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void angle::operator/=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator/=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Divides a numeric type to the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="128" column="6" bodyfile="meca_number/angle.hpp" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a6ac4db37672545a8e5b676f1c433ac41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void angle::operator^=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator^=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Powers a numeric type to the value of this angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="135" column="6" bodyfile="meca_number/angle.hpp" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a60e4a700325fe5eb2be54ee7dc68f2c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; angle::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Increments the value by one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="141" column="7" bodyfile="meca_number/angle.cpp" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a120d4caf3f743d1afd021ac9ebf57f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Increments the value by one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="142" column="7" bodyfile="meca_number/angle.cpp" bodystart="198" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a032adc6e26934ab6796358b8f008979c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
        <definition>angle &amp; angle::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Decrements the value by one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="143" column="7" bodyfile="meca_number/angle.cpp" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aac71dcdd3a29da84ff457bb5f1f12f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle angle::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Decrements the value by one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="144" column="7" bodyfile="meca_number/angle.cpp" bodystart="211" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1ac51fae1ea055292646899eee80c795a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angle::invert</definition>
        <argsstring>()</argsstring>
        <name>invert</name>
        <briefdescription>
<para>Inverts the angle to the opposite direction in a 2D plane, which is to add 180 degrees. The value is normalized after. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="146" column="6" bodyfile="meca_number/angle.cpp" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1adf5d66225219ec791fc16df004f609d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string angle::display</definition>
        <argsstring>(int number_of_decimals=2) const</argsstring>
        <name>display</name>
        <param>
          <type>int</type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Creates an string from the angle, with the value and the degrees symbol. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="148" column="8" bodyfile="meca_number/angle.cpp" bodystart="224" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a5a4d42b33e811ce6cbfe4071fac3ef97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float angle::get_degree</definition>
        <argsstring>() const</argsstring>
        <name>get_degree</name>
        <briefdescription>
<para>Gets the value of the angle in degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="150" column="14" bodyfile="meca_number/angle.hpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1aa00ccd7a91c0118e83e7d36fd506d644" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float angle::get_radian</definition>
        <argsstring>() const</argsstring>
        <name>get_radian</name>
        <briefdescription>
<para>Gets the value of the angle in radians. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="155" column="14" bodyfile="meca_number/angle.hpp" bodystart="155" bodyend="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classscifir_1_1angle_1ae5fd03c5778acc1b42c3a7aba88a77b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angle::normalize_value</definition>
        <argsstring>()</argsstring>
        <name>normalize_value</name>
        <briefdescription>
<para><bold>Internal function</bold>. Normalizes the value, which means to maintain the same angle within 0 and 360. If the value is lower or greather it gets converted to their equivalent counterpart within this range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="163" column="6" bodyfile="meca_number/angle.cpp" bodystart="239" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1angle_1a05641e654ba840e2a80c43406a82dfe9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void angle::initialize_from_string</definition>
        <argsstring>(string init_angle)</argsstring>
        <name>initialize_from_string</name>
        <param>
          <type>string</type>
          <declname>init_angle</declname>
        </param>
        <briefdescription>
<para><bold>Internal function</bold>. Sets the value of the angle to a new value using the initialization string of angles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="164" column="6" bodyfile="meca_number/angle.cpp" bodystart="260" bodyend="271"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that allows to work with angles. Each angle sizes 4 bytes. </para>
    </briefdescription>
    <detaileddescription>
<para>angle is a class that allows to work with angles, more in degrees than in radians. The value of the angle is always stored inside the class in degrees, and it can be get in radians with the to_radian() function. </para>
    </detaileddescription>
    <location file="meca_number/angle.hpp" line="27" column="1" bodyfile="meca_number/angle.hpp" bodystart="28" bodyend="165"/>
    <listofallmembers>
      <member refid="classscifir_1_1angle_1ad0dbfb238b85b3026f1ee85d77b46f64" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a3733278927c8b3923a12025d7a9da355" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1acd585db51b6c10fa4ed7658bd84792e6" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a5614a457bb4e581b6b2f7032978e0e8b" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1aabda1cce5564bb882153637faf0cba12" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1ab771878a9aa88b15c9173665856fb8ea" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a6a1921d9190d415b2c4e448d42575a6c" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a06972e9acf45342478b0ec481dcbd321" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a0aa8e5be255a2c960336f90c4c91f8f5" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>angle</name></member>
      <member refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4a954b9343ae2db0c68edab65f1a6b1a95" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>DEGREE</name></member>
      <member refid="classscifir_1_1angle_1adf5d66225219ec791fc16df004f609d9" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>display</name></member>
      <member refid="classscifir_1_1angle_1a5a4d42b33e811ce6cbfe4071fac3ef97" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_degree</name></member>
      <member refid="classscifir_1_1angle_1aa00ccd7a91c0118e83e7d36fd506d644" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_radian</name></member>
      <member refid="classscifir_1_1angle_1a0ee2dddd2d514a707cc3f98e496cf8a1" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>get_value</name></member>
      <member refid="classscifir_1_1angle_1a05641e654ba840e2a80c43406a82dfe9" prot="private" virt="non-virtual"><scope>scifir::angle</scope><name>initialize_from_string</name></member>
      <member refid="classscifir_1_1angle_1ac51fae1ea055292646899eee80c795a6" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>invert</name></member>
      <member refid="classscifir_1_1angle_1ae5fd03c5778acc1b42c3a7aba88a77b9" prot="private" virt="non-virtual"><scope>scifir::angle</scope><name>normalize_value</name></member>
      <member refid="classscifir_1_1angle_1ae5362046e202f53179be6f64acb56b79" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator float</name></member>
      <member refid="classscifir_1_1angle_1aebb8408ee687fd71e84c826d349c7e09" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*</name></member>
      <member refid="classscifir_1_1angle_1a28155a06cc1bed061a72f61004bd6dee" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*</name></member>
      <member refid="classscifir_1_1angle_1afe09b0184ea5d2f46f97b3142ae4fd03" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1angle_1a20f5bf44b97ee0ff7d561de854e88de5" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1angle_1a46e28ea538450dd3e8934db480366c88" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+</name></member>
      <member refid="classscifir_1_1angle_1ad080e98d7074a899a4ec374f4fdecdac" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+</name></member>
      <member refid="classscifir_1_1angle_1a60e4a700325fe5eb2be54ee7dc68f2c5" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator++</name></member>
      <member refid="classscifir_1_1angle_1a120d4caf3f743d1afd021ac9ebf57f55" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator++</name></member>
      <member refid="classscifir_1_1angle_1a929094036e2d0e5fa83f9ce6c8abee6f" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1angle_1a1e47f99c79ee9ed1defa85708577e96d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1angle_1a734a40d34319aae1f5bee1fc635c17f3" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-</name></member>
      <member refid="classscifir_1_1angle_1a6b8f5b864cbda129b8ed37b0c84045f7" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-</name></member>
      <member refid="classscifir_1_1angle_1a032adc6e26934ab6796358b8f008979c" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator--</name></member>
      <member refid="classscifir_1_1angle_1aac71dcdd3a29da84ff457bb5f1f12f9e" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator--</name></member>
      <member refid="classscifir_1_1angle_1a881cd5cdde5e3fdf198d9914996228b7" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1angle_1ad2bb2917dbfb4e614c519e87c87bf656" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1angle_1ade49ca8562a9cbdb541d24ebc937002e" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/</name></member>
      <member refid="classscifir_1_1angle_1ad333538b43349cfcb6a1944f45127b3c" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/</name></member>
      <member refid="classscifir_1_1angle_1a5d57239e7dc601fd0742be6bc09aa14e" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1angle_1a5d1156d4948464c8cc6550aefd05a5b1" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1angle_1a9022ae1a46ab7da43e09dfba88c67d4a" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a690b723759f9aa6ed67d450532dec773" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1aa5337bfab3026bfd36832d62650e538b" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1adf34ae9c62d443cae4f81af7da2e1d77" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1a043644c202f2dadfeeae10ecf9f8b0ad" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1ab4232d4a7c763ba5202379e5a4bc15df" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator=</name></member>
      <member refid="classscifir_1_1angle_1af303c6f6396668a6998be4f56044b7ad" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^</name></member>
      <member refid="classscifir_1_1angle_1a54ee78fca1e7d2d8f0314dd0f9cd9340" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^</name></member>
      <member refid="classscifir_1_1angle_1a116f629dba37b7c8ba2056d582d3677d" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^=</name></member>
      <member refid="classscifir_1_1angle_1a6ac4db37672545a8e5b676f1c433ac41" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>operator^=</name></member>
      <member refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4afc1ecba05b162f0e97a88176b5eab48e" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>RADIAN</name></member>
      <member refid="classscifir_1_1angle_1a414ab17c4da94bdd62235d1f2245c0f4" prot="public" virt="non-virtual"><scope>scifir::angle</scope><name>type</name></member>
      <member refid="classscifir_1_1angle_1a3cafe677d680efd536fad4822885ffc2" prot="private" virt="non-virtual"><scope>scifir::angle</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
