<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classscifir_1_1matrix" kind="class" language="C++" prot="public">
    <compoundname>scifir::matrix</compoundname>
    <includes refid="matrix_8hpp" local="no">matrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>int</type>
        <declname>M</declname>
        <defname>M</defname>
      </param>
      <param>
        <type>int</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classscifir_1_1matrix_1afab761b195a20c218b6cf2bbfb9a35f7" prot="private" static="no" mutable="no">
        <type>vector&lt; vector&lt; T &gt; &gt;</type>
        <definition>vector&lt;vector&lt;T&gt; &gt; scifir::matrix&lt; T, M, N &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="227" column="8" bodyfile="util/matrix.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classscifir_1_1matrix_1ae9a6f954052f227f67eac65dcdc8f5f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>scifir::matrix&lt; T, M, N &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="18" column="1" bodyfile="util/matrix.hpp" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a779306019e893736d9acf649acbe174f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>scifir::matrix&lt; T, M, N &gt;::matrix</definition>
        <argsstring>(initializer_list&lt; vector&lt; T &gt;&gt; x)</argsstring>
        <name>matrix</name>
        <param>
          <type>initializer_list&lt; vector&lt; T &gt;&gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="21" column="1" bodyfile="util/matrix.hpp" bodystart="21" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a147351af054e802bbab52ce9ac19babc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, N &gt; *</type>
        <definition>virtual matrix&lt;T, M, N&gt;* scifir::matrix&lt; T, M, N &gt;::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="45" column="16" bodyfile="util/matrix.hpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1aaf593964a6daa6b2d9ff9341f5014724" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int scifir::matrix&lt; T, M, N &gt;::row_size</definition>
        <argsstring>() const</argsstring>
        <name>row_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="50" column="12" bodyfile="util/matrix.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a51f70b483779be5047a15687cb0a46c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int scifir::matrix&lt; T, M, N &gt;::column_size</definition>
        <argsstring>() const</argsstring>
        <name>column_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="55" column="12" bodyfile="util/matrix.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a66a001baecba91581e1c6e00d8ad971a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, 1, N &gt;</type>
        <definition>matrix&lt;T,1,N&gt; scifir::matrix&lt; T, M, N &gt;::row</definition>
        <argsstring>(int i) const</argsstring>
        <name>row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="60" column="8" bodyfile="util/matrix.hpp" bodystart="60" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1ac76feb5325470c5d97a4cbc3aab022a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, 1 &gt;</type>
        <definition>matrix&lt;T,M,1&gt; scifir::matrix&lt; T, M, N &gt;::column</definition>
        <argsstring>(int j) const</argsstring>
        <name>column</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="74" column="8" bodyfile="util/matrix.hpp" bodystart="74" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a00de6dff848e62f6a30956d2fdc5c012" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; scifir::matrix&lt; T, M, N &gt;::operator()</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="88" column="9" bodyfile="util/matrix.hpp" bodystart="88" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1aa5013c937650f04dbb3d07e916b26407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; scifir::matrix&lt; T, M, N &gt;::operator()</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="97" column="3" bodyfile="util/matrix.hpp" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1ae17b1561c73c868de28ee1400b8e6984" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, N &gt;</type>
        <definition>matrix&lt;T, M, N&gt; scifir::matrix&lt; T, M, N &gt;::operator+</definition>
        <argsstring>(const matrix&lt; T, M, N &gt; &amp;x)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, N &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="106" column="8" bodyfile="util/matrix.hpp" bodystart="106" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a37b800e8fa0fdd8dc0b07dd0b3fdd028" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, N &gt;</type>
        <definition>matrix&lt;T, M, N&gt; scifir::matrix&lt; T, M, N &gt;::operator-</definition>
        <argsstring>(const matrix&lt; T, M, N &gt; &amp;x)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, N &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="113" column="8" bodyfile="util/matrix.hpp" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1ae813579d5d39dbe241973c8a8dc6e4d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N2</declname>
            <defname>N2</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, N, N2 &gt;</type>
        <definition>matrix&lt;T, N, N2&gt; scifir::matrix&lt; T, M, N &gt;::operator*</definition>
        <argsstring>(const matrix&lt; T, N, N2 &gt; &amp;x)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, N, N2 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="121" column="8" bodyfile="util/matrix.hpp" bodystart="121" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1aa0f01330b32f00e3f451c5da1b88b328" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__integer__number" kindref="compound">is_integer_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, N &gt;</type>
        <definition>matrix&lt;T, M, N&gt; scifir::matrix&lt; T, M, N &gt;::operator^</definition>
        <argsstring>(U x)</argsstring>
        <name>operator^</name>
        <param>
          <type>U</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="140" column="8" bodyfile="util/matrix.hpp" bodystart="140" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1afc5ecec3434dcd9688830c003797e6cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void scifir::matrix&lt; T, M, N &gt;::operator+=</definition>
        <argsstring>(const matrix&lt; T, M, N &gt; &amp;x)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, N &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="147" column="6" bodyfile="util/matrix.hpp" bodystart="147" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a96e897f2ae5b6328722bff62fcdfc3e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void scifir::matrix&lt; T, M, N &gt;::operator-=</definition>
        <argsstring>(const matrix&lt; T, M, N &gt; &amp;x)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, M, N &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="158" column="6" bodyfile="util/matrix.hpp" bodystart="158" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1adcd780a7c399b7591067c8548c2ff230" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__integer__number" kindref="compound">is_integer_number</ref>&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scifir::matrix&lt; T, M, N &gt;::operator^=</definition>
        <argsstring>(U x)</argsstring>
        <name>operator^=</name>
        <param>
          <type>U</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="170" column="6" bodyfile="util/matrix.hpp" bodystart="170" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a1298c000367ce8d6b245f7f5d033f859" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1matrix" kindref="compound">matrix</ref>&lt; T, N, M &gt;</type>
        <definition>matrix&lt;T, N, M&gt; scifir::matrix&lt; T, M, N &gt;::t</definition>
        <argsstring>() const</argsstring>
        <name>t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="186" column="8" bodyfile="util/matrix.hpp" bodystart="186" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a52a8d6159277aea92e9d9b7d78e66a29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool scifir::matrix&lt; T, M, N &gt;::is_square</definition>
        <argsstring>() const</argsstring>
        <name>is_square</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="199" column="6" bodyfile="util/matrix.hpp" bodystart="199" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a0c868e503472d409cd5a7ce1a1ea59d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool scifir::matrix&lt; T, M, N &gt;::is_diagonal</definition>
        <argsstring>() const</argsstring>
        <name>is_diagonal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="211" column="6" bodyfile="util/matrix.hpp" bodystart="211" bodyend="224"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classscifir_1_1matrix_1ab7e757f6d272a6178bb13ef2673332ef" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool scifir::matrix&lt; T, M, N &gt;::outside_row_limits</definition>
        <argsstring>(int i) const</argsstring>
        <name>outside_row_limits</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="229" column="6" bodyfile="util/matrix.hpp" bodystart="229" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a7998c211e46afaeb9671bfd2afd0fb6c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool scifir::matrix&lt; T, M, N &gt;::outside_column_limits</definition>
        <argsstring>(int i) const</argsstring>
        <name>outside_column_limits</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="238" column="6" bodyfile="util/matrix.hpp" bodystart="238" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1matrix_1a95c9a574eb6c5af2138de6cf2b2a18de" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool scifir::matrix&lt; T, M, N &gt;::outside_limits</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>outside_limits</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/matrix.hpp" line="247" column="6" bodyfile="util/matrix.hpp" bodystart="247" bodyend="254"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="util/matrix.hpp" line="15" column="1" bodyfile="util/matrix.hpp" bodystart="16" bodyend="255"/>
    <listofallmembers>
      <member refid="classscifir_1_1matrix_1a147351af054e802bbab52ce9ac19babc" prot="public" virt="virtual"><scope>scifir::matrix</scope><name>clone</name></member>
      <member refid="classscifir_1_1matrix_1ac76feb5325470c5d97a4cbc3aab022a5" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>column</name></member>
      <member refid="classscifir_1_1matrix_1a51f70b483779be5047a15687cb0a46c7" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>column_size</name></member>
      <member refid="classscifir_1_1matrix_1afab761b195a20c218b6cf2bbfb9a35f7" prot="private" virt="non-virtual"><scope>scifir::matrix</scope><name>data</name></member>
      <member refid="classscifir_1_1matrix_1a0c868e503472d409cd5a7ce1a1ea59d1" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>is_diagonal</name></member>
      <member refid="classscifir_1_1matrix_1a52a8d6159277aea92e9d9b7d78e66a29" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>is_square</name></member>
      <member refid="classscifir_1_1matrix_1ae9a6f954052f227f67eac65dcdc8f5f6" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>matrix</name></member>
      <member refid="classscifir_1_1matrix_1a779306019e893736d9acf649acbe174f" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>matrix</name></member>
      <member refid="classscifir_1_1matrix_1a00de6dff848e62f6a30956d2fdc5c012" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator()</name></member>
      <member refid="classscifir_1_1matrix_1aa5013c937650f04dbb3d07e916b26407" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator()</name></member>
      <member refid="classscifir_1_1matrix_1ae813579d5d39dbe241973c8a8dc6e4d3" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator*</name></member>
      <member refid="classscifir_1_1matrix_1ae17b1561c73c868de28ee1400b8e6984" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator+</name></member>
      <member refid="classscifir_1_1matrix_1afc5ecec3434dcd9688830c003797e6cc" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1matrix_1a37b800e8fa0fdd8dc0b07dd0b3fdd028" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator-</name></member>
      <member refid="classscifir_1_1matrix_1a96e897f2ae5b6328722bff62fcdfc3e5" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1matrix_1aa0f01330b32f00e3f451c5da1b88b328" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator^</name></member>
      <member refid="classscifir_1_1matrix_1adcd780a7c399b7591067c8548c2ff230" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>operator^=</name></member>
      <member refid="classscifir_1_1matrix_1a7998c211e46afaeb9671bfd2afd0fb6c" prot="private" virt="non-virtual"><scope>scifir::matrix</scope><name>outside_column_limits</name></member>
      <member refid="classscifir_1_1matrix_1a95c9a574eb6c5af2138de6cf2b2a18de" prot="private" virt="non-virtual"><scope>scifir::matrix</scope><name>outside_limits</name></member>
      <member refid="classscifir_1_1matrix_1ab7e757f6d272a6178bb13ef2673332ef" prot="private" virt="non-virtual"><scope>scifir::matrix</scope><name>outside_row_limits</name></member>
      <member refid="classscifir_1_1matrix_1a66a001baecba91581e1c6e00d8ad971a" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>row</name></member>
      <member refid="classscifir_1_1matrix_1aaf593964a6daa6b2d9ff9341f5014724" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>row_size</name></member>
      <member refid="classscifir_1_1matrix_1a1298c000367ce8d6b245f7f5d033f859" prot="public" virt="non-virtual"><scope>scifir::matrix</scope><name>t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
