<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classscifir_1_1percentage" kind="class" language="C++" prot="public">
    <compoundname>scifir::percentage</compoundname>
    <includes refid="percentage_8hpp" local="no">percentage.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" prot="public" static="no" strong="no">
        <type>int8_t</type>
        <name>type</name>
        <enumvalue id="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aaed401896b0b878584c821490ba693d5c" prot="public">
          <name>PERCENTAGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aa74d12b7be344b60c6fa4ef9d8d0c46f0" prot="public">
          <name>PARTS_PER_MILLION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aa9a2661f77145e151d8bca9525440ab1c" prot="public">
          <name>PARTS_PER_BILLION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aae9cd4101bc5206cc681f2ea9ca600794" prot="public">
          <name>PARTS_PER_TRILLION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aac0f7bf98f267d73fa780eba116b2dc35" prot="public">
          <name>PARTS_PER_QUATRILLION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="20" column="1" bodyfile="special_units/percentage.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float scifir::percentage::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="140" column="7" bodyfile="special_units/percentage.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classscifir_1_1percentage_1a18948f7da73b52f27daa92954c3234ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>()</argsstring>
        <name>percentage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="22" column="1" bodyfile="special_units/percentage.cpp" bodystart="16" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a2c01f02d4b74d48fba8bd27bd4976ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(const percentage &amp;x)</argsstring>
        <name>percentage</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="23" column="1" bodyfile="special_units/percentage.cpp" bodystart="19" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a1710685f83c6dfb22cf0027590d47090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(percentage &amp;&amp;x)</argsstring>
        <name>percentage</name>
        <param>
          <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="24" column="1" bodyfile="special_units/percentage.cpp" bodystart="22" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a913faa07199ecaf04fc3f6087e59c1c5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(float new_value, percentage::type init_type=percentage::PERCENTAGE)</argsstring>
        <name>percentage</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">percentage::type</ref></type>
          <declname>init_type</declname>
          <defval><ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aaed401896b0b878584c821490ba693d5c" kindref="member">percentage::PERCENTAGE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="25" column="10" bodyfile="special_units/percentage.cpp" bodystart="25" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1ac5d915bf796b129e29b1220ad5f9bf66" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(double new_value, percentage::type init_type=percentage::PERCENTAGE)</argsstring>
        <name>percentage</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">percentage::type</ref></type>
          <declname>init_type</declname>
          <defval><ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aaed401896b0b878584c821490ba693d5c" kindref="member">percentage::PERCENTAGE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="26" column="10" bodyfile="special_units/percentage.cpp" bodystart="41" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a80be1d27d852868017c2285639782c59" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(long double new_value, percentage::type init_type=percentage::PERCENTAGE)</argsstring>
        <name>percentage</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">percentage::type</ref></type>
          <declname>init_type</declname>
          <defval><ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aaed401896b0b878584c821490ba693d5c" kindref="member">percentage::PERCENTAGE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="27" column="10" bodyfile="special_units/percentage.cpp" bodystart="57" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a9bacf8431f745cca287f6f9cc99b1460" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(int new_value, percentage::type init_type=percentage::PERCENTAGE)</argsstring>
        <name>percentage</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">percentage::type</ref></type>
          <declname>init_type</declname>
          <defval><ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aaed401896b0b878584c821490ba693d5c" kindref="member">percentage::PERCENTAGE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="28" column="10" bodyfile="special_units/percentage.cpp" bodystart="73" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a0e557b96be6e32d2d7adf39a03cf57cf" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(float new_value, const string &amp;init_dimensions)</argsstring>
        <name>percentage</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="29" column="10" bodyfile="special_units/percentage.cpp" bodystart="89" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a37056f1da6c4ccafc426aa3b1676c6ea" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(double new_value, const string &amp;init_dimensions)</argsstring>
        <name>percentage</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="30" column="10" bodyfile="special_units/percentage.cpp" bodystart="117" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a36876d08e5d4ff4b01bacaa2ece7c632" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(long double new_value, const string &amp;init_dimensions)</argsstring>
        <name>percentage</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="31" column="10" bodyfile="special_units/percentage.cpp" bodystart="145" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1ae637c964c5674c6cc33c5e26e8bfa452" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(int new_value, const string &amp;init_dimensions)</argsstring>
        <name>percentage</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="32" column="10" bodyfile="special_units/percentage.cpp" bodystart="173" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a3c5f810ae0131c660db073954a6722cd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(const string &amp;init_percentage)</argsstring>
        <name>percentage</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_percentage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="33" column="10" bodyfile="special_units/percentage.cpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a2a28cc4a3b5a788b37133fd25d5ee7da" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::percentage</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>percentage</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="34" column="10" bodyfile="special_units/percentage.cpp" bodystart="206" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1ac3da7fdb1b7df99c912b8fef1a7ae572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator=</definition>
        <argsstring>(const percentage &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="36" column="12" bodyfile="special_units/percentage.cpp" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a5d784189257cbd105ec47dfaeb7c06c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator=</definition>
        <argsstring>(percentage &amp;&amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="37" column="12" bodyfile="special_units/percentage.cpp" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1af0535ce3870fb035058cfdccd1d6816c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator=</definition>
        <argsstring>(float new_value)</argsstring>
        <name>operator=</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="38" column="12" bodyfile="special_units/percentage.cpp" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a67043cb05dd2934f15eaa090cee61c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator=</definition>
        <argsstring>(double new_value)</argsstring>
        <name>operator=</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="39" column="12" bodyfile="special_units/percentage.cpp" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1abec5befaa64c16f466e9b542421fbef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator=</definition>
        <argsstring>(long double new_value)</argsstring>
        <name>operator=</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="40" column="12" bodyfile="special_units/percentage.cpp" bodystart="243" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a456f383883f9b9db1270009f66e5dc9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator=</definition>
        <argsstring>(int new_value)</argsstring>
        <name>operator=</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="41" column="12" bodyfile="special_units/percentage.cpp" bodystart="249" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1acad958cf807bfe6eda3868f6842f089d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator=</definition>
        <argsstring>(const string &amp;init_percentage)</argsstring>
        <name>operator=</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_percentage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="42" column="12" bodyfile="special_units/percentage.cpp" bodystart="255" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1af429a976f5083bb40726479f4b8dff2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator=</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="43" column="12" bodyfile="special_units/percentage.cpp" bodystart="261" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a64ba3202f386c17dde5605465857ed75" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>scifir::percentage::operator float</definition>
        <argsstring>() const</argsstring>
        <name>operator float</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="45" column="10" bodyfile="special_units/percentage.hpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1abfbf61303c0b91f5b1536a5ac2648408" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float &amp;</type>
        <definition>const float&amp; scifir::percentage::get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="50" column="20" bodyfile="special_units/percentage.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a997703d062db4bd8372c8f42b38ab0db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref></type>
        <definition>percentage scifir::percentage::operator+</definition>
        <argsstring>(const percentage &amp;x) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="55" column="12" bodyfile="special_units/percentage.cpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a0063f46fae523dde05a08ff773aa0759" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref></type>
        <definition>percentage scifir::percentage::operator-</definition>
        <argsstring>(const percentage &amp;x) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="56" column="12" bodyfile="special_units/percentage.cpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1ae1299386921e23b131a480c60313075c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref></type>
        <definition>percentage scifir::percentage::operator*</definition>
        <argsstring>(const percentage &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="57" column="12" bodyfile="special_units/percentage.cpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a2e068414854cad2217c5629c1136ebe2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref></type>
        <definition>percentage scifir::percentage::operator/</definition>
        <argsstring>(const percentage &amp;x) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="58" column="12" bodyfile="special_units/percentage.cpp" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a415833910907612760930697acb7cabf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scifir::percentage::operator+=</definition>
        <argsstring>(const percentage &amp;x)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="59" column="6" bodyfile="special_units/percentage.cpp" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1aed6d83ca9b41e280179470adbf729842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scifir::percentage::operator-=</definition>
        <argsstring>(const percentage &amp;x)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="60" column="6" bodyfile="special_units/percentage.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a154bffef5ed6e8cb63bcb39c9be4bcfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scifir::percentage::operator*=</definition>
        <argsstring>(const percentage &amp;x)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="61" column="6" bodyfile="special_units/percentage.cpp" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a6c10cbe35b0236c4b549ac5bc4585212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scifir::percentage::operator/=</definition>
        <argsstring>(const percentage &amp;x)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="62" column="6" bodyfile="special_units/percentage.cpp" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1ae618bce66176de9d3fe1e957a0caeaa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scifir::percentage::operator=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="65" column="6" bodyfile="special_units/percentage.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a8226163901e8cc0938e65275aa1bd866" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref></type>
        <definition>percentage scifir::percentage::operator+</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator+</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="71" column="12" bodyfile="special_units/percentage.hpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1aa2c7b90ae7a2c8e13455d58b629c9437" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref></type>
        <definition>percentage scifir::percentage::operator-</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator-</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="77" column="12" bodyfile="special_units/percentage.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a44bc5cb70594fa5c455ba2a1d95f8ff6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float scifir::percentage::operator*</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="83" column="7" bodyfile="special_units/percentage.hpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1acf02cbac75ad3b05102da26e4658b951" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float scifir::percentage::operator/</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator/</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="89" column="7" bodyfile="special_units/percentage.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a32ec16c589336fda397e779f421d863e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scifir::percentage::operator+=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator+=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="95" column="6" bodyfile="special_units/percentage.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a5899f233d6c7bb9d364bec5bab09bdb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scifir::percentage::operator-=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator-=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="101" column="6" bodyfile="special_units/percentage.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a050f53ae43b117fec94385ddcfcaafac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scifir::percentage::operator*=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="107" column="6" bodyfile="special_units/percentage.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a4f2549463e30f02b2ffc70a624ec7cfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" kindref="member">value</ref>&gt;::<ref refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scifir::percentage::operator/=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator/=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="113" column="6" bodyfile="special_units/percentage.hpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1addccf7ec453b14abc08f41c0c749b2c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="118" column="12" bodyfile="special_units/percentage.cpp" bodystart="315" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a650475402efd37dfeaaafd4339eae577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref></type>
        <definition>percentage scifir::percentage::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="119" column="12" bodyfile="special_units/percentage.cpp" bodystart="321" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1aecbfdd6b63d0dd993056347042063f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
        <definition>percentage &amp; scifir::percentage::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="120" column="12" bodyfile="special_units/percentage.cpp" bodystart="328" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a994b72fe7e2e4f8d620c1046dd55f693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref></type>
        <definition>percentage scifir::percentage::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="121" column="12" bodyfile="special_units/percentage.cpp" bodystart="334" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1ad02e3d967e0188ff8012f37c9403e1ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::percentage::operator*</definition>
        <argsstring>(const scalar_unit &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="123" column="13" bodyfile="special_units/percentage.cpp" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1aa3489f063b146327995e69721d8b9d6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::percentage::operator/</definition>
        <argsstring>(const scalar_unit &amp;x) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="124" column="13" bodyfile="special_units/percentage.cpp" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1aff54f2d08cc05e3f5fd3aa5b374b3ed8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float scifir::percentage::get_factor</definition>
        <argsstring>() const</argsstring>
        <name>get_factor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="126" column="7" bodyfile="special_units/percentage.cpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a295c00367e72dc3e70800da792086373" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float scifir::percentage::get_ppm</definition>
        <argsstring>() const</argsstring>
        <name>get_ppm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="128" column="7" bodyfile="special_units/percentage.cpp" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1adbea0c300e66fdf2d82721583de0f7a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string scifir::percentage::display_percentage</definition>
        <argsstring>(int number_of_decimals=2) const</argsstring>
        <name>display_percentage</name>
        <param>
          <type>int</type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="133" column="8" bodyfile="special_units/percentage.cpp" bodystart="376" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1percentage_1a28516c470ce03a0c3a4c7c384480fc85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string scifir::percentage::display_ppm</definition>
        <argsstring>() const</argsstring>
        <name>display_ppm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="134" column="8" bodyfile="special_units/percentage.cpp" bodystart="383" bodyend="388"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classscifir_1_1percentage_1ae59bbcaab856dd15c9918e26aadecb43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scifir::percentage::initialize_from_string</definition>
        <argsstring>(const string &amp;init_percentage)</argsstring>
        <name>initialize_from_string</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_percentage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.hpp" line="142" column="6" bodyfile="special_units/percentage.cpp" bodystart="411" bodyend="469"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="special_units/percentage.hpp" line="17" column="1" bodyfile="special_units/percentage.hpp" bodystart="18" bodyend="144"/>
    <listofallmembers>
      <member refid="classscifir_1_1percentage_1adbea0c300e66fdf2d82721583de0f7a1" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>display_percentage</name></member>
      <member refid="classscifir_1_1percentage_1a28516c470ce03a0c3a4c7c384480fc85" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>display_ppm</name></member>
      <member refid="classscifir_1_1percentage_1aff54f2d08cc05e3f5fd3aa5b374b3ed8" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>get_factor</name></member>
      <member refid="classscifir_1_1percentage_1a295c00367e72dc3e70800da792086373" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>get_ppm</name></member>
      <member refid="classscifir_1_1percentage_1abfbf61303c0b91f5b1536a5ac2648408" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>get_value</name></member>
      <member refid="classscifir_1_1percentage_1ae59bbcaab856dd15c9918e26aadecb43" prot="private" virt="non-virtual"><scope>scifir::percentage</scope><name>initialize_from_string</name></member>
      <member refid="classscifir_1_1percentage_1a64ba3202f386c17dde5605465857ed75" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator float</name></member>
      <member refid="classscifir_1_1percentage_1ae1299386921e23b131a480c60313075c" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator*</name></member>
      <member refid="classscifir_1_1percentage_1a44bc5cb70594fa5c455ba2a1d95f8ff6" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator*</name></member>
      <member refid="classscifir_1_1percentage_1ad02e3d967e0188ff8012f37c9403e1ca" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator*</name></member>
      <member refid="classscifir_1_1percentage_1a154bffef5ed6e8cb63bcb39c9be4bcfe" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1percentage_1a050f53ae43b117fec94385ddcfcaafac" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1percentage_1a997703d062db4bd8372c8f42b38ab0db" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator+</name></member>
      <member refid="classscifir_1_1percentage_1a8226163901e8cc0938e65275aa1bd866" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator+</name></member>
      <member refid="classscifir_1_1percentage_1addccf7ec453b14abc08f41c0c749b2c4" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator++</name></member>
      <member refid="classscifir_1_1percentage_1a650475402efd37dfeaaafd4339eae577" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator++</name></member>
      <member refid="classscifir_1_1percentage_1a415833910907612760930697acb7cabf" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1percentage_1a32ec16c589336fda397e779f421d863e" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1percentage_1a0063f46fae523dde05a08ff773aa0759" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator-</name></member>
      <member refid="classscifir_1_1percentage_1aa2c7b90ae7a2c8e13455d58b629c9437" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator-</name></member>
      <member refid="classscifir_1_1percentage_1aecbfdd6b63d0dd993056347042063f85" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator--</name></member>
      <member refid="classscifir_1_1percentage_1a994b72fe7e2e4f8d620c1046dd55f693" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator--</name></member>
      <member refid="classscifir_1_1percentage_1aed6d83ca9b41e280179470adbf729842" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1percentage_1a5899f233d6c7bb9d364bec5bab09bdb5" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1percentage_1a2e068414854cad2217c5629c1136ebe2" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator/</name></member>
      <member refid="classscifir_1_1percentage_1acf02cbac75ad3b05102da26e4658b951" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator/</name></member>
      <member refid="classscifir_1_1percentage_1aa3489f063b146327995e69721d8b9d6b" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator/</name></member>
      <member refid="classscifir_1_1percentage_1a6c10cbe35b0236c4b549ac5bc4585212" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1percentage_1a4f2549463e30f02b2ffc70a624ec7cfa" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1percentage_1ac3da7fdb1b7df99c912b8fef1a7ae572" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1a5d784189257cbd105ec47dfaeb7c06c2" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1af0535ce3870fb035058cfdccd1d6816c" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1a67043cb05dd2934f15eaa090cee61c21" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1abec5befaa64c16f466e9b542421fbef7" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1a456f383883f9b9db1270009f66e5dc9a" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1acad958cf807bfe6eda3868f6842f089d" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1af429a976f5083bb40726479f4b8dff2d" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1ae618bce66176de9d3fe1e957a0caeaa9" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>operator=</name></member>
      <member refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aa9a2661f77145e151d8bca9525440ab1c" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>PARTS_PER_BILLION</name></member>
      <member refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aa74d12b7be344b60c6fa4ef9d8d0c46f0" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>PARTS_PER_MILLION</name></member>
      <member refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aac0f7bf98f267d73fa780eba116b2dc35" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>PARTS_PER_QUATRILLION</name></member>
      <member refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aae9cd4101bc5206cc681f2ea9ca600794" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>PARTS_PER_TRILLION</name></member>
      <member refid="classscifir_1_1percentage_1a18948f7da73b52f27daa92954c3234ef" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a2c01f02d4b74d48fba8bd27bd4976ce5" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a1710685f83c6dfb22cf0027590d47090" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a913faa07199ecaf04fc3f6087e59c1c5" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1ac5d915bf796b129e29b1220ad5f9bf66" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a80be1d27d852868017c2285639782c59" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a9bacf8431f745cca287f6f9cc99b1460" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a0e557b96be6e32d2d7adf39a03cf57cf" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a37056f1da6c4ccafc426aa3b1676c6ea" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a36876d08e5d4ff4b01bacaa2ece7c632" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1ae637c964c5674c6cc33c5e26e8bfa452" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a3c5f810ae0131c660db073954a6722cd" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a2a28cc4a3b5a788b37133fd25d5ee7da" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>percentage</name></member>
      <member refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79aaed401896b0b878584c821490ba693d5c" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>PERCENTAGE</name></member>
      <member refid="classscifir_1_1percentage_1a4df11500cbcd110e6656e3bfcc5ac79a" prot="public" virt="non-virtual"><scope>scifir::percentage</scope><name>type</name></member>
      <member refid="classscifir_1_1percentage_1a8a6359416b116e57affb296949c11b21" prot="private" virt="non-virtual"><scope>scifir::percentage</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
