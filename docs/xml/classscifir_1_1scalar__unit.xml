<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classscifir_1_1scalar__unit" kind="class" language="C++" prot="public">
    <compoundname>scifir::scalar_unit</compoundname>
    <derivedcompoundref refid="classscifir_1_1vector__unit__2d" prot="public" virt="non-virtual">scifir::vector_unit_2d</derivedcompoundref>
    <derivedcompoundref refid="classscifir_1_1vector__unit__3d" prot="public" virt="non-virtual">scifir::vector_unit_3d</derivedcompoundref>
    <derivedcompoundref refid="classscifir_1_1vector__unit__nd" prot="public" virt="non-virtual">scifir::vector_unit_nd</derivedcompoundref>
    <includes refid="scalar__unit_8hpp" local="no">scalar_unit.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classscifir_1_1scalar__unit_1a31051a01340ebcb0d2616491a41e3857" prot="protected" static="no" mutable="no">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>scalar_unit::dimensions</definition>
        <argsstring></argsstring>
        <name>dimensions</name>
        <briefdescription>
<para>Dimensions of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>. They can be basic dimensions or abbreviations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="203" column="8" bodyfile="units/scalar_unit.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>scalar_unit::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
<para>Value of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>. It changes automatically when the dimensions change. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="204" column="7" bodyfile="units/scalar_unit.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ab03d02ba63c30297b9739929659b38d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>()</argsstring>
        <name>scalar_unit</name>
        <briefdescription>
<para>Default constructor, the value is 0 and the dimensions are empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="81" column="1" bodyfile="units/scalar_unit.cpp" bodystart="23" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1afc354cb981dec3a98c2fe5070ec136b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy constructor, copies the value and the dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="82" column="1" bodyfile="units/scalar_unit.cpp" bodystart="26" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ad24d9f352319e37086c5ef7c4e268f66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(scalar_unit &amp;&amp;x)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Move constructor, moves the value and the dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="83" column="1" bodyfile="units/scalar_unit.cpp" bodystart="29" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a2620c8c54e21675cbf3e06b83a2bb911" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(float new_value, const string &amp;init_dimensions)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> with the value and with the dimensions specified in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="84" column="10" bodyfile="units/scalar_unit.cpp" bodystart="32" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a786bed5f99bbbb1c76ed67078984c8cc" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(double new_value, const string &amp;init_dimensions)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, the double is casted to a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="85" column="10" bodyfile="units/scalar_unit.cpp" bodystart="35" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ad73c0ecc552ae1691f20b80c9cd9b835" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(long double new_value, const string &amp;init_dimensions)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, the long double is casted to a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="86" column="10" bodyfile="units/scalar_unit.cpp" bodystart="38" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ac8dd1f791316917205b10d9d667c1b40" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(int new_value, const string &amp;init_dimensions)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, the int is casted to a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="87" column="10" bodyfile="units/scalar_unit.cpp" bodystart="41" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a60713bc43513df643c10575b618958cb" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(float new_value, const vector&lt; dimension &gt; &amp;new_dimensions)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> with the value given and copying the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="88" column="10" bodyfile="units/scalar_unit.cpp" bodystart="44" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a17a613a60e6b4100bd634f3bc9c88b3d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(double new_value, const vector&lt; dimension &gt; &amp;new_dimensions)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, the double is casted to a float, the dimensions are copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="89" column="10" bodyfile="units/scalar_unit.cpp" bodystart="47" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a915f798451bbdaec8a2682a7aaae3bc0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(long double new_value, const vector&lt; dimension &gt; &amp;new_dimensions)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, the long double is casted to a float, the dimensions are copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="90" column="10" bodyfile="units/scalar_unit.cpp" bodystart="50" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1aba1312368355c9e321cf2963ad05153b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(int new_value, const vector&lt; dimension &gt; &amp;new_dimensions)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, the int is casted to a float, the dimensions are copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="91" column="10" bodyfile="units/scalar_unit.cpp" bodystart="53" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a53116c89f3815a1ade42cc335ef043f3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::scalar_unit</definition>
        <argsstring>(const string &amp;init_scalar)</argsstring>
        <name>scalar_unit</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_scalar</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, the initialization string specifies both the value and the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="92" column="10" bodyfile="units/scalar_unit.cpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a352ba4c9e26f2c644803b5ed51fe0de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
        <definition>scalar_unit &amp; scalar_unit::operator=</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy assignment, it assigns a copy of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="94" column="13" bodyfile="units/scalar_unit.cpp" bodystart="62" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ab618e365412af3dd39229027bd031aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
        <definition>scalar_unit &amp; scalar_unit::operator=</definition>
        <argsstring>(scalar_unit &amp;&amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Move assignment, it moves the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="95" column="13" bodyfile="units/scalar_unit.cpp" bodystart="76" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ad2a72590fc373fb5409522d4a90e937e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
        <definition>scalar_unit &amp; scalar_unit::operator=</definition>
        <argsstring>(const string &amp;init_scalar)</argsstring>
        <name>operator=</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_scalar</declname>
        </param>
        <briefdescription>
<para>Assignment with an initialization string, the value and the dimensions are both specified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="96" column="13" bodyfile="units/scalar_unit.cpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1aff58f1afa3fe9f5b034a7acf1e04c141" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scalar_unit::operator float</definition>
        <argsstring>() const</argsstring>
        <name>operator float</name>
        <briefdescription>
<para>Cast the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> to their float equivalent, it discards the dimensions and copies the value to a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="98" column="10" bodyfile="units/scalar_unit.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a40e2dec78deafcf4c6ae24129a11fd5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool scalar_unit::operator==</definition>
        <argsstring>(scalar_unit x) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Comparison operator, two <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> classes are considered equivalent if they have the same value given the same dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="100" column="6" bodyfile="units/scalar_unit.cpp" bodystart="101" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a7aeafdb65fe4ab246c83c59b51efc731" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator+</definition>
        <argsstring>(scalar_unit x) const</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Addition operator, it sums two <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> classes, their dimensions are changed to be equal first. If the basic dimensions are different, it returns an empty <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="102" column="13" bodyfile="units/scalar_unit.cpp" bodystart="114" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a8897df8c59682cf3fe28e2fe52bc2519" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator-</definition>
        <argsstring>(scalar_unit x) const</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Substraction operator, it substracts one <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> from the other, their dimensions are changed to be equal first. If the basic dimensions are different, it returns an empty <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="103" column="13" bodyfile="units/scalar_unit.cpp" bodystart="130" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a35658ee94f8a802aaa02188acf289d13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator*</definition>
        <argsstring>(scalar_unit x) const</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Multiplication operator, it multiplies two <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> classes, their dimensions are also multiplied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="104" column="13" bodyfile="units/scalar_unit.cpp" bodystart="146" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a49db9492e36cfbde204ec4234888ad14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator/</definition>
        <argsstring>(scalar_unit x) const</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Division operator, it divides one <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> class with the other, their dimensions are also divided. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="105" column="13" bodyfile="units/scalar_unit.cpp" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1afcba006cc5ecf0423ed028c2254c0104" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator^</definition>
        <argsstring>(const scalar_unit &amp;x) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Power operator, it powers a <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> class with another, if that second <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> class, which is the exponent, as empty dimensions. If the exponent doesn&apos;t has empty dimensions it returns an empty <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="106" column="13" bodyfile="units/scalar_unit.cpp" bodystart="162" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1abbaf4dd62c32f8d16a6aaa1363430fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scalar_unit::operator+=</definition>
        <argsstring>(scalar_unit x)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Addition operator, it adds a <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> class to another, by converting their dimensions to be equal first. If their basic dimensions are different, it doesn&apos;t sums to the value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="107" column="6" bodyfile="units/scalar_unit.cpp" bodystart="175" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1acd9a736b50d0a914e043fc97b9323e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scalar_unit::operator-=</definition>
        <argsstring>(scalar_unit x)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Substraction operator, it substracts a <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> class to another, by converting their dimensions to be equal first. If their basic dimensions are different, it doesn&apos;t substracts to the value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="108" column="6" bodyfile="units/scalar_unit.cpp" bodystart="186" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ac395d00e4b4abaeb037d75bd83a068c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator+</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator+</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Addition operator, it sums the numeric type to the value, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="111" column="13" bodyfile="units/scalar_unit.hpp" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a5277a3985d9aa59cb23a2f4c461f3c30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator-</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator-</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Substraction operator, it substracts the numeric type to the value, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="119" column="13" bodyfile="units/scalar_unit.hpp" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a9b250120739fca9c027ea3929f31a555" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator*</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Multiplication operator, it multiplies the numeric type with the value, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="127" column="13" bodyfile="units/scalar_unit.hpp" bodystart="127" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a597ee369782cd285beec1a76f9794792" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator/</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator/</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Division operator, it divides the value with the numeric type, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="135" column="13" bodyfile="units/scalar_unit.hpp" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a1e7a6b741716f2a06116808cbc5b22a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__integer__number" kindref="compound">is_integer_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scalar_unit::operator^</definition>
        <argsstring>(T y) const</argsstring>
        <name>operator^</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Power operator, it powers the value with the numeric type, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="143" column="13" bodyfile="units/scalar_unit.hpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a0d1abb8fa0e6feb7486033c4bc97bbe4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scalar_unit::operator+=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator+=</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Addition operator, it adds the numeric type to the value, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="149" column="6" bodyfile="units/scalar_unit.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a17928a033e3292fea8ae8f4d087cac56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scalar_unit::operator-=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator-=</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Substraction operator, it substracts the numeric type to the value, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="155" column="6" bodyfile="units/scalar_unit.hpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a0b7780e065e19c2bbb3b918b0581ba27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scalar_unit::operator*=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Multiplication operator, it multiplies the numeric type to the value, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="161" column="6" bodyfile="units/scalar_unit.hpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ab2e5d01cbd910afdad116d6c06739409" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scalar_unit::operator/=</definition>
        <argsstring>(T y)</argsstring>
        <name>operator/=</name>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Division operator, it divides the numeric type to the value, independent of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="167" column="6" bodyfile="units/scalar_unit.hpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a7c2b17b498e1afd1110c4f3a0b76e7b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
        <definition>scalar_unit &amp; scalar_unit::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Increment operator, it increases the value by one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="172" column="13" bodyfile="units/scalar_unit.cpp" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a1ef5e9e16ffeb5990f253f617885c8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
        <definition>scalar_unit &amp; scalar_unit::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Increment operator, it increases the value by one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="173" column="13" bodyfile="units/scalar_unit.cpp" bodystart="203" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a1ffcae0b6dceb9b188b0f3f0698a8aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
        <definition>scalar_unit &amp; scalar_unit::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Decrement operator, it decreases the value by one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="174" column="13" bodyfile="units/scalar_unit.cpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a04f488f4b0a5d6bf423221c250f2e663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
        <definition>scalar_unit &amp; scalar_unit::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Decrement operator, it decreases the value by one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="175" column="13" bodyfile="units/scalar_unit.cpp" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1aaf48aa357423e1f65044190c27053657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scalar_unit::change_dimensions</definition>
        <argsstring>(const string &amp;init_dimensions)</argsstring>
        <name>change_dimensions</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
<para>Changes the dimensions to the dimensions specified by the initialization string of dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="177" column="6" bodyfile="units/scalar_unit.cpp" bodystart="223" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1adda2fd58d0782bb244251760978c853d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scalar_unit::change_dimensions</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>change_dimensions</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Changes the dimensions to the same dimensions of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="178" column="6" bodyfile="units/scalar_unit.cpp" bodystart="265" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a4c076490a43430ad72b9443bb2d68fb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool scalar_unit::has_dimensions</definition>
        <argsstring>(const string &amp;init_dimensions) const</argsstring>
        <name>has_dimensions</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <briefdescription>
<para>Checks if the basic dimensions are the same as the initialization string of dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="179" column="6" bodyfile="units/scalar_unit.cpp" bodystart="306" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a08e62ce3092e91269286dda5b8178869" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool scalar_unit::has_dimensions</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x_dimensions) const</argsstring>
        <name>has_dimensions</name>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x_dimensions</declname>
        </param>
        <briefdescription>
<para>Checks if the basic dimensions are the same as some set of dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="180" column="6" bodyfile="units/scalar_unit.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a83084c8cac8d4a018891588d2eded5fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool scalar_unit::has_dimensions</definition>
        <argsstring>(const scalar_unit &amp;x) const</argsstring>
        <name>has_dimensions</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Checks if the basic dimensions are the same as other <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="181" column="6" bodyfile="units/scalar_unit.cpp" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a0b736b31c71a1240704cda3300a45039" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool scalar_unit::has_empty_dimensions</definition>
        <argsstring>() const</argsstring>
        <name>has_empty_dimensions</name>
        <briefdescription>
<para>Checks if there aren&apos;t basic dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="182" column="6" bodyfile="units/scalar_unit.cpp" bodystart="322" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a14efad80e22f77b77b3b82de4c0c72ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string scalar_unit::display_dimensions</definition>
        <argsstring>() const</argsstring>
        <name>display_dimensions</name>
        <briefdescription>
<para>Generates an string of the dimensions of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, with the same format as the initialization string of dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="183" column="8" bodyfile="units/scalar_unit.cpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a266c61f83787ad59fbd8fe9741c522c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scalar_unit::get_derived_dimensions</definition>
        <argsstring>() const</argsstring>
        <name>get_derived_dimensions</name>
        <briefdescription>
<para>Generates a set of the derived dimensions of the dimensions of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="186" column="8" bodyfile="units/scalar_unit.cpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a39ed9ef8729a155b1a54ab848e8576c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
        <definition>const vector&lt; dimension &gt; &amp; scalar_unit::get_dimensions</definition>
        <argsstring>() const</argsstring>
        <name>get_dimensions</name>
        <briefdescription>
<para>Read-only getter of the dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="188" column="21" bodyfile="units/scalar_unit.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1aeb2d34ea9de078b70babda80182e677a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float &amp;</type>
        <definition>const float &amp; scalar_unit::get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
<para>Read-only getter of the value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="193" column="20" bodyfile="units/scalar_unit.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a5cec374081c39d864a7c3267b6edad09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string scalar_unit::display</definition>
        <argsstring>(int number_of_decimals=2, bool with_brackets=false, bool use_close_prefix=false) const</argsstring>
        <name>display</name>
        <param>
          <type>int</type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>with_brackets</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>use_close_prefix</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Generates an string representation of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, with the value and the dimensions. The dimensions can be enclosed by brackets, and the value can be set to have the closest prefix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="198" column="8" bodyfile="units/scalar_unit.cpp" bodystart="350" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1aacf2082b3224a8ded5798a0f1727b8a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string scalar_unit::derived_display</definition>
        <argsstring>(int number_of_decimals=2, bool with_brackets=false, bool use_close_prefix=false) const</argsstring>
        <name>derived_display</name>
        <param>
          <type>int</type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>with_brackets</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>use_close_prefix</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Generates an string representation of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, with all dimensions converted to their derived counterpart. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="199" column="8" bodyfile="units/scalar_unit.cpp" bodystart="379" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1acc46b7f3e73c08b61e4528bc3331fc60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string scalar_unit::custom_display</definition>
        <argsstring>(const string &amp;init_dimensions, int number_of_decimals=2, bool with_brackets=false) const</argsstring>
        <name>custom_display</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>with_brackets</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Generates an string representation of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, with the dimensions changed to any set of dimensions, specified by an initialization string of dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="200" column="8" bodyfile="units/scalar_unit.cpp" bodystart="401" bodyend="472"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a28dc39e25122213c5d61cd56a260ef7b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scalar_unit::add_dimension</definition>
        <argsstring>(const dimension &amp;new_dimension)</argsstring>
        <name>add_dimension</name>
        <param>
          <type>const <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &amp;</type>
          <declname>new_dimension</declname>
        </param>
        <briefdescription>
<para><bold>Internal function</bold>. It adds a dimension, changing the value according to the conversion factor of the added dimension and the prefix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="206" column="6" bodyfile="units/scalar_unit.cpp" bodystart="474" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1ad78ee83a39d1d8a846545f4b3ff6339b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scalar_unit::remove_dimension</definition>
        <argsstring>(const dimension &amp;old_dimension)</argsstring>
        <name>remove_dimension</name>
        <param>
          <type>const <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &amp;</type>
          <declname>old_dimension</declname>
        </param>
        <briefdescription>
<para><bold>Internal function</bold>. It removes a dimension, changing the value according to the conversion factor of the removed dimension and the prefix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="207" column="6" bodyfile="units/scalar_unit.cpp" bodystart="488" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1scalar__unit_1a05dcfa5468b6d3700ec90bc60bc3f26e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scalar_unit::initialize_from_string</definition>
        <argsstring>(string init_scalar)</argsstring>
        <name>initialize_from_string</name>
        <param>
          <type>string</type>
          <declname>init_scalar</declname>
        </param>
        <briefdescription>
<para><bold>Internal function</bold>. It sets the value and the dimensions of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> to the value and dimensions specified by the initialization string of <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.hpp" line="208" column="6" bodyfile="units/scalar_unit.cpp" bodystart="502" bodyend="535"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that allows to create scalar units, which are cmoposed of a value (as a float) and dimensions. The dimensions can be of any number, and be basic dimensions and/or abbreviations of dimensions. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> is a class that allows to have a scalar unit, which is composed of a value and one or more dimensions. All dimensions of the SI system of units are supported, and also all of its abbreviations. The abbreviations can be converted to its derived dimensions, too. <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> classes have operators with all numeric types, and have operators with themselves. They can be displayed by its dimensions, its derived dimensions, or any custom combination of dimensions. When they change dimensions, like, for example, from meters to kilometers, their numeric value is changed accordingly. POSSIBLE FEATURES At the present <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> classes use a vector&lt;dimension&gt; to allow to have any number of dimensions, which can be basic or abbreviations. In order to size less, it&apos;s possible for some <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> classes to have only one dimension, instead of a vector, that saves memory. With that approach, the dimension needs only 3 bytes. The possibility to switch between a single dimension and a vector&lt;dimension&gt; doesn&apos;t yet exists in C++, and so this important feature has been postposed. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>scifir::scalar_unit</label>
        <link refid="classscifir_1_1scalar__unit"/>
      </node>
      <node id="4">
        <label>scifir::vector_unit_nd</label>
        <link refid="classscifir_1_1vector__unit__nd"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>scifir::vector_unit_3d</label>
        <link refid="classscifir_1_1vector__unit__3d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>scifir::vector_unit_2d</label>
        <link refid="classscifir_1_1vector__unit__2d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="units/scalar_unit.hpp" line="78" column="1" bodyfile="units/scalar_unit.hpp" bodystart="79" bodyend="209"/>
    <listofallmembers>
      <member refid="classscifir_1_1scalar__unit_1a28dc39e25122213c5d61cd56a260ef7b" prot="protected" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>add_dimension</name></member>
      <member refid="classscifir_1_1scalar__unit_1aaf48aa357423e1f65044190c27053657" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>change_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1adda2fd58d0782bb244251760978c853d" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>change_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1acc46b7f3e73c08b61e4528bc3331fc60" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>custom_display</name></member>
      <member refid="classscifir_1_1scalar__unit_1aacf2082b3224a8ded5798a0f1727b8a9" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>derived_display</name></member>
      <member refid="classscifir_1_1scalar__unit_1a31051a01340ebcb0d2616491a41e3857" prot="protected" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a5cec374081c39d864a7c3267b6edad09" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>display</name></member>
      <member refid="classscifir_1_1scalar__unit_1a14efad80e22f77b77b3b82de4c0c72ca" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>display_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a266c61f83787ad59fbd8fe9741c522c6" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>get_derived_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a39ed9ef8729a155b1a54ab848e8576c0" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>get_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1aeb2d34ea9de078b70babda80182e677a" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>get_value</name></member>
      <member refid="classscifir_1_1scalar__unit_1a4c076490a43430ad72b9443bb2d68fb7" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>has_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a08e62ce3092e91269286dda5b8178869" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>has_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a83084c8cac8d4a018891588d2eded5fa" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>has_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a0b736b31c71a1240704cda3300a45039" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>has_empty_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a05dcfa5468b6d3700ec90bc60bc3f26e" prot="protected" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>initialize_from_string</name></member>
      <member refid="classscifir_1_1scalar__unit_1aff58f1afa3fe9f5b034a7acf1e04c141" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator float</name></member>
      <member refid="classscifir_1_1scalar__unit_1a35658ee94f8a802aaa02188acf289d13" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator*</name></member>
      <member refid="classscifir_1_1scalar__unit_1a9b250120739fca9c027ea3929f31a555" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator*</name></member>
      <member refid="classscifir_1_1scalar__unit_1a0b7780e065e19c2bbb3b918b0581ba27" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1scalar__unit_1a7aeafdb65fe4ab246c83c59b51efc731" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator+</name></member>
      <member refid="classscifir_1_1scalar__unit_1ac395d00e4b4abaeb037d75bd83a068c4" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator+</name></member>
      <member refid="classscifir_1_1scalar__unit_1a7c2b17b498e1afd1110c4f3a0b76e7b1" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator++</name></member>
      <member refid="classscifir_1_1scalar__unit_1a1ef5e9e16ffeb5990f253f617885c8aa" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator++</name></member>
      <member refid="classscifir_1_1scalar__unit_1abbaf4dd62c32f8d16a6aaa1363430fd5" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1scalar__unit_1a0d1abb8fa0e6feb7486033c4bc97bbe4" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1scalar__unit_1a8897df8c59682cf3fe28e2fe52bc2519" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator-</name></member>
      <member refid="classscifir_1_1scalar__unit_1a5277a3985d9aa59cb23a2f4c461f3c30" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator-</name></member>
      <member refid="classscifir_1_1scalar__unit_1a1ffcae0b6dceb9b188b0f3f0698a8aa8" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator--</name></member>
      <member refid="classscifir_1_1scalar__unit_1a04f488f4b0a5d6bf423221c250f2e663" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator--</name></member>
      <member refid="classscifir_1_1scalar__unit_1acd9a736b50d0a914e043fc97b9323e90" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1scalar__unit_1a17928a033e3292fea8ae8f4d087cac56" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1scalar__unit_1a49db9492e36cfbde204ec4234888ad14" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator/</name></member>
      <member refid="classscifir_1_1scalar__unit_1a597ee369782cd285beec1a76f9794792" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator/</name></member>
      <member refid="classscifir_1_1scalar__unit_1ab2e5d01cbd910afdad116d6c06739409" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1scalar__unit_1a352ba4c9e26f2c644803b5ed51fe0de4" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator=</name></member>
      <member refid="classscifir_1_1scalar__unit_1ab618e365412af3dd39229027bd031aa5" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator=</name></member>
      <member refid="classscifir_1_1scalar__unit_1ad2a72590fc373fb5409522d4a90e937e" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator=</name></member>
      <member refid="classscifir_1_1scalar__unit_1a40e2dec78deafcf4c6ae24129a11fd5c" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator==</name></member>
      <member refid="classscifir_1_1scalar__unit_1afcba006cc5ecf0423ed028c2254c0104" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator^</name></member>
      <member refid="classscifir_1_1scalar__unit_1a1e7a6b741716f2a06116808cbc5b22a8" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>operator^</name></member>
      <member refid="classscifir_1_1scalar__unit_1ad78ee83a39d1d8a846545f4b3ff6339b" prot="protected" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>remove_dimension</name></member>
      <member refid="classscifir_1_1scalar__unit_1ab03d02ba63c30297b9739929659b38d5" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1afc354cb981dec3a98c2fe5070ec136b8" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1ad24d9f352319e37086c5ef7c4e268f66" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a2620c8c54e21675cbf3e06b83a2bb911" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a786bed5f99bbbb1c76ed67078984c8cc" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1ad73c0ecc552ae1691f20b80c9cd9b835" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1ac8dd1f791316917205b10d9d667c1b40" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a60713bc43513df643c10575b618958cb" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a17a613a60e6b4100bd634f3bc9c88b3d" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a915f798451bbdaec8a2682a7aaae3bc0" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1aba1312368355c9e321cf2963ad05153b" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a53116c89f3815a1ade42cc335ef043f3" prot="public" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" prot="protected" virt="non-virtual"><scope>scifir::scalar_unit</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
