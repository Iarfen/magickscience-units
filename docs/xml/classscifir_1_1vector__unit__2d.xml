<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classscifir_1_1vector__unit__2d" kind="class" language="C++" prot="public">
    <compoundname>scifir::vector_unit_2d</compoundname>
    <basecompoundref refid="classscifir_1_1scalar__unit" prot="public" virt="non-virtual">scifir::scalar_unit</basecompoundref>
    <includes refid="vector__unit__2d_8hpp" local="no">vector_unit_2d.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classscifir_1_1vector__unit__2d_1a02e717020c5a56aca57f0be3515ee2f9" prot="public" static="no" mutable="no">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle vector_unit_2d::theta</definition>
        <argsstring></argsstring>
        <name>theta</name>
        <briefdescription>
<para>Angle of the vector in 2D space, in polar coordinates. As all angles of scifir-units, it&apos;s stored in degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="199" column="7" bodyfile="units/vector_unit_2d.hpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1adfd2e30ff509cfcb1ec34e95fe612627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>()</argsstring>
        <name>vector_unit_2d</name>
        <briefdescription>
<para>Default constructor. The value is set to 0, the dimensions are empty and theta is 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="58" column="1" bodyfile="units/vector_unit_2d.cpp" bodystart="12" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a99f851c200332389b92b4d218a8e85a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(const vector_unit_2d &amp;x)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>const <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy constructor. The member-variables are copied from the <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="59" column="1" bodyfile="units/vector_unit_2d.cpp" bodystart="15" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1afe432a2043155da0fba76fe6fb809f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(vector_unit_2d &amp;&amp;x)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Move constructor. The member-variables are moved from the <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="60" column="1" bodyfile="units/vector_unit_2d.cpp" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a8fa92a132897b660cd43c710aea9584e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(float new_value, const string &amp;init_dimensions, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value, the dimensions are initialized with the initialization string of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="61" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="21" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a3342fd3a77b1670c27b9c72e63887e9a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(float new_value, const string &amp;init_dimensions, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value, the dimensions are initialized with the initialization string of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="62" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="24" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1afaee5bd1595afcc46b88b11e7b0a1e9c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(double new_value, const string &amp;init_dimensions, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the double is casted to a float), the dimensions are initialized with the initialization string of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="63" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="27" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a68a7869486671378341bf4e021742b31" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(double new_value, const string &amp;init_dimensions, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the double is casted to a float), the dimensions are initialized with the initialization string of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="64" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="30" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a87ba4619d718a1b83f11fecd44694d58" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(long double new_value, const string &amp;init_dimensions, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the long double is casted to a float), the dimensions are initialized with the initialization string of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="65" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="33" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1aa395542bf527c195975ba3406e3188ba" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(long double new_value, const string &amp;init_dimensions, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the long double is casted to a float), the dimensions are initialized with the initialization string of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="66" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="36" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a3a36519865c93d8d9ecb795ab1856e94" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(int new_value, const string &amp;init_dimensions, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the int is casted to a float), the dimensions are initialized with the initialization string of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="67" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="39" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a3411f244a7535e6ea6e119896913aa90" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(int new_value, const string &amp;init_dimensions, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the int is casted to a float), the dimensions are initialized with the initialization string of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="68" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a9c1cab8d7b2e945e44508fa6339a5d6f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(float new_value, const vector&lt; dimension &gt; &amp;new_dimensions, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value, the dimensions are initialized with a vector of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="69" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="45" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1afe6a06a8bbad16b63064148516df7a3b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(float new_value, const vector&lt; dimension &gt; &amp;new_dimensions, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value, the dimensions are initialized with a vector of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="70" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="48" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a7d778144991e56ed86cc4df1d10927dd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(double new_value, const vector&lt; dimension &gt; &amp;new_dimensions, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the double is casted to a float), the dimensions are initialized with a vector of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="71" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="51" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a94c3b83f8171527d7e76ebe68d9275d5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(double new_value, const vector&lt; dimension &gt; &amp;new_dimensions, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the double is casted to a float), the dimensions are initialized with a vector of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="72" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1ac8a3c2a4cf997de05848f4227e7001e9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(long double new_value, const vector&lt; dimension &gt; &amp;new_dimensions, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the long double is casted to a float), the dimensions are initialized with a vector of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="73" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="57" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a1ff0fbf048df2908925980582941fb72" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(long double new_value, const vector&lt; dimension &gt; &amp;new_dimensions, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the long double is casted to a float), the dimensions are initialized with a vector of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="74" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="60" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a5a5635f4f151e522bc2ed80ef717b9fd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(int new_value, const vector&lt; dimension &gt; &amp;new_dimensions, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the int is casted to a float), the dimensions are initialized with a vector of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="75" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="63" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a0b5908496dcab401402735f251b32fda" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(int new_value, const vector&lt; dimension &gt; &amp;new_dimensions, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value is new_value (the int is casted to a float), the dimensions are initialized with a vector of dimensions, and theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="76" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="66" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a152bcd59e7dfe50faee44849aaa22608" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(const scalar_unit &amp;x, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value and the dimensions are copied from the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x, theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="77" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="69" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a09564cacfc39325b424bb682d22a735c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(const scalar_unit &amp;x, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value and the dimensions are copied from the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x, theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="78" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="72" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a6ddd9531aebf1247d27bcc8f3a2e6d5b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(const string &amp;init_scalar, float new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_scalar</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value and the dimensions are copied from the initialization string of <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> init_scalar, theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="79" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="75" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1aeee2380c95487aa40163d0ce81043322" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(const string &amp;init_scalar, const angle &amp;new_theta)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>new_theta</declname>
        </param>
        <briefdescription>
<para>The value and the dimensions are copied from the initialization string of <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> init_scalar, theta is new_theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="80" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="78" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1aea2e265e047d427258a2fe8c9cbb1562" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vector_unit_2d::vector_unit_2d</definition>
        <argsstring>(const string &amp;init_vector_2d)</argsstring>
        <name>vector_unit_2d</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_vector_2d</declname>
        </param>
        <briefdescription>
<para>The value, the dimensions and theta are initialized from the initialization string of <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> init_vector_2d. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="81" column="10" bodyfile="units/vector_unit_2d.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1abf0af5d17dc7c44ec48f5cc09f5199b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
        <definition>vector_unit_2d &amp; vector_unit_2d::operator=</definition>
        <argsstring>(const vector_unit_2d &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy assignment. The member-variables are copied from the <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="90" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a07e5b4a2dc297c16e4f3e3a6c63096af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
        <definition>vector_unit_2d &amp; vector_unit_2d::operator=</definition>
        <argsstring>(vector_unit_2d &amp;&amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Move assignment. The member-variables are moved from the <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="91" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a3959c16c799e3a6cd11f33d5f1c8dfed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
        <definition>vector_unit_2d &amp; vector_unit_2d::operator=</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The value and the dimensions are copied from the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x, theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="92" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a374680319e37ffe0fbb1a6196d26b1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
        <definition>vector_unit_2d &amp; vector_unit_2d::operator=</definition>
        <argsstring>(scalar_unit &amp;&amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The value and the dimensions are moved from the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x, theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="93" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a112002b081affb8f8fbeae9f11dac474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
        <definition>vector_unit_2d &amp; vector_unit_2d::operator=</definition>
        <argsstring>(const string &amp;init_vector_2d)</argsstring>
        <name>operator=</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_vector_2d</declname>
        </param>
        <briefdescription>
<para>The value, the dimensions and theta are set from the initialization string init_vector_2d. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="94" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1acb74ddb3f6fca32e6038bc51b5755bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vector_unit_2d::operator==</definition>
        <argsstring>(vector_unit_2d x) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Comparison operator. Two <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> are equal if their value, dimensions and theta are the same. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="96" column="6" bodyfile="units/vector_unit_2d.cpp" bodystart="118" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a9265ef9778322f0f0abe19fd97cc505e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_unit_2d::point_to</definition>
        <argsstring>(direction::name x)</argsstring>
        <name>point_to</name>
        <param>
          <type><ref refid="classscifir_1_1direction_1a3f9d1fd5a6c5f61b9fb49c4e56938319" kindref="member">direction::name</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Theta is set to the direction specified in 2D. Possible values are LEFT, RIGHT, TOP, BOTTOM, LEFT_TOP, RIGHT_TOP, RIGHT_BOTTOM, LEFT_BOTTOM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="98" column="6" bodyfile="units/vector_unit_2d.cpp" bodystart="131" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1aa27a9c45d0a7445fbaea28df45e2d142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_unit_2d::operator+=</definition>
        <argsstring>(const vector_unit_2d &amp;x)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> is summed as vector, in polar coordinates. The addition of vectors is used for the calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="100" column="6" bodyfile="units/vector_unit_2d.cpp" bodystart="167" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a91c0385477013dfcdf70e3aa9f1ce57b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_unit_2d::operator-=</definition>
        <argsstring>(vector_unit_2d x)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> is substracted as vector, in polar coordinates. The substraction of vectors is used for the calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="101" column="6" bodyfile="units/vector_unit_2d.cpp" bodystart="182" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a43bc935e328dfc9b93ad8a0629fb8906" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator+</definition>
        <argsstring>(const vector_unit_2d &amp;x) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Addition of vectors in 2D. It creates a new vector as the addition of the other two. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="103" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="195" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1ac394adbd71346e8ee7e92461b403d913" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator-</definition>
        <argsstring>(vector_unit_2d x) const</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Substraction of vectors in 2D. It creates a new vector as the difference of the other two. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="104" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="211" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1aa9881d025013b36de19f3e6126fc6a39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator*</definition>
        <argsstring>(const scalar_unit &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It creates a new <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> scaling a <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> by the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="106" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1afe723ccc372d7af4b988e036dd5097aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator/</definition>
        <argsstring>(const scalar_unit &amp;x) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It creates a new <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> scaling a <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> by the inverse of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="107" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="235" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1aee2404103d24d774eadacd08ebddd507" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator^</definition>
        <argsstring>(const scalar_unit &amp;x) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It powers a vector by a <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> x if that <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> has empty dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="108" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="242" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1aedc23a6bcb4fcdf8faa676a6c9241570" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator+</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator+</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It creates a new vector as the addition of the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="111" column="16" bodyfile="units/vector_unit_2d.hpp" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a39bb1c3c47dbb000e49d3dc31571d7d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator-</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator-</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It creates a new vector as the substraction of the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="119" column="16" bodyfile="units/vector_unit_2d.hpp" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a25d74254940cbb8ff91e800193f0e98b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator*</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It creates a new vector as the multiplication of the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="127" column="16" bodyfile="units/vector_unit_2d.hpp" bodystart="127" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a3c16243dc9bdea7ea3624569cbdb3a07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator/</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator/</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It creates a new vector as the division of the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="135" column="16" bodyfile="units/vector_unit_2d.hpp" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a9206f7713713485706c052a7a9d48620" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__integer__number" kindref="compound">is_integer_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::operator^</definition>
        <argsstring>(T x) const</argsstring>
        <name>operator^</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It creates a new vector as the power of the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="143" column="16" bodyfile="units/vector_unit_2d.hpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a4f8a74f1222468df82aad30d12bc9ffc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vector_unit_2d::operator+=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator+=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It sums the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="149" column="6" bodyfile="units/vector_unit_2d.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a82d0f9691103ea34372291cbfbd078a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vector_unit_2d::operator-=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator-=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It substracts the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="155" column="6" bodyfile="units/vector_unit_2d.hpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a6d7b9d4ed2ee9c9538ebebf54c15a0f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vector_unit_2d::operator*=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It multiplies the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="161" column="6" bodyfile="units/vector_unit_2d.hpp" bodystart="161" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a00cc2416eab24bad153984c840c366f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename enable_if&lt;<ref refid="structscifir_1_1is__number" kindref="compound">scifir::is_number</ref>&lt;T&gt;::<ref refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" kindref="member">value</ref>&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vector_unit_2d::operator/=</definition>
        <argsstring>(T x)</argsstring>
        <name>operator/=</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>It divides the numeric type x to the value. Theta is not changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="171" column="6" bodyfile="units/vector_unit_2d.hpp" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1acdf6a0b75cda1155bccf981da599f20c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit vector_unit_2d::x_projection</definition>
        <argsstring>() const</argsstring>
        <name>x_projection</name>
        <briefdescription>
<para>It creates the x projection of the vector, returning it as a <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> of the same dimensions, and the value corresponds to the projection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="180" column="20" bodyfile="units/vector_unit_2d.hpp" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a1574afedce50ac207826d867cc415f00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit vector_unit_2d::y_projection</definition>
        <argsstring>() const</argsstring>
        <name>y_projection</name>
        <briefdescription>
<para>It creates the y projection of the vector, returning it as a <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> of the same dimensions, and the value corresponds to the projection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="185" column="20" bodyfile="units/vector_unit_2d.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1abb5c5c11869ef8674557e06e6c1bd3c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_unit_2d::invert</definition>
        <argsstring>()</argsstring>
        <name>invert</name>
        <briefdescription>
<para>Changes the direction of the vector to the opposite direction. It does that by adding 180 degrees to theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="190" column="13" bodyfile="units/vector_unit_2d.hpp" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a5a12fe06d16211c60c47faa694ccb87e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string vector_unit_2d::vectorial_display</definition>
        <argsstring>(int number_of_decimals=2) const</argsstring>
        <name>vectorial_display</name>
        <param>
          <type>int</type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Displays the vector as the string representation of the scalar unit adding also the angle theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="195" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a555862a2c3fde976d43f98b018d43579" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string vector_unit_2d::vectorial_derived_display</definition>
        <argsstring>(int number_of_decimals=2) const</argsstring>
        <name>vectorial_derived_display</name>
        <param>
          <type>int</type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Displays the vector as the string representation of the scalar unit adding also the angle theta. It displays the dimensions with its derived dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="196" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a529c2ef49018fde4ac27b5158e7b2e9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string vector_unit_2d::vectorial_custom_display</definition>
        <argsstring>(const string &amp;init_dimensions, int number_of_decimals=2) const</argsstring>
        <name>vectorial_custom_display</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_decimals</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Displays the vector as the string representation of the scalar unit adding also the angle theta. It displays the vector in the dimensions specified in the initialization string of dimensions init_dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="197" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1ae269acfefd99fdb287876901866c8b43" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d vector_unit_2d::cartesian_2d</definition>
        <argsstring>(const string &amp;init_dimensions, float new_x, float new_y)</argsstring>
        <name>cartesian_2d</name>
        <param>
          <type>const string &amp;</type>
          <declname>init_dimensions</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_y</declname>
        </param>
        <briefdescription>
<para>The dimensions are initialized from the initialization string of dimensions new_dimensions, the cartesian coordinates new_x and new_y are converted to polar coordinates and then set the value and theta. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="83" column="23" bodyfile="units/vector_unit_2d.hpp" bodystart="83" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classscifir_1_1vector__unit__2d_1a911fed2519510bce1abda921dca0f2e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_unit_2d::initialize_from_string</definition>
        <argsstring>(string init_vector_2d)</argsstring>
        <name>initialize_from_string</name>
        <param>
          <type>string</type>
          <declname>init_vector_2d</declname>
        </param>
        <briefdescription>
<para>Initializes the member-variables with the initialization string of <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> init_vector_2d. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="202" column="6" bodyfile="units/vector_unit_2d.cpp" bodystart="310" bodyend="319"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that creates a vector unit in 2D. The vector is in <bold>polar coordinates</bold> with a value and dimensions of the <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref>, and an angle theta for his direction. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>scifir::scalar_unit</label>
        <link refid="classscifir_1_1scalar__unit"/>
      </node>
      <node id="1">
        <label>scifir::vector_unit_2d</label>
        <link refid="classscifir_1_1vector__unit__2d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>scifir::scalar_unit</label>
        <link refid="classscifir_1_1scalar__unit"/>
      </node>
      <node id="1">
        <label>scifir::vector_unit_2d</label>
        <link refid="classscifir_1_1vector__unit__2d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>theta</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>scifir::angle</label>
        <link refid="classscifir_1_1angle"/>
      </node>
    </collaborationgraph>
    <location file="units/vector_unit_2d.hpp" line="55" column="1" bodyfile="units/vector_unit_2d.hpp" bodystart="56" bodyend="203"/>
    <listofallmembers>
      <member refid="classscifir_1_1scalar__unit_1a28dc39e25122213c5d61cd56a260ef7b" prot="protected" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>add_dimension</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1ae269acfefd99fdb287876901866c8b43" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>cartesian_2d</name></member>
      <member refid="classscifir_1_1scalar__unit_1aaf48aa357423e1f65044190c27053657" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>change_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1adda2fd58d0782bb244251760978c853d" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>change_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1acc46b7f3e73c08b61e4528bc3331fc60" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>custom_display</name></member>
      <member refid="classscifir_1_1scalar__unit_1aacf2082b3224a8ded5798a0f1727b8a9" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>derived_display</name></member>
      <member refid="classscifir_1_1scalar__unit_1a31051a01340ebcb0d2616491a41e3857" prot="protected" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a5cec374081c39d864a7c3267b6edad09" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>display</name></member>
      <member refid="classscifir_1_1scalar__unit_1a14efad80e22f77b77b3b82de4c0c72ca" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>display_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a266c61f83787ad59fbd8fe9741c522c6" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>get_derived_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a39ed9ef8729a155b1a54ab848e8576c0" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>get_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1aeb2d34ea9de078b70babda80182e677a" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>get_value</name></member>
      <member refid="classscifir_1_1scalar__unit_1a4c076490a43430ad72b9443bb2d68fb7" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>has_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a08e62ce3092e91269286dda5b8178869" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>has_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a83084c8cac8d4a018891588d2eded5fa" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>has_dimensions</name></member>
      <member refid="classscifir_1_1scalar__unit_1a0b736b31c71a1240704cda3300a45039" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>has_empty_dimensions</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a911fed2519510bce1abda921dca0f2e2" prot="private" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>initialize_from_string</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1abb5c5c11869ef8674557e06e6c1bd3c1" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>invert</name></member>
      <member refid="classscifir_1_1scalar__unit_1aff58f1afa3fe9f5b034a7acf1e04c141" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator float</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1aa9881d025013b36de19f3e6126fc6a39" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator*</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a25d74254940cbb8ff91e800193f0e98b" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator*</name></member>
      <member refid="classscifir_1_1scalar__unit_1a35658ee94f8a802aaa02188acf289d13" prot="public" virt="non-virtual" ambiguityscope="scifir::scalar_unit::"><scope>scifir::vector_unit_2d</scope><name>operator*</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a6d7b9d4ed2ee9c9538ebebf54c15a0f5" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator*=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a43bc935e328dfc9b93ad8a0629fb8906" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator+</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1aedc23a6bcb4fcdf8faa676a6c9241570" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator+</name></member>
      <member refid="classscifir_1_1scalar__unit_1a7aeafdb65fe4ab246c83c59b51efc731" prot="public" virt="non-virtual" ambiguityscope="scifir::scalar_unit::"><scope>scifir::vector_unit_2d</scope><name>operator+</name></member>
      <member refid="classscifir_1_1scalar__unit_1a7c2b17b498e1afd1110c4f3a0b76e7b1" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator++</name></member>
      <member refid="classscifir_1_1scalar__unit_1a1ef5e9e16ffeb5990f253f617885c8aa" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator++</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1aa27a9c45d0a7445fbaea28df45e2d142" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a4f8a74f1222468df82aad30d12bc9ffc" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1scalar__unit_1abbaf4dd62c32f8d16a6aaa1363430fd5" prot="public" virt="non-virtual" ambiguityscope="scifir::scalar_unit::"><scope>scifir::vector_unit_2d</scope><name>operator+=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1ac394adbd71346e8ee7e92461b403d913" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator-</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a39bb1c3c47dbb000e49d3dc31571d7d2" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator-</name></member>
      <member refid="classscifir_1_1scalar__unit_1a8897df8c59682cf3fe28e2fe52bc2519" prot="public" virt="non-virtual" ambiguityscope="scifir::scalar_unit::"><scope>scifir::vector_unit_2d</scope><name>operator-</name></member>
      <member refid="classscifir_1_1scalar__unit_1a1ffcae0b6dceb9b188b0f3f0698a8aa8" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator--</name></member>
      <member refid="classscifir_1_1scalar__unit_1a04f488f4b0a5d6bf423221c250f2e663" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator--</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a91c0385477013dfcdf70e3aa9f1ce57b" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a82d0f9691103ea34372291cbfbd078a1" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1scalar__unit_1acd9a736b50d0a914e043fc97b9323e90" prot="public" virt="non-virtual" ambiguityscope="scifir::scalar_unit::"><scope>scifir::vector_unit_2d</scope><name>operator-=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1afe723ccc372d7af4b988e036dd5097aa" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator/</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a3c16243dc9bdea7ea3624569cbdb3a07" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator/</name></member>
      <member refid="classscifir_1_1scalar__unit_1a49db9492e36cfbde204ec4234888ad14" prot="public" virt="non-virtual" ambiguityscope="scifir::scalar_unit::"><scope>scifir::vector_unit_2d</scope><name>operator/</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a00cc2416eab24bad153984c840c366f2" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator/=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1abf0af5d17dc7c44ec48f5cc09f5199b6" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a07e5b4a2dc297c16e4f3e3a6c63096af" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a3959c16c799e3a6cd11f33d5f1c8dfed" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a374680319e37ffe0fbb1a6196d26b1a3" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a112002b081affb8f8fbeae9f11dac474" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator=</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1acb74ddb3f6fca32e6038bc51b5755bfa" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator==</name></member>
      <member refid="classscifir_1_1scalar__unit_1a40e2dec78deafcf4c6ae24129a11fd5c" prot="public" virt="non-virtual" ambiguityscope="scifir::scalar_unit::"><scope>scifir::vector_unit_2d</scope><name>operator==</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1aee2404103d24d774eadacd08ebddd507" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator^</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a9206f7713713485706c052a7a9d48620" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>operator^</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a9265ef9778322f0f0abe19fd97cc505e" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>point_to</name></member>
      <member refid="classscifir_1_1scalar__unit_1ad78ee83a39d1d8a846545f4b3ff6339b" prot="protected" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>remove_dimension</name></member>
      <member refid="classscifir_1_1scalar__unit_1ab03d02ba63c30297b9739929659b38d5" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1afc354cb981dec3a98c2fe5070ec136b8" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1ad24d9f352319e37086c5ef7c4e268f66" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a2620c8c54e21675cbf3e06b83a2bb911" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a786bed5f99bbbb1c76ed67078984c8cc" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1ad73c0ecc552ae1691f20b80c9cd9b835" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1ac8dd1f791316917205b10d9d667c1b40" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a60713bc43513df643c10575b618958cb" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a17a613a60e6b4100bd634f3bc9c88b3d" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a915f798451bbdaec8a2682a7aaae3bc0" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1aba1312368355c9e321cf2963ad05153b" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1scalar__unit_1a53116c89f3815a1ade42cc335ef043f3" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>scalar_unit</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a02e717020c5a56aca57f0be3515ee2f9" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>theta</name></member>
      <member refid="classscifir_1_1scalar__unit_1a64eba8849b847bbca056fb0e8bd45c39" prot="protected" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>value</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1adfd2e30ff509cfcb1ec34e95fe612627" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a99f851c200332389b92b4d218a8e85a5" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1afe432a2043155da0fba76fe6fb809f77" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a8fa92a132897b660cd43c710aea9584e" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a3342fd3a77b1670c27b9c72e63887e9a" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1afaee5bd1595afcc46b88b11e7b0a1e9c" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a68a7869486671378341bf4e021742b31" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a87ba4619d718a1b83f11fecd44694d58" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1aa395542bf527c195975ba3406e3188ba" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a3a36519865c93d8d9ecb795ab1856e94" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a3411f244a7535e6ea6e119896913aa90" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a9c1cab8d7b2e945e44508fa6339a5d6f" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1afe6a06a8bbad16b63064148516df7a3b" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a7d778144991e56ed86cc4df1d10927dd" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a94c3b83f8171527d7e76ebe68d9275d5" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1ac8a3c2a4cf997de05848f4227e7001e9" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a1ff0fbf048df2908925980582941fb72" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a5a5635f4f151e522bc2ed80ef717b9fd" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a0b5908496dcab401402735f251b32fda" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a152bcd59e7dfe50faee44849aaa22608" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a09564cacfc39325b424bb682d22a735c" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a6ddd9531aebf1247d27bcc8f3a2e6d5b" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1aeee2380c95487aa40163d0ce81043322" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1aea2e265e047d427258a2fe8c9cbb1562" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vector_unit_2d</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a529c2ef49018fde4ac27b5158e7b2e9a" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vectorial_custom_display</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a555862a2c3fde976d43f98b018d43579" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vectorial_derived_display</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a5a12fe06d16211c60c47faa694ccb87e" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>vectorial_display</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1acdf6a0b75cda1155bccf981da599f20c" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>x_projection</name></member>
      <member refid="classscifir_1_1vector__unit__2d_1a1574afedce50ac207826d867cc415f00" prot="public" virt="non-virtual"><scope>scifir::vector_unit_2d</scope><name>y_projection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
