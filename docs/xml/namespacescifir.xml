<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacescifir" kind="namespace" language="C++">
    <compoundname>scifir</compoundname>
    <innerclass refid="classscifir_1_1aid" prot="public">scifir::aid</innerclass>
    <innerclass refid="classscifir_1_1angle" prot="public">scifir::angle</innerclass>
    <innerclass refid="classscifir_1_1cas__number" prot="public">scifir::cas_number</innerclass>
    <innerclass refid="classscifir_1_1color" prot="public">scifir::color</innerclass>
    <innerclass refid="classscifir_1_1complex__number" prot="public">scifir::complex_number</innerclass>
    <innerclass refid="classscifir_1_1conversion" prot="public">scifir::conversion</innerclass>
    <innerclass refid="classscifir_1_1coordinates__1d" prot="public">scifir::coordinates_1d</innerclass>
    <innerclass refid="classscifir_1_1coordinates__1d_3_01float_01_4" prot="public">scifir::coordinates_1d&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1coordinates__2d" prot="public">scifir::coordinates_2d</innerclass>
    <innerclass refid="classscifir_1_1coordinates__2d_3_01float_01_4" prot="public">scifir::coordinates_2d&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1coordinates__2dr" prot="public">scifir::coordinates_2dr</innerclass>
    <innerclass refid="classscifir_1_1coordinates__2dr_3_01float_01_4" prot="public">scifir::coordinates_2dr&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1coordinates__3d" prot="public">scifir::coordinates_3d</innerclass>
    <innerclass refid="classscifir_1_1coordinates__3d_3_01float_01_4" prot="public">scifir::coordinates_3d&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1coordinates__3dr" prot="public">scifir::coordinates_3dr</innerclass>
    <innerclass refid="classscifir_1_1coordinates__3dr_3_01float_01_4" prot="public">scifir::coordinates_3dr&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1coordinates__nd" prot="public">scifir::coordinates_nd</innerclass>
    <innerclass refid="classscifir_1_1coordinates__nd_3_01float_01_4" prot="public">scifir::coordinates_nd&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1coordinates__ndr" prot="public">scifir::coordinates_ndr</innerclass>
    <innerclass refid="classscifir_1_1coordinates__ndr_3_01float_01_4" prot="public">scifir::coordinates_ndr&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1dimension" prot="public">scifir::dimension</innerclass>
    <innerclass refid="classscifir_1_1direction" prot="public">scifir::direction</innerclass>
    <innerclass refid="structscifir_1_1is__integer__number" prot="public">scifir::is_integer_number</innerclass>
    <innerclass refid="structscifir_1_1is__number" prot="public">scifir::is_number</innerclass>
    <innerclass refid="classscifir_1_1lab__number" prot="public">scifir::lab_number</innerclass>
    <innerclass refid="classscifir_1_1material__vector__unit__2d" prot="public">scifir::material_vector_unit_2d</innerclass>
    <innerclass refid="classscifir_1_1matrix" prot="public">scifir::matrix</innerclass>
    <innerclass refid="classscifir_1_1percentage" prot="public">scifir::percentage</innerclass>
    <innerclass refid="classscifir_1_1pH" prot="public">scifir::pH</innerclass>
    <innerclass refid="classscifir_1_1pixel" prot="public">scifir::pixel</innerclass>
    <innerclass refid="classscifir_1_1pOH" prot="public">scifir::pOH</innerclass>
    <innerclass refid="classscifir_1_1point__1d" prot="public">scifir::point_1d</innerclass>
    <innerclass refid="classscifir_1_1point__1d_3_01float_01_4" prot="public">scifir::point_1d&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1point__2d" prot="public">scifir::point_2d</innerclass>
    <innerclass refid="classscifir_1_1point__2d_3_01float_01_4" prot="public">scifir::point_2d&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1point__3d" prot="public">scifir::point_3d</innerclass>
    <innerclass refid="classscifir_1_1point__3d_3_01float_01_4" prot="public">scifir::point_3d&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1point__nd" prot="public">scifir::point_nd</innerclass>
    <innerclass refid="classscifir_1_1point__nd_3_01float_01_4" prot="public">scifir::point_nd&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1prefix" prot="public">scifir::prefix</innerclass>
    <innerclass refid="classscifir_1_1scalar__unit" prot="public">scifir::scalar_unit</innerclass>
    <innerclass refid="classscifir_1_1size__2d" prot="public">scifir::size_2d</innerclass>
    <innerclass refid="classscifir_1_1size__2d_3_01float_01_4" prot="public">scifir::size_2d&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1size__3d" prot="public">scifir::size_3d</innerclass>
    <innerclass refid="classscifir_1_1size__3d_3_01float_01_4" prot="public">scifir::size_3d&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1size__nd" prot="public">scifir::size_nd</innerclass>
    <innerclass refid="classscifir_1_1size__nd_3_01float_01_4" prot="public">scifir::size_nd&lt; float &gt;</innerclass>
    <innerclass refid="classscifir_1_1tensor__unit" prot="public">scifir::tensor_unit</innerclass>
    <innerclass refid="classscifir_1_1vector__unit__2d" prot="public">scifir::vector_unit_2d</innerclass>
    <innerclass refid="classscifir_1_1vector__unit__3d" prot="public">scifir::vector_unit_3d</innerclass>
    <innerclass refid="classscifir_1_1vector__unit__nd" prot="public">scifir::vector_unit_nd</innerclass>
    <innerclass refid="classscifir_1_1zid" prot="public">scifir::zid</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36" prot="public" static="no" strong="yes">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int8_t</ref></type>
        <name>astronomical_body</name>
        <qualifiedname>scifir::astronomical_body</qualifiedname>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36ab50339a10e1de285ac99d4c3990b8693" prot="public">
          <name>NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a1d0cef6740a9d6c7bc846109f0c1e7c9" prot="public">
          <name>MILKY_WAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a55aa379556672192a39f14384464af38" prot="public">
          <name>ANDROMEDA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36af939a59fce021a04108244d0e58db065" prot="public">
          <name>SOLAR_SYSTEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a9034a19b67bd4853d7cba104d62e0828" prot="public">
          <name>SUN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36ace1fd186d59d80609f430b2769e7c3d6" prot="public">
          <name>MOON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36aa37a86c493a31ccfabadb9adc5571763" prot="public">
          <name>MERCURY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a918eb3ec334b4715d1da9371341f1077" prot="public">
          <name>VENUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36ab6f13830e914e2068be5c1008a124857" prot="public">
          <name>EARTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a64ccb53b02b677fb5ef0161407dcae5d" prot="public">
          <name>MARS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a9addb0a7ad564b27bee117bfc75b23cb" prot="public">
          <name>JUPITER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a6348a2fa6ef4beea63a4d72567dc0b6f" prot="public">
          <name>SATURN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a7d10d97178e7bbd241a6561c570deb9d" prot="public">
          <name>URANUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a9baf2ee639a37d753fec5707bd21f38a" prot="public">
          <name>NEPTUNE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a3cc7d3d35ab91905e272dcf657790118" prot="public">
          <name>CERES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36aef834d9c3784a0f45060e817858b46b8" prot="public">
          <name>ORCUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36ac4c2ac18b2a720fc13131814ca2f2298" prot="public">
          <name>PLUTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a65f73d2f78a1a9830a4a17e409013a55" prot="public">
          <name>HAUMEA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a7b43dfc89d0f67f3106d834be4aadc0d" prot="public">
          <name>QUAOAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36ac6d72c10c5950d5512e7e73a18649bce" prot="public">
          <name>MAKEMAKE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a8f4e90a6155f100b0e3f99e0284c68bf" prot="public">
          <name>GONGGONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a8b0ecefe9854f44ee45526a99d7d5eba" prot="public">
          <name>ERIS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a9d2f52d81eecc5518a067b6701d050b8" prot="public">
          <name>SEDNA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36acf3882f1c43ab22bff0bd9d82d83251b" prot="public">
          <name>IO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a5b4e25fc2a0b3e751bb90310706b21bb" prot="public">
          <name>EUROPA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a5876a2e68e78e501af08c10e65045ec5" prot="public">
          <name>GANYMEDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a9ea3a06a127e6556639f76d215981325" prot="public">
          <name>CALLISTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a25406909a7dd9ec6e923f8f57d5b211a" prot="public">
          <name>MIMAS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a1b54f4d7e4b21b4faf06c813844cc103" prot="public">
          <name>ENCELADUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36aacace1a8647bd19a55778dd53d1edc30" prot="public">
          <name>TETHYS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36abd5cd4be41d2655dd885f44685999616" prot="public">
          <name>DIONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a51e093de8dd3840fb6415e640e758a95" prot="public">
          <name>RHEA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a8084428b194f0b50108f88a36ef2db74" prot="public">
          <name>TITAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a04fc32224976d17331ad28bb561b27e1" prot="public">
          <name>IAPETUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a7747595a61b39f87c1d864ccd3ff21ba" prot="public">
          <name>MIRANDA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a9418205299914cd6e25194811527be05" prot="public">
          <name>ARIEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a7a047d3a72de0f299816bafc5b03ccb6" prot="public">
          <name>UMBRIEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a5c551a897bfd9d597b18a68cf5d9b71e" prot="public">
          <name>TITANIA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a4eb757f0b57c1ec1f5ef3e7739646d1d" prot="public">
          <name>OBERON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a91515d053dff929294cc54898c9c8e11" prot="public">
          <name>TRITON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36ac41503641509918e65508f2ef4372ec8" prot="public">
          <name>CHARON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="aid_8hpp_1a20683521b4e3fde1fac96fee7ca39e36a0fd8dcb37f282020364d76a4bfadc283" prot="public">
          <name>DYSNOMIA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/aid.hpp" line="11" column="1" bodyfile="special_units/aid.hpp" bodystart="11" bodyend="11"/>
      </memberdef>
      <memberdef kind="enum" id="body_8hpp_1ad539180dc5ebdc1e9c73339aad091eff" prot="public" static="no" strong="yes">
        <type></type>
        <name>movement</name>
        <qualifiedname>scifir::movement</qualifiedname>
        <enumvalue id="body_8hpp_1ad539180dc5ebdc1e9c73339aad091effa8b572d218013b9626d59e6a2b38f18b6" prot="public">
          <name>STILL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1ad539180dc5ebdc1e9c73339aad091effabb2dfc184fa2e91373d3ff304cb01b8a" prot="public">
          <name>WALK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1ad539180dc5ebdc1e9c73339aad091effa855520d2a5b0b1a64b939e7e30889e2a" prot="public">
          <name>RUN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1ad539180dc5ebdc1e9c73339aad091effa03b8271feadf6d6d8669b00982853848" prot="public">
          <name>SWIM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1ad539180dc5ebdc1e9c73339aad091effa31c1814360e4e67f1adf1d03aa1c47e1" prot="public">
          <name>CLIMB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1ad539180dc5ebdc1e9c73339aad091effa327c84b33a8b5e93858289478b0202b4" prot="public">
          <name>FLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/body.hpp" line="8" column="5" bodyfile="special_units/body.hpp" bodystart="8" bodyend="8"/>
      </memberdef>
      <memberdef kind="enum" id="body_8hpp_1a32a33e512264a46ffb4e2846e1ca53e7" prot="public" static="no" strong="yes">
        <type></type>
        <name>movement_state</name>
        <qualifiedname>scifir::movement_state</qualifiedname>
        <enumvalue id="body_8hpp_1a32a33e512264a46ffb4e2846e1ca53e7a8b572d218013b9626d59e6a2b38f18b6" prot="public">
          <name>STILL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1a32a33e512264a46ffb4e2846e1ca53e7a18ff74f43da410c5529f7d6fca84f115" prot="public">
          <name>ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/body.hpp" line="10" column="5" bodyfile="special_units/body.hpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="enum" id="body_8hpp_1af67b1c36abc4fa5927cda202ec598749" prot="public" static="no" strong="yes">
        <type></type>
        <name>body_health</name>
        <qualifiedname>scifir::body_health</qualifiedname>
        <enumvalue id="body_8hpp_1af67b1c36abc4fa5927cda202ec598749af068ebe4133e3e6563080836268ea979" prot="public">
          <name>HEALTHY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1af67b1c36abc4fa5927cda202ec598749a3cf53b7601ee463412beea23294bd347" prot="public">
          <name>DAMAGED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1af67b1c36abc4fa5927cda202ec598749ab1de57a076206eae4b4e1c032b93c88f" prot="public">
          <name>SICK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="body_8hpp_1af67b1c36abc4fa5927cda202ec598749a25bf0287da2cb730c4903f0a3ce2ca7f" prot="public">
          <name>SICK_AND_DAMAGED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/body.hpp" line="12" column="5" bodyfile="special_units/body.hpp" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="enum" id="mind_8hpp_1a10fb03b0e70b3cd9e77661757a2ec705" prot="public" static="no" strong="yes">
        <type></type>
        <name>alert_state</name>
        <qualifiedname>scifir::alert_state</qualifiedname>
        <enumvalue id="mind_8hpp_1a10fb03b0e70b3cd9e77661757a2ec705a3009ab0171fb74c79ecff010976934b5" prot="public">
          <name>VIGIL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a10fb03b0e70b3cd9e77661757a2ec705ab32bd403b93dc6deffdab7af55e82596" prot="public">
          <name>SLEEP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a10fb03b0e70b3cd9e77661757a2ec705a5b5c546c849fc717458c34d6e24f37b2" prot="public">
          <name>MEDITATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/mind.hpp" line="10" column="5" bodyfile="special_units/mind.hpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="enum" id="mind_8hpp_1a83fe32b03d40fdd5728b2e413123bee5" prot="public" static="no" strong="yes">
        <type></type>
        <name>feeling</name>
        <qualifiedname>scifir::feeling</qualifiedname>
        <enumvalue id="mind_8hpp_1a83fe32b03d40fdd5728b2e413123bee5a88c5374457f277ea4810aee2b1cec9ab" prot="public">
          <name>SADNESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a83fe32b03d40fdd5728b2e413123bee5ae01e45d5e2f030164f507555a2d8b21e" prot="public">
          <name>RANCOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a83fe32b03d40fdd5728b2e413123bee5ac9122fd7bae0681b62a39ddfc1c7fb19" prot="public">
          <name>LOVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/mind.hpp" line="12" column="5" bodyfile="special_units/mind.hpp" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="enum" id="mind_8hpp_1a689c4e163ef96d7d5dad93dce859d2c6" prot="public" static="no" strong="yes">
        <type></type>
        <name>emotion</name>
        <qualifiedname>scifir::emotion</qualifiedname>
        <enumvalue id="mind_8hpp_1a689c4e163ef96d7d5dad93dce859d2c6a5895a8d98247c42e883a30666911c186" prot="public">
          <name>HAPPY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a689c4e163ef96d7d5dad93dce859d2c6ae4257949d61da881eef2a81069fe4efa" prot="public">
          <name>EXCITED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a689c4e163ef96d7d5dad93dce859d2c6a7e8a0c29dae104806c41fc459923f97c" prot="public">
          <name>TENDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a689c4e163ef96d7d5dad93dce859d2c6a1da69b25f731c8683350c79051f02411" prot="public">
          <name>SCARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a689c4e163ef96d7d5dad93dce859d2c6a01ea88d643afda5305eabd30ca4c33fc" prot="public">
          <name>ANGRY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1a689c4e163ef96d7d5dad93dce859d2c6ab9f50ca01f59b01d4aaa9cc3c0bad9f1" prot="public">
          <name>SAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/mind.hpp" line="14" column="5" bodyfile="special_units/mind.hpp" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="enum" id="mind_8hpp_1ac18481f3c66f9d73be63595a15353fb2" prot="public" static="no" strong="yes">
        <type></type>
        <name>sensation</name>
        <qualifiedname>scifir::sensation</qualifiedname>
        <enumvalue id="mind_8hpp_1ac18481f3c66f9d73be63595a15353fb2af8589806bbf66241917092b2a6e18c6f" prot="public">
          <name>LIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1ac18481f3c66f9d73be63595a15353fb2af54e4b43b21580e967d29a9b7e735953" prot="public">
          <name>SOUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1ac18481f3c66f9d73be63595a15353fb2aee49d439f92c07271c132560998b73e1" prot="public">
          <name>ACCELERATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1ac18481f3c66f9d73be63595a15353fb2a096635b1ed6536ca67e0aea2a8439d54" prot="public">
          <name>ODOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1ac18481f3c66f9d73be63595a15353fb2adb7dd14243ab91e465c4a4a20073c80a" prot="public">
          <name>TASTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1ac18481f3c66f9d73be63595a15353fb2a2b40a1ea27beb450618885ec87f0ee15" prot="public">
          <name>TOUCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1ac18481f3c66f9d73be63595a15353fb2ab976538812ef6e3e5881e245d5fc3c76" prot="public">
          <name>TEMPERATURE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/mind.hpp" line="16" column="5" bodyfile="special_units/mind.hpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="enum" id="mind_8hpp_1adf4f4a4a8bd67155b05554ea7e59e56e" prot="public" static="no" strong="yes">
        <type></type>
        <name>conscience_state</name>
        <qualifiedname>scifir::conscience_state</qualifiedname>
        <enumvalue id="mind_8hpp_1adf4f4a4a8bd67155b05554ea7e59e56ea1e23852820b9154316c7c06e2b7ba051" prot="public">
          <name>NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mind_8hpp_1adf4f4a4a8bd67155b05554ea7e59e56ea0d6def17de959e80440532e7e8e396c9" prot="public">
          <name>ALTERED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/mind.hpp" line="18" column="5" bodyfile="special_units/mind.hpp" bodystart="18" bodyend="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="physics__units_8hpp_1af9264eb6497586d15cc3fa361c136707" prot="public" static="no">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">length</ref></type>
        <definition>typedef length scifir::wavelength</definition>
        <argsstring></argsstring>
        <name>wavelength</name>
        <qualifiedname>scifir::wavelength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="93" column="16" bodyfile="predefined_units/physics_units.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="coordinates__ndr_8cpp_1a819a13e3cfdfa60fe6da8ee120f89dd0" prot="public" static="no" mutable="no">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::coordinates_ndr_no_angle</definition>
        <argsstring></argsstring>
        <name>coordinates_ndr_no_angle</name>
        <qualifiedname>scifir::coordinates_ndr_no_angle</qualifiedname>
        <initializer>= <ref refid="classscifir_1_1angle" kindref="compound">angle</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.cpp" line="7" column="7" bodyfile="coordinates/coordinates_ndr.cpp" bodystart="7" bodyend="-1" declfile="coordinates/coordinates_ndr.hpp" declline="17" declcolumn="14"/>
      </memberdef>
      <memberdef kind="variable" id="constants_8hpp_1aba6ebba65e0f0326f9bf57eaba1351ba" prot="public" static="no" constexpr="yes" mutable="no">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">constexpr</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>constexpr float scifir::PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <qualifiedname>scifir::PI</qualifiedname>
        <initializer>= boost::math::constants::pi&lt;<ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/constants.hpp" line="10" column="17" bodyfile="topology/constants.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="constants_8hpp_1a91415295f0f89d5bb3d3795dc9de1b8d" prot="public" static="yes" mutable="no">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref></type>
        <definition>const long double scifir::AVOGADRO_CONSTANT</definition>
        <argsstring></argsstring>
        <name>AVOGADRO_CONSTANT</name>
        <qualifiedname>scifir::AVOGADRO_CONSTANT</qualifiedname>
        <initializer>= 6.02214076<ref refid="classscifir_1_1coordinates__1d" kindref="compound">e23</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/constants.hpp" line="11" column="26" bodyfile="topology/constants.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conversion_8cpp_1a7cc97e15d82cd4bb47e27606f980b1ac" prot="public" static="no" mutable="no">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">map</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref>, <ref refid="classscifir_1_1conversion" kindref="compound">conversion</ref> &gt;</type>
        <definition>map&lt; string, conversion &gt; scifir::get_conversion</definition>
        <argsstring></argsstring>
        <name>get_conversion</name>
        <qualifiedname>scifir::get_conversion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/conversion.cpp" line="22" column="5" bodyfile="units/conversion.cpp" bodystart="23" bodyend="105" declfile="units/conversion.hpp" declline="35" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="coordinates__1d_8cpp_1a5b44128227fa8f95625e0f4d51f3b783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_1d&lt; float &gt; &amp;x, const coordinates_1d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_1d.cpp" line="7" column="7" bodyfile="coordinates/coordinates_1d.cpp" bodystart="7" bodyend="10" declfile="coordinates/coordinates_1d.hpp" declline="167" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__1d_8cpp_1a4a7283524ab5ed4f2a37f9c355f8083a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_1d&lt; float &gt; &amp;x, const point_1d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_1d.cpp" line="12" column="7" bodyfile="coordinates/coordinates_1d.cpp" bodystart="12" bodyend="15" declfile="coordinates/coordinates_1d.hpp" declline="175" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__1d_8cpp_1a71d2c6e2318c40f532b0289cc6e04898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_1d&lt; float &gt; &amp;x, const coordinates_1d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_1d.cpp" line="17" column="7" bodyfile="coordinates/coordinates_1d.cpp" bodystart="17" bodyend="20" declfile="coordinates/coordinates_1d.hpp" declline="183" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__1d_8hpp_1a873067b76a922a9f96b18e5f10088988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_1d&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_1d.hpp" line="154" column="8" bodyfile="coordinates/coordinates_1d.hpp" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__1d_8hpp_1af3c4b8b6388bb413a8105d0a2e3b1338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_1d&lt; T &gt; &amp;x, const coordinates_1d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_1d.hpp" line="162" column="3" bodyfile="coordinates/coordinates_1d.hpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__1d_8hpp_1a43ec5cac8467924ecaec6baf8af4f7a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_1d&lt; T &gt; &amp;x, const point_1d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_1d.hpp" line="170" column="3" bodyfile="coordinates/coordinates_1d.hpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__1d_8hpp_1a8a74f91a7f513b5bf20d1496578e8c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_1d&lt; T &gt; &amp;x, const coordinates_1d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">coordinates_1d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_1d.hpp" line="178" column="3" bodyfile="coordinates/coordinates_1d.hpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8cpp_1ad3fadbd54cc3fcf614388823d783f972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_2d&lt; float &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.cpp" line="9" column="8" bodyfile="coordinates/coordinates_2d.cpp" bodystart="9" bodyend="14" declfile="coordinates/coordinates_2d.hpp" declline="304" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8cpp_1a611201bf31b766781f681d52ddbac915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_2d&lt; float &gt; &amp;x, const coordinates_2d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.cpp" line="16" column="7" bodyfile="coordinates/coordinates_2d.cpp" bodystart="16" bodyend="19" declfile="coordinates/coordinates_2d.hpp" declline="312" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8cpp_1a2a8a3f4144b9f38274e8ab663a29ab41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_2d&lt; float &gt; &amp;x, const point_2d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.cpp" line="21" column="7" bodyfile="coordinates/coordinates_2d.cpp" bodystart="21" bodyend="24" declfile="coordinates/coordinates_2d.hpp" declline="320" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8cpp_1a790e0af8f7fdba46719a2455214c7867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_2d&lt; float &gt; &amp;x, const coordinates_2d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.cpp" line="26" column="7" bodyfile="coordinates/coordinates_2d.cpp" bodystart="26" bodyend="29" declfile="coordinates/coordinates_2d.hpp" declline="328" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8hpp_1a1dac4f2f6e1fd5f174d18b830cc8649f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_2d&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.hpp" line="297" column="8" bodyfile="coordinates/coordinates_2d.hpp" bodystart="297" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8hpp_1a48fee2805052e931fc88e0a6164c1b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_2d&lt; T &gt; &amp;x, const coordinates_2d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.hpp" line="307" column="3" bodyfile="coordinates/coordinates_2d.hpp" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8hpp_1a91ee27c29c8f9d9be7edbccdcee454a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_2d&lt; T &gt; &amp;x, const point_2d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.hpp" line="315" column="3" bodyfile="coordinates/coordinates_2d.hpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8hpp_1ad32b84c23def3a09023f8eca20053ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_2d&lt; T &gt; &amp;x, const coordinates_2d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.hpp" line="323" column="3" bodyfile="coordinates/coordinates_2d.hpp" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8hpp_1ac31c793c4294a8f10a6cbb5156f12e86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cartesian_2d_to_polar_r</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>cartesian_2d_to_polar_r</name>
        <qualifiedname>scifir::cartesian_2d_to_polar_r</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.hpp" line="330" column="14" bodyfile="coordinates/coordinates_2d.hpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8hpp_1a488400ce28e30b3d177609eb228d81c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cartesian_2d_to_polar_theta</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>cartesian_2d_to_polar_theta</name>
        <qualifiedname>scifir::cartesian_2d_to_polar_theta</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.hpp" line="335" column="14" bodyfile="coordinates/coordinates_2d.hpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8hpp_1a7806bb118d30a2018ccc2eb46d361b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::polar_to_cartesian_2d_x</definition>
        <argsstring>(float r, const angle &amp;angle)</argsstring>
        <name>polar_to_cartesian_2d_x</name>
        <qualifiedname>scifir::polar_to_cartesian_2d_x</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.hpp" line="340" column="14" bodyfile="coordinates/coordinates_2d.hpp" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2d_8hpp_1afdb1a1bef905ab48a9670bca0e375f83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::polar_to_cartesian_2d_y</definition>
        <argsstring>(float r, const angle &amp;angle)</argsstring>
        <name>polar_to_cartesian_2d_y</name>
        <qualifiedname>scifir::polar_to_cartesian_2d_y</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2d.hpp" line="345" column="14" bodyfile="coordinates/coordinates_2d.hpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8cpp_1a120d19475bcb328e25d27dc6ea636858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_2dr&lt; float &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.cpp" line="7" column="8" bodyfile="coordinates/coordinates_2dr.cpp" bodystart="7" bodyend="12" declfile="coordinates/coordinates_2dr.hpp" declline="413" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8cpp_1a82a88854d82d56087d7865a4460e9570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_2dr&lt; float &gt; &amp;x, const coordinates_2dr&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.cpp" line="14" column="7" bodyfile="coordinates/coordinates_2dr.cpp" bodystart="14" bodyend="17" declfile="coordinates/coordinates_2dr.hpp" declline="421" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8cpp_1a2eb7c0bd6c44bb7964e35c408a57469e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_2dr&lt; float &gt; &amp;x, const coordinates_2d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.cpp" line="19" column="7" bodyfile="coordinates/coordinates_2dr.cpp" bodystart="19" bodyend="22" declfile="coordinates/coordinates_2dr.hpp" declline="429" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8cpp_1aa3b71baf2ef4f2dfe657a7e168c2a9d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_2d&lt; float &gt; &amp;x, const coordinates_2dr&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.cpp" line="24" column="7" bodyfile="coordinates/coordinates_2dr.cpp" bodystart="24" bodyend="27" declfile="coordinates/coordinates_2dr.hpp" declline="437" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8cpp_1aae9f920fde7b1ea29235609e8ae0c010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_2dr&lt; float &gt; &amp;x, const point_2d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.cpp" line="29" column="7" bodyfile="coordinates/coordinates_2dr.cpp" bodystart="29" bodyend="32" declfile="coordinates/coordinates_2dr.hpp" declline="445" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8cpp_1a9c633196bd14625503e3b07ed43440db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_2d&lt; float &gt; &amp;x, const coordinates_2dr&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.cpp" line="34" column="7" bodyfile="coordinates/coordinates_2dr.cpp" bodystart="34" bodyend="37" declfile="coordinates/coordinates_2dr.hpp" declline="453" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8hpp_1ae7d3e36641788c709cd16f8214dec495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_2dr&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.hpp" line="406" column="8" bodyfile="coordinates/coordinates_2dr.hpp" bodystart="406" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8hpp_1aeae77fb99bdd9caeb17324a7676e91e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_2dr&lt; T &gt; &amp;x, const coordinates_2dr&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.hpp" line="416" column="3" bodyfile="coordinates/coordinates_2dr.hpp" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8hpp_1a8db136890a0fad09357473894b848d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_2dr&lt; T &gt; &amp;x, const coordinates_2d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.hpp" line="424" column="3" bodyfile="coordinates/coordinates_2dr.hpp" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8hpp_1aa223078569c2fd41951e6d2cff8bd07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_2d&lt; T &gt; &amp;x, const coordinates_2dr&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2d" kindref="compound">coordinates_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.hpp" line="432" column="3" bodyfile="coordinates/coordinates_2dr.hpp" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8hpp_1a6fe5ca7bea91b0467752bc4af20efb76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_2dr&lt; T &gt; &amp;x, const point_2d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.hpp" line="440" column="3" bodyfile="coordinates/coordinates_2dr.hpp" bodystart="440" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__2dr_8hpp_1af26007bf3435597b3bc0524b72328646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_2d&lt; T &gt; &amp;x, const coordinates_2dr&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__2dr" kindref="compound">coordinates_2dr</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_2dr.hpp" line="448" column="3" bodyfile="coordinates/coordinates_2dr.hpp" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8cpp_1a7e530f740d98d206daae64b858a7feb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_3d&lt; float &gt; &amp;x, const coordinates_3d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.cpp" line="7" column="7" bodyfile="coordinates/coordinates_3d.cpp" bodystart="7" bodyend="10" declfile="coordinates/coordinates_3d.hpp" declline="537" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8cpp_1a95657803b732e5f26e1be0a2fefaea07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_3d&lt; float &gt; &amp;x, const point_3d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.cpp" line="12" column="7" bodyfile="coordinates/coordinates_3d.cpp" bodystart="12" bodyend="15" declfile="coordinates/coordinates_3d.hpp" declline="545" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8cpp_1a17602eb7100068136ae5c23e8d6cfba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_3d&lt; float &gt; &amp;x, const coordinates_3d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.cpp" line="17" column="7" bodyfile="coordinates/coordinates_3d.cpp" bodystart="17" bodyend="20" declfile="coordinates/coordinates_3d.hpp" declline="553" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a60bedb5834916875f8bdd21c91eba1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_3d&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="524" column="8" bodyfile="coordinates/coordinates_3d.hpp" bodystart="524" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1aab567ba834398066b187e3dfbb2faea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_3d&lt; T &gt; &amp;x, const coordinates_3d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="532" column="3" bodyfile="coordinates/coordinates_3d.hpp" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1ad1b6591ab8356bf5cd2c67eb9de146e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_3d&lt; T &gt; &amp;x, const point_3d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="540" column="3" bodyfile="coordinates/coordinates_3d.hpp" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a249b5956ac435f525c45f64d0a2dcbc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_3d&lt; T &gt; &amp;x, const coordinates_3d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="548" column="3" bodyfile="coordinates/coordinates_3d.hpp" bodystart="548" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a1cbb76bcec9999b2d53c8113c77f08ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cartesian_3d_to_cylindrical_r</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>cartesian_3d_to_cylindrical_r</name>
        <qualifiedname>scifir::cartesian_3d_to_cylindrical_r</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="555" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="555" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1ae851b2a60cf11a8571dfca88e8e2b070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cartesian_3d_to_cylindrical_theta</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>cartesian_3d_to_cylindrical_theta</name>
        <qualifiedname>scifir::cartesian_3d_to_cylindrical_theta</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="560" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a17797973d50e2725daa8974a3909e986" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cartesian_3d_to_cylindrical_z</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>cartesian_3d_to_cylindrical_z</name>
        <qualifiedname>scifir::cartesian_3d_to_cylindrical_z</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="565" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1acebd761469c5347216bc39dfdbe7abca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cartesian_3d_to_spherical_r</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>cartesian_3d_to_spherical_r</name>
        <qualifiedname>scifir::cartesian_3d_to_spherical_r</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="570" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a0d23d55ff13fb41dfb8a84b4be9080d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cartesian_3d_to_spherical_theta</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>cartesian_3d_to_spherical_theta</name>
        <qualifiedname>scifir::cartesian_3d_to_spherical_theta</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="575" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="575" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a1a8e4b0a29baf225e968c3b1310fa791" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cartesian_3d_to_spherical_phi</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>cartesian_3d_to_spherical_phi</name>
        <qualifiedname>scifir::cartesian_3d_to_spherical_phi</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="580" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1ae36fccb5b09cf89ca874c25d3f487d5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::spherical_to_cartesian_3d_x</definition>
        <argsstring>(float r, const angle &amp;angle1, const angle &amp;angle2)</argsstring>
        <name>spherical_to_cartesian_3d_x</name>
        <qualifiedname>scifir::spherical_to_cartesian_3d_x</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="585" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1ad11093149e078bfefc356b2b81046902" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::spherical_to_cartesian_3d_y</definition>
        <argsstring>(float r, const angle &amp;angle1, const angle &amp;angle2)</argsstring>
        <name>spherical_to_cartesian_3d_y</name>
        <qualifiedname>scifir::spherical_to_cartesian_3d_y</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="590" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a05d7db71ba3dff048e5655c683c45cd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::spherical_to_cartesian_3d_z</definition>
        <argsstring>(float r, const angle &amp;angle1, const angle &amp;angle2)</argsstring>
        <name>spherical_to_cartesian_3d_z</name>
        <qualifiedname>scifir::spherical_to_cartesian_3d_z</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="595" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="595" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1ab45da388117e0bf7b8708c8d2612dda0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::spherical_to_cylindrical_r</definition>
        <argsstring>(float r, const angle &amp;angle1, const angle &amp;angle2)</argsstring>
        <name>spherical_to_cylindrical_r</name>
        <qualifiedname>scifir::spherical_to_cylindrical_r</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="600" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="600" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a41d1e4874f6be4150d5fa65847eeed1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::spherical_to_cylindrical_theta</definition>
        <argsstring>(float r, const angle &amp;angle1, const angle &amp;angle2)</argsstring>
        <name>spherical_to_cylindrical_theta</name>
        <qualifiedname>scifir::spherical_to_cylindrical_theta</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="605" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a66a690bc7ebfe9549319ef4fe181f0a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::spherical_to_cylindrical_z</definition>
        <argsstring>(float r, const angle &amp;angle1, const angle &amp;angle2)</argsstring>
        <name>spherical_to_cylindrical_z</name>
        <qualifiedname>scifir::spherical_to_cylindrical_z</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="610" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="610" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a5e3594d6a9054bcb8e09abaa49458fe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cylindrical_to_cartesian_3d_x</definition>
        <argsstring>(float r, const angle &amp;angle, float z)</argsstring>
        <name>cylindrical_to_cartesian_3d_x</name>
        <qualifiedname>scifir::cylindrical_to_cartesian_3d_x</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="615" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="615" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a4d2b276a0b37a46b4de22254c8c4071c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cylindrical_to_cartesian_3d_y</definition>
        <argsstring>(float r, const angle &amp;angle, float z)</argsstring>
        <name>cylindrical_to_cartesian_3d_y</name>
        <qualifiedname>scifir::cylindrical_to_cartesian_3d_y</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="620" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="620" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1aaa1ebef015156e283ff7aaf8b86288c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cylindrical_to_cartesian_3d_z</definition>
        <argsstring>(float r, const angle &amp;angle, float z)</argsstring>
        <name>cylindrical_to_cartesian_3d_z</name>
        <qualifiedname>scifir::cylindrical_to_cartesian_3d_z</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="625" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="625" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1a33817d8e4b3c780838974c520ec0f647" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cylindrical_to_spherical_r</definition>
        <argsstring>(float p, const angle &amp;angle, float z)</argsstring>
        <name>cylindrical_to_spherical_r</name>
        <qualifiedname>scifir::cylindrical_to_spherical_r</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="630" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="630" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1ad9dcf83b1f802d9774de5ce844ce8702" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cylindrical_to_spherical_theta</definition>
        <argsstring>(float p, const angle &amp;angle, float z)</argsstring>
        <name>cylindrical_to_spherical_theta</name>
        <qualifiedname>scifir::cylindrical_to_spherical_theta</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="635" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="635" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3d_8hpp_1aa961cab00e9330050737331fcbbe5dcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cylindrical_to_spherical_phi</definition>
        <argsstring>(float p, const angle &amp;angle, float z)</argsstring>
        <name>cylindrical_to_spherical_phi</name>
        <qualifiedname>scifir::cylindrical_to_spherical_phi</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3d.hpp" line="640" column="14" bodyfile="coordinates/coordinates_3d.hpp" bodystart="640" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8cpp_1a8be9b91dfe19b47a25fa48156d979021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_3dr&lt; float &gt; &amp;x, const coordinates_3dr&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.cpp" line="7" column="7" bodyfile="coordinates/coordinates_3dr.cpp" bodystart="7" bodyend="10" declfile="coordinates/coordinates_3dr.hpp" declline="863" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8cpp_1a250a735af798cf467c6a376abd16ba96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_3dr&lt; float &gt; &amp;x, const coordinates_3d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.cpp" line="12" column="7" bodyfile="coordinates/coordinates_3dr.cpp" bodystart="12" bodyend="15" declfile="coordinates/coordinates_3dr.hpp" declline="871" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8cpp_1a8edaa0f816ff733c5f28ef9106a10d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_3d&lt; float &gt; &amp;x, const coordinates_3dr&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.cpp" line="17" column="7" bodyfile="coordinates/coordinates_3dr.cpp" bodystart="17" bodyend="20" declfile="coordinates/coordinates_3dr.hpp" declline="879" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8cpp_1abb7ba2f0eff2e63bbb93dcb906a5c6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_3dr&lt; float &gt; &amp;x, const point_3d&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.cpp" line="22" column="7" bodyfile="coordinates/coordinates_3dr.cpp" bodystart="22" bodyend="25" declfile="coordinates/coordinates_3dr.hpp" declline="887" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8cpp_1af064d639c8cb68b7aa650d3cb98cf83c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_3d&lt; float &gt; &amp;x, const coordinates_3dr&lt; float &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.cpp" line="27" column="7" bodyfile="coordinates/coordinates_3dr.cpp" bodystart="27" bodyend="30" declfile="coordinates/coordinates_3dr.hpp" declline="895" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8hpp_1a61f621b5ad4ee645eeef293d44e05535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_3dr&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.hpp" line="850" column="8" bodyfile="coordinates/coordinates_3dr.hpp" bodystart="850" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8hpp_1ae4dc43d8c5d90691a0602907c88f6220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_3dr&lt; T &gt; &amp;x, const coordinates_3dr&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.hpp" line="858" column="3" bodyfile="coordinates/coordinates_3dr.hpp" bodystart="858" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8hpp_1ae9a3171d318d23fc97eed3ecfe089fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_3dr&lt; T &gt; &amp;x, const coordinates_3d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.hpp" line="866" column="3" bodyfile="coordinates/coordinates_3dr.hpp" bodystart="866" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8hpp_1a57de822e27f325c51ea2793bd9e892e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_3d&lt; T &gt; &amp;x, const coordinates_3dr&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3d" kindref="compound">coordinates_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.hpp" line="874" column="3" bodyfile="coordinates/coordinates_3dr.hpp" bodystart="874" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8hpp_1a80242f6f108508ac15ecc1bce8d28563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_3dr&lt; T &gt; &amp;x, const point_3d&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.hpp" line="882" column="3" bodyfile="coordinates/coordinates_3dr.hpp" bodystart="882" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__3dr_8hpp_1a2bbb5e63c7a4d76198cd9b6a90776bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_3d&lt; T &gt; &amp;x, const coordinates_3dr&lt; T &gt; &amp;y)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__3dr" kindref="compound">coordinates_3dr</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_3dr.hpp" line="890" column="3" bodyfile="coordinates/coordinates_3dr.hpp" bodystart="890" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__nd_8cpp_1af25c5ecc208acf4dc09b8a68d89a9f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_nd&lt; float &gt; &amp;x1, const coordinates_nd&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_nd.cpp" line="7" column="7" bodyfile="coordinates/coordinates_nd.cpp" bodystart="7" bodyend="22" declfile="coordinates/coordinates_nd.hpp" declline="899" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__nd_8cpp_1ab9bb89b0f1f2274b0b8d1094b11b4709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_nd&lt; float &gt; &amp;x1, const point_nd&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_nd.cpp" line="24" column="7" bodyfile="coordinates/coordinates_nd.cpp" bodystart="24" bodyend="39" declfile="coordinates/coordinates_nd.hpp" declline="919" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__nd_8cpp_1a05cbcb31f10cb1f00b34ebc1a4f0d5e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_nd&lt; float &gt; &amp;x1, const coordinates_nd&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_nd.cpp" line="41" column="7" bodyfile="coordinates/coordinates_nd.cpp" bodystart="41" bodyend="56" declfile="coordinates/coordinates_nd.hpp" declline="939" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__nd_8hpp_1a20ad252d628354b47d9b77b2cbd3be3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_nd&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_nd.hpp" line="865" column="8" bodyfile="coordinates/coordinates_nd.hpp" bodystart="865" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__nd_8hpp_1aa9c691fe5cea2d9a34a6bf0544d6e64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_nd&lt; T &gt; &amp;x1, const coordinates_nd&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_nd.hpp" line="882" column="3" bodyfile="coordinates/coordinates_nd.hpp" bodystart="882" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__nd_8hpp_1af82b585c933ee2e8a805d5a163e4ba2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_nd&lt; T &gt; &amp;x1, const point_nd&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_nd.hpp" line="902" column="3" bodyfile="coordinates/coordinates_nd.hpp" bodystart="902" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__nd_8hpp_1ae7fd42eaaff9eb2ad54da7671ea93e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_nd&lt; T &gt; &amp;x1, const coordinates_nd&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_nd.hpp" line="922" column="3" bodyfile="coordinates/coordinates_nd.hpp" bodystart="922" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8cpp_1ae960e1a311378d8d4aaca8c540efec1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_ndr&lt; float &gt; &amp;x1, const coordinates_ndr&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.cpp" line="10" column="7" bodyfile="coordinates/coordinates_ndr.cpp" bodystart="10" bodyend="25" declfile="coordinates/coordinates_ndr.hpp" declline="1795" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8cpp_1af6e74ea54e3b311672d3c58643c1dad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_ndr&lt; float &gt; &amp;x1, const coordinates_nd&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.cpp" line="27" column="7" bodyfile="coordinates/coordinates_ndr.cpp" bodystart="27" bodyend="42" declfile="coordinates/coordinates_ndr.hpp" declline="1815" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8cpp_1a331b95a67b919159462f7f188eba86c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_nd&lt; float &gt; &amp;x1, const coordinates_ndr&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.cpp" line="44" column="7" bodyfile="coordinates/coordinates_ndr.cpp" bodystart="44" bodyend="59" declfile="coordinates/coordinates_ndr.hpp" declline="1835" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8cpp_1afbb950ee275e0391e5089c03b026fd1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const coordinates_ndr&lt; float &gt; &amp;x1, const point_nd&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.cpp" line="61" column="7" bodyfile="coordinates/coordinates_ndr.cpp" bodystart="61" bodyend="76" declfile="coordinates/coordinates_ndr.hpp" declline="1855" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8cpp_1a912868b06f23dfad39eec5f6c0360190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_nd&lt; float &gt; &amp;x1, const coordinates_ndr&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.cpp" line="78" column="7" bodyfile="coordinates/coordinates_ndr.cpp" bodystart="78" bodyend="93" declfile="coordinates/coordinates_ndr.hpp" declline="1875" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8hpp_1a79b64629018bbaf5471365feca65271e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const coordinates_ndr&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.hpp" line="1746" column="8" bodyfile="coordinates/coordinates_ndr.hpp" bodystart="1746" bodyend="1775"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8hpp_1a4afa6a8d8011b92a007db803052719b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_ndr&lt; T &gt; &amp;x1, const coordinates_ndr&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.hpp" line="1778" column="3" bodyfile="coordinates/coordinates_ndr.hpp" bodystart="1778" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8hpp_1a15fa2c72698bee1a2276e4103fc4d6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_ndr&lt; T &gt; &amp;x1, const coordinates_nd&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.hpp" line="1798" column="3" bodyfile="coordinates/coordinates_ndr.hpp" bodystart="1798" bodyend="1813"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8hpp_1a1dd06145b46dd4710ea36509f99d77ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_nd&lt; T &gt; &amp;x1, const coordinates_ndr&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__nd" kindref="compound">coordinates_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.hpp" line="1818" column="3" bodyfile="coordinates/coordinates_ndr.hpp" bodystart="1818" bodyend="1833"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8hpp_1adc7c3f453a33d5e985e442db06f1afdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const coordinates_ndr&lt; T &gt; &amp;x1, const point_nd&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.hpp" line="1838" column="3" bodyfile="coordinates/coordinates_ndr.hpp" bodystart="1838" bodyend="1853"/>
      </memberdef>
      <memberdef kind="function" id="coordinates__ndr_8hpp_1a36c69bc59af7520dbfb3efba4179a616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_nd&lt; T &gt; &amp;x1, const coordinates_ndr&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__ndr" kindref="compound">coordinates_ndr</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="coordinates/coordinates_ndr.hpp" line="1858" column="3" bodyfile="coordinates/coordinates_ndr.hpp" bodystart="1858" bodyend="1873"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a69478e727622b137c8c584a42e02aab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="245" column="8" bodyfile="meca_number/angle.cpp" bodystart="245" bodyend="250" declfile="meca_number/angle.hpp" declline="164" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1adcd329e643881fd86496df089f5d4299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::is_angle</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>is_angle</name>
        <qualifiedname>scifir::is_angle</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="252" column="6" bodyfile="meca_number/angle.cpp" bodystart="252" bodyend="283" declfile="meca_number/angle.hpp" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1ae4beaddada9427f8c7a53e3381c5b796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::parallel</definition>
        <argsstring>(const angle &amp;x, const angle &amp;y)</argsstring>
        <name>parallel</name>
        <qualifiedname>scifir::parallel</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="285" column="6" bodyfile="meca_number/angle.cpp" bodystart="285" bodyend="295" declfile="meca_number/angle.hpp" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a3ea95ad2c4137768f1e541e77db8a97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::orthogonal</definition>
        <argsstring>(const angle &amp;x, const angle &amp;y)</argsstring>
        <name>orthogonal</name>
        <qualifiedname>scifir::orthogonal</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="297" column="6" bodyfile="meca_number/angle.cpp" bodystart="297" bodyend="308" declfile="meca_number/angle.hpp" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1adeff4b825414d35ce963977f181f1b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::sqrt</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>scifir::sqrt</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="310" column="7" bodyfile="meca_number/angle.cpp" bodystart="310" bodyend="313" declfile="meca_number/angle.hpp" declline="169" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a8e9a84b989bde218cecdcdec5595cd0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::sqrt_nth</definition>
        <argsstring>(const angle &amp;x, int y)</argsstring>
        <name>sqrt_nth</name>
        <qualifiedname>scifir::sqrt_nth</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="315" column="7" bodyfile="meca_number/angle.cpp" bodystart="315" bodyend="318" declfile="meca_number/angle.hpp" declline="170" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1ad3b92cdb628eeec991c326c1727fdd9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::sin</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>sin</name>
        <qualifiedname>scifir::sin</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="320" column="7" bodyfile="meca_number/angle.cpp" bodystart="320" bodyend="323" declfile="meca_number/angle.hpp" declline="172" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a36d6ffb762d9c276b4229a2bedf3bca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cos</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>cos</name>
        <qualifiedname>scifir::cos</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="325" column="7" bodyfile="meca_number/angle.cpp" bodystart="325" bodyend="328" declfile="meca_number/angle.hpp" declline="173" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1af04388d6eae86667f93b8f8b347b92f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::tan</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>tan</name>
        <qualifiedname>scifir::tan</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="330" column="7" bodyfile="meca_number/angle.cpp" bodystart="330" bodyend="333" declfile="meca_number/angle.hpp" declline="174" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a1f303936f1ea7ec91375b8d707a51a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::asin</definition>
        <argsstring>(float x)</argsstring>
        <name>asin</name>
        <qualifiedname>scifir::asin</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="335" column="7" bodyfile="meca_number/angle.cpp" bodystart="335" bodyend="338" declfile="meca_number/angle.hpp" declline="175" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1ad107726d553b98dd1061fa75b7f9cc60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::acos</definition>
        <argsstring>(float x)</argsstring>
        <name>acos</name>
        <qualifiedname>scifir::acos</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="340" column="7" bodyfile="meca_number/angle.cpp" bodystart="340" bodyend="343" declfile="meca_number/angle.hpp" declline="176" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a6238e1d28db776a5d6497d463cc18a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::atan</definition>
        <argsstring>(float x)</argsstring>
        <name>atan</name>
        <qualifiedname>scifir::atan</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="345" column="7" bodyfile="meca_number/angle.cpp" bodystart="345" bodyend="348" declfile="meca_number/angle.hpp" declline="177" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a4707b4683c6bef04243c9affcdbe0a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::sinh</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>sinh</name>
        <qualifiedname>scifir::sinh</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="350" column="7" bodyfile="meca_number/angle.cpp" bodystart="350" bodyend="353" declfile="meca_number/angle.hpp" declline="178" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a770ad7122728e4dfa85221c2c372e54c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::cosh</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>cosh</name>
        <qualifiedname>scifir::cosh</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="355" column="7" bodyfile="meca_number/angle.cpp" bodystart="355" bodyend="358" declfile="meca_number/angle.hpp" declline="179" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a3f2de7afed6fb51c22c9b81346a6642c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::tanh</definition>
        <argsstring>(const angle &amp;x)</argsstring>
        <name>tanh</name>
        <qualifiedname>scifir::tanh</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1angle" kindref="compound">angle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="360" column="7" bodyfile="meca_number/angle.cpp" bodystart="360" bodyend="363" declfile="meca_number/angle.hpp" declline="180" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1ac003e3c2113237706f4c4c50164a4024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::asinh</definition>
        <argsstring>(float x)</argsstring>
        <name>asinh</name>
        <qualifiedname>scifir::asinh</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="365" column="7" bodyfile="meca_number/angle.cpp" bodystart="365" bodyend="368" declfile="meca_number/angle.hpp" declline="181" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1a83266adde7a9639563d4ab6ae9090a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::acosh</definition>
        <argsstring>(float x)</argsstring>
        <name>acosh</name>
        <qualifiedname>scifir::acosh</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="370" column="7" bodyfile="meca_number/angle.cpp" bodystart="370" bodyend="373" declfile="meca_number/angle.hpp" declline="182" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8cpp_1acb80729ddcfa267023fefe9d39abac38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::atanh</definition>
        <argsstring>(float x)</argsstring>
        <name>atanh</name>
        <qualifiedname>scifir::atanh</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.cpp" line="375" column="7" bodyfile="meca_number/angle.cpp" bodystart="375" bodyend="378" declfile="meca_number/angle.hpp" declline="183" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1acb875290bc71514ed24892a956635afb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::radian_to_grade</definition>
        <argsstring>(float x)</argsstring>
        <name>radian_to_grade</name>
        <qualifiedname>scifir::radian_to_grade</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="17" column="14" bodyfile="meca_number/angle.hpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a1ab2a3eb607941d5b2519da7382540ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::grade_to_radian</definition>
        <argsstring>(float x)</argsstring>
        <name>grade_to_radian</name>
        <qualifiedname>scifir::grade_to_radian</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="22" column="14" bodyfile="meca_number/angle.hpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a6461914f5055daf6492d116126e74d55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::asin_grade</definition>
        <argsstring>(float x)</argsstring>
        <name>asin_grade</name>
        <qualifiedname>scifir::asin_grade</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="185" column="14" bodyfile="meca_number/angle.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1aa8db9e933de432ea65f7f41ef2b99e0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::acos_grade</definition>
        <argsstring>(float x)</argsstring>
        <name>acos_grade</name>
        <qualifiedname>scifir::acos_grade</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="190" column="14" bodyfile="meca_number/angle.hpp" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1ab26866c5f85571fb48783ebee102d01d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::atan_grade</definition>
        <argsstring>(float x)</argsstring>
        <name>atan_grade</name>
        <qualifiedname>scifir::atan_grade</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="195" column="14" bodyfile="meca_number/angle.hpp" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1af0c9433bbb798d0d48cea30847a17925" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::asinh_grade</definition>
        <argsstring>(float x)</argsstring>
        <name>asinh_grade</name>
        <qualifiedname>scifir::asinh_grade</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="200" column="14" bodyfile="meca_number/angle.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a0cf2b5498c31442be9452ae103faf3e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::acosh_grade</definition>
        <argsstring>(float x)</argsstring>
        <name>acosh_grade</name>
        <qualifiedname>scifir::acosh_grade</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="205" column="14" bodyfile="meca_number/angle.hpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="angle_8hpp_1a856fa6916a5c045acc422a08ef19bd19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::atanh_grade</definition>
        <argsstring>(float x)</argsstring>
        <name>atanh_grade</name>
        <qualifiedname>scifir::atanh_grade</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/angle.hpp" line="210" column="14" bodyfile="meca_number/angle.hpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="complex__number_8cpp_1aa28fb8e3c6aa92108db7faac70b47f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::is_complex</definition>
        <argsstring>(const string &amp;init_complex_number)</argsstring>
        <name>is_complex</name>
        <qualifiedname>scifir::is_complex</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>init_complex_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/complex_number.cpp" line="7" column="6" bodyfile="meca_number/complex_number.cpp" bodystart="7" bodyend="69" declfile="meca_number/complex_number.hpp" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="complex__number_8hpp_1aaa5f898193180977eaaf32ff616e513b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const complex_number&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1complex__number" kindref="compound">complex_number</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/complex_number.hpp" line="159" column="8" bodyfile="meca_number/complex_number.hpp" bodystart="159" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="complex__number_8hpp_1a0fca35769fd130e4f6303660a24e6c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::abs</definition>
        <argsstring>(const complex_number&lt; T &gt; &amp;x)</argsstring>
        <name>abs</name>
        <qualifiedname>scifir::abs</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1complex__number" kindref="compound">complex_number</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/complex_number.hpp" line="169" column="3" bodyfile="meca_number/complex_number.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="complex__number_8hpp_1a42ca4eb81f62ec2315983189e88f5ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1complex__number" kindref="compound">complex_number</ref>&lt; T &gt;</type>
        <definition>complex_number&lt; T &gt; scifir::sqrt</definition>
        <argsstring>(const complex_number&lt; T &gt; &amp;x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>scifir::sqrt</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1complex__number" kindref="compound">complex_number</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/complex_number.hpp" line="175" column="16" bodyfile="meca_number/complex_number.hpp" bodystart="175" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="complex__number_8hpp_1a49681d9ae2de84dc4309e04f6f238091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::sin</definition>
        <argsstring>(complex_number&lt; T &gt; x)</argsstring>
        <name>sin</name>
        <qualifiedname>scifir::sin</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1complex__number" kindref="compound">complex_number</ref>&lt; T &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/complex_number.hpp" line="196" column="3" bodyfile="meca_number/complex_number.hpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="lab__number_8hpp_1a8678aa370e625c458e82b7b74b96d278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const lab_number&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1lab__number" kindref="compound">lab_number</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="meca_number/lab_number.hpp" line="121" column="8" bodyfile="meca_number/lab_number.hpp" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="astronomy__units_8cpp_1a17fa032efeca725d547c96277f4f6ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(specific_angular_momentum,&quot;m2/s&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_angular_momentum</ref></type>
        </param>
        <param>
          <type>&quot;m2/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/astronomy_units.cpp" line="7" column="1" declfile="predefined_units/astronomy_units.cpp" declline="7" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="astronomy__units_8hpp_1ae3da28a5b01c7f278bd9f3936d3605bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(specific_angular_momentum)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_angular_momentum</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/astronomy_units.hpp" line="11" column="1" declfile="predefined_units/astronomy_units.hpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a5d6cfabb76a9753e9e073e79194b5866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(density,&quot;g/m3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">density</ref></type>
        </param>
        <param>
          <type>&quot;g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="10" column="1" declfile="predefined_units/chemistry_units.cpp" declline="10" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a5e49a6dfffe5fc0c9ff381ab99873c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(viscosity,&quot;m2/s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">viscosity</ref></type>
        </param>
        <param>
          <type>&quot;m2/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="11" column="1" declfile="predefined_units/chemistry_units.cpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a9dae8769dbaec3e99ec27f782ddad4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(specific_volume,&quot;m3/g&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_volume</ref></type>
        </param>
        <param>
          <type>&quot;m3/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">g&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="12" column="1" declfile="predefined_units/chemistry_units.cpp" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a16ecdc1b530e269a636e1ae82ea9f1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(specific_heat_capacity,&quot;m2/s2*K&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_heat_capacity</ref></type>
        </param>
        <param>
          <type>&quot;m2/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">K&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="13" column="1" declfile="predefined_units/chemistry_units.cpp" declline="13" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a23351675a5fabc973a5cffe8eb104b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(specific_entropy,&quot;m2/s2*K&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_entropy</ref></type>
        </param>
        <param>
          <type>&quot;m2/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">K&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="14" column="1" declfile="predefined_units/chemistry_units.cpp" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a6eb9ba9fc536fe87631166e92c13cbd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(specific_energy,&quot;m2/s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_energy</ref></type>
        </param>
        <param>
          <type>&quot;m2/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="15" column="1" declfile="predefined_units/chemistry_units.cpp" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a2cd821ed2982998ed2778363090fed1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molar_volume,&quot;m3/mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_volume</ref></type>
        </param>
        <param>
          <type>&quot;m3/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">mol&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="16" column="1" declfile="predefined_units/chemistry_units.cpp" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a0981eb68c9e5ab542881a66520707f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molar_mass,&quot;g/mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_mass</ref></type>
        </param>
        <param>
          <type>&quot;g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">mol&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="17" column="1" declfile="predefined_units/chemistry_units.cpp" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a2bcb17ab2e6576141c809c82306bcbc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molar_heat_capacity,&quot;m2*g/s2*K*mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_heat_capacity</ref></type>
        </param>
        <param>
          <type>&quot;m2*g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>*K*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">mol&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="18" column="1" declfile="predefined_units/chemistry_units.cpp" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a4ec8920d411b01291fbad20c25f4988a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molar_enthalpy,&quot;m2*g/s2*mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_enthalpy</ref></type>
        </param>
        <param>
          <type>&quot;m2*g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">mol&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="19" column="1" declfile="predefined_units/chemistry_units.cpp" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a4af38679293da8fe13acf66b043f2955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molar_entropy,&quot;m2*g/s2*K*mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_entropy</ref></type>
        </param>
        <param>
          <type>&quot;m2*g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>*K*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">mol&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="20" column="1" declfile="predefined_units/chemistry_units.cpp" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a3d9df5368dc2fa577a1f362a70df055f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molar_energy,&quot;m2*g/s2*mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_energy</ref></type>
        </param>
        <param>
          <type>&quot;m2*g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">mol&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="21" column="1" declfile="predefined_units/chemistry_units.cpp" declline="21" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a9e2644261e567ecc655f74d32543f381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molar_conductivity,&quot;s3*A2/g*mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_conductivity</ref></type>
        </param>
        <param>
          <type>&quot;s3*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">A2</ref>/g*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">mol&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="22" column="1" declfile="predefined_units/chemistry_units.cpp" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a9f9fe8d88b64875594bded97ae517982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(energy_density,&quot;g/m*s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">energy_density</ref></type>
        </param>
        <param>
          <type>&quot;g/m*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="23" column="1" declfile="predefined_units/chemistry_units.cpp" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1aa8be50af4878cebac89e8c75b92ad6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(catalytic_efficiency,&quot;m3/s*mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">catalytic_efficiency</ref></type>
        </param>
        <param>
          <type>&quot;m3/s*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">mol&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="24" column="1" declfile="predefined_units/chemistry_units.cpp" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a025d1053300c434639819eed2f8c3705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molarity,&quot;mol/m3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molarity</ref></type>
        </param>
        <param>
          <type>&quot;mol/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="36" column="1" declfile="predefined_units/chemistry_units.cpp" declline="36" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a3fec254ade6f05ea5fe824c2f3d07f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(molality,&quot;mol/g&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molality</ref></type>
        </param>
        <param>
          <type>&quot;mol/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">g&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="37" column="1" declfile="predefined_units/chemistry_units.cpp" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a93bffb1a2953cb075ea72857d584c40a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(linear_mass_density,&quot;g/m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">linear_mass_density</ref></type>
        </param>
        <param>
          <type>&quot;g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="38" column="1" declfile="predefined_units/chemistry_units.cpp" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1a0d960fb0d83593357b1eb744385c7be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(area_density,&quot;g/m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">area_density</ref></type>
        </param>
        <param>
          <type>&quot;g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="39" column="1" declfile="predefined_units/chemistry_units.cpp" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1aec97a8f5356a0a4903067816af6213c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(dynamic_viscosity,&quot;g/m*s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">dynamic_viscosity</ref></type>
        </param>
        <param>
          <type>&quot;g/m*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="40" column="1" declfile="predefined_units/chemistry_units.cpp" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1af93376dc9e367cf58bd1fa22414a146e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(mass_flow_rate,&quot;g/s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">mass_flow_rate</ref></type>
        </param>
        <param>
          <type>&quot;g/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="41" column="1" declfile="predefined_units/chemistry_units.cpp" declline="41" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8cpp_1ab2b98a52955bcca62afe085e77a2b421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(catalytic_activity,&quot;kat&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">catalytic_activity</ref></type>
        </param>
        <param>
          <type>&quot;kat&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.cpp" line="42" column="1" declfile="predefined_units/chemistry_units.cpp" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a34218567fe8a218b9982d0a26f613c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="11" column="1" declfile="predefined_units/chemistry_units.hpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1afe4d4e0130b2e033ea65ab6ac0f431ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(viscosity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">viscosity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="12" column="1" declfile="predefined_units/chemistry_units.hpp" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a99e03aec9beae6dfce8a308bfb2d44dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(specific_volume)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_volume</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="13" column="1" declfile="predefined_units/chemistry_units.hpp" declline="13" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a9cd3eae98bc8612c21242b947dffdda8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(specific_heat_capacity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_heat_capacity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="14" column="1" declfile="predefined_units/chemistry_units.hpp" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a304fde130a29d18ad60f0e9992c5be2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(specific_entropy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_entropy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="15" column="1" declfile="predefined_units/chemistry_units.hpp" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a1220893b9ddc51f239121a7e058a5826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(specific_energy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">specific_energy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="16" column="1" declfile="predefined_units/chemistry_units.hpp" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a457b57450cd24bd1ba2dac0feb007e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molar_volume)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_volume</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="17" column="1" declfile="predefined_units/chemistry_units.hpp" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1aa95838062e5bed940c496ea3593fb58e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molar_mass)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_mass</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="18" column="1" declfile="predefined_units/chemistry_units.hpp" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a7f945c203ba3c9fa40ef8e4ce0ceb954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molar_heat_capacity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_heat_capacity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="19" column="1" declfile="predefined_units/chemistry_units.hpp" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a73dec4b7c6b9ac9fb6f011af3194e8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molar_enthalpy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_enthalpy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="20" column="1" declfile="predefined_units/chemistry_units.hpp" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a5441473c330c544dc5875f87a7634261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molar_entropy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_entropy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="21" column="1" declfile="predefined_units/chemistry_units.hpp" declline="21" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a6b8b97e783ab9ecbd3325ea77e069f2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molar_energy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_energy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="22" column="1" declfile="predefined_units/chemistry_units.hpp" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1ae2f0c1d74b5ba91c27fe28de004946d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molar_conductivity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molar_conductivity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="23" column="1" declfile="predefined_units/chemistry_units.hpp" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1ad7478340a8f3e958d480bdcd04394d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(energy_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">energy_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="24" column="1" declfile="predefined_units/chemistry_units.hpp" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a5dc1bbfd1c948bead5d30eee96975bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(catalytic_efficiency)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">catalytic_efficiency</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="25" column="1" declfile="predefined_units/chemistry_units.hpp" declline="25" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a4919753af5390f7151128c4a214fab21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molarity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molarity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="44" column="1" declfile="predefined_units/chemistry_units.hpp" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1acc39c9fdd238381bb17532a3437563d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(molality)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">molality</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="45" column="1" declfile="predefined_units/chemistry_units.hpp" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1aa4de67f0bbb6c704c6e5f8a1dc74ebfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(linear_mass_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">linear_mass_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="46" column="1" declfile="predefined_units/chemistry_units.hpp" declline="46" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a30150cd4e4f903d2e38a91e306ff29c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(area_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">area_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="47" column="1" declfile="predefined_units/chemistry_units.hpp" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1aafa5370df9b79870fb66c10a41511e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(dynamic_viscosity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">dynamic_viscosity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="48" column="1" declfile="predefined_units/chemistry_units.hpp" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1a75ad8310996c98f200d25d2343be305f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(mass_flow_rate)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">mass_flow_rate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="49" column="1" declfile="predefined_units/chemistry_units.hpp" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="chemistry__units_8hpp_1ab8fd4ebc0431b0ca165cab61a61b2664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(catalytic_activity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">catalytic_activity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/chemistry_units.hpp" line="50" column="1" declfile="predefined_units/chemistry_units.hpp" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8cpp_1a91afeb5e791892aad0079a978c7341f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(electrical_conductivity,&quot;A2*s3/kg*m3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electrical_conductivity</ref></type>
        </param>
        <param>
          <type>&quot;A2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.cpp" line="7" column="1" declfile="predefined_units/electronics_units.cpp" declline="7" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8cpp_1a836444954ee37bd50f890a484a04765b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(resistance,&quot;kg*m2/A2*s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">resistance</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">A2</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.cpp" line="8" column="1" declfile="predefined_units/electronics_units.cpp" declline="8" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8cpp_1a30917fb0e36e090d2181de15bc360512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(electric_conductance,&quot;A2*s3/kg*m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_conductance</ref></type>
        </param>
        <param>
          <type>&quot;A2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.cpp" line="9" column="1" declfile="predefined_units/electronics_units.cpp" declline="9" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8cpp_1a9bdef7e3453f44b67bf1cf8c1fbc8c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(capacitance,&quot;A2*s4/m2*kg&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">capacitance</ref></type>
        </param>
        <param>
          <type>&quot;A2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s4</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.cpp" line="10" column="1" declfile="predefined_units/electronics_units.cpp" declline="10" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8cpp_1a396da9caaabf475aee932a9db76b4136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(permittivity,&quot;A2*s4/kg*m3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">permittivity</ref></type>
        </param>
        <param>
          <type>&quot;A2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s4</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.cpp" line="11" column="1" declfile="predefined_units/electronics_units.cpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8cpp_1af938a7dd8a7156a3885664c4728a1985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(resistivity,&quot;kg*m3/A2*s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">resistivity</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m3</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">A2</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.cpp" line="12" column="1" declfile="predefined_units/electronics_units.cpp" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8cpp_1aaceefba8de1f41eb7c15c3196615e6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(linear_charge_density,&quot;A*s/m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">linear_charge_density</ref></type>
        </param>
        <param>
          <type>&quot;A*s/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.cpp" line="13" column="1" declfile="predefined_units/electronics_units.cpp" declline="13" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8cpp_1a0f17540dc432f662fce14805da15b5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(frequency_drift,&quot;1/s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">frequency_drift</ref></type>
        </param>
        <param>
          <type>&quot;1/s2&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.cpp" line="14" column="1" declfile="predefined_units/electronics_units.cpp" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8hpp_1a30a3ab1c1639029ed888bb7f81569ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(electrical_conductivity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electrical_conductivity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.hpp" line="11" column="1" declfile="predefined_units/electronics_units.hpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8hpp_1a6c5f039c6c1aecd44967928289f18e4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(resistance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">resistance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.hpp" line="12" column="1" declfile="predefined_units/electronics_units.hpp" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8hpp_1a890026520992f085421f13f13b5fd9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(electric_conductance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_conductance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.hpp" line="13" column="1" declfile="predefined_units/electronics_units.hpp" declline="13" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8hpp_1ade0473af66220fb8cfd14a80ab43f043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(capacitance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">capacitance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.hpp" line="14" column="1" declfile="predefined_units/electronics_units.hpp" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8hpp_1ac64e4f0f9c285a524a55dc30735dd844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(permittivity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">permittivity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.hpp" line="15" column="1" declfile="predefined_units/electronics_units.hpp" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8hpp_1a7e8e6851ed502d002614ef26f733b530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(resistivity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">resistivity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.hpp" line="16" column="1" declfile="predefined_units/electronics_units.hpp" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8hpp_1a68c49a2257a64946321723e2ab9c68ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(linear_charge_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">linear_charge_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.hpp" line="17" column="1" declfile="predefined_units/electronics_units.hpp" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="electronics__units_8hpp_1a05ef0d5cbaa02a70786ba02def3c4fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(frequency_drift)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">frequency_drift</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/electronics_units.hpp" line="18" column="1" declfile="predefined_units/electronics_units.hpp" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="informatics__units_8cpp_1a3b4c9df9e4eae8d455ff188129513568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(transfer_speed,&quot;B/s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">transfer_speed</ref></type>
        </param>
        <param>
          <type>&quot;B/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/informatics_units.cpp" line="7" column="1" declfile="predefined_units/informatics_units.cpp" declline="7" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="informatics__units_8hpp_1a53d2fffc42db9d7bb3ef67a97beb2a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(transfer_speed)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">transfer_speed</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/informatics_units.hpp" line="10" column="1" declfile="predefined_units/informatics_units.hpp" declline="10" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a15d347234f5ea1e6140dc462a49b7893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_2D_CPP</definition>
        <argsstring>(displacement,&quot;m&quot;)</argsstring>
        <name>VECTOR_UNIT_2D_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_2D_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">displacement</ref></type>
        </param>
        <param>
          <type>&quot;m&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="6" column="1" declfile="predefined_units/physics_units.cpp" declline="6" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aca97036ef7d1e52d27d1306b000f7a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_3D_CPP</definition>
        <argsstring>(displacement,&quot;m&quot;)</argsstring>
        <name>VECTOR_UNIT_3D_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_3D_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">displacement</ref></type>
        </param>
        <param>
          <type>&quot;m&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="7" column="1" declfile="predefined_units/physics_units.cpp" declline="7" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1afe1e4a42a263117a6fd2004a69c92cd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_ND_CPP</definition>
        <argsstring>(displacement,&quot;m&quot;)</argsstring>
        <name>VECTOR_UNIT_ND_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_ND_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">displacement</ref></type>
        </param>
        <param>
          <type>&quot;m&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="8" column="1" declfile="predefined_units/physics_units.cpp" declline="8" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aac78edd4ee638d588a5163a538407233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(velocity,&quot;m/s&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">velocity</ref></type>
        </param>
        <param>
          <type>&quot;m/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="9" column="1" declfile="predefined_units/physics_units.cpp" declline="9" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ae5cc9338b4c7f63d2af96b00a0e97780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(acceleration,&quot;m/s2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">acceleration</ref></type>
        </param>
        <param>
          <type>&quot;m/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="10" column="1" declfile="predefined_units/physics_units.cpp" declline="10" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a0beddb0703a698d81cf3222d2777e7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(jerk,&quot;m/s3&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">jerk</ref></type>
        </param>
        <param>
          <type>&quot;m/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="11" column="1" declfile="predefined_units/physics_units.cpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a06bd38559091d2ba444ab87e4acf36ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(snap,&quot;m/s4&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">snap</ref></type>
        </param>
        <param>
          <type>&quot;m/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s4&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="12" column="1" declfile="predefined_units/physics_units.cpp" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a767169c85d611dc45b65b858c105c81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(angular_velocity,&quot;rad/s&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">angular_velocity</ref></type>
        </param>
        <param>
          <type>&quot;rad/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="13" column="1" declfile="predefined_units/physics_units.cpp" declline="13" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ae239ad62f61461d9cc415a5081f18699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(angular_acceleration,&quot;rad/s2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">angular_acceleration</ref></type>
        </param>
        <param>
          <type>&quot;rad/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="14" column="1" declfile="predefined_units/physics_units.cpp" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a5562fdeb6e26f1715296d71420eb4216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(angular_momentum,&quot;m2*kg/s&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">angular_momentum</ref></type>
        </param>
        <param>
          <type>&quot;m2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="15" column="1" declfile="predefined_units/physics_units.cpp" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ad37fdfa752ebbf0d4d8ad2a61b6a6374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(impulse,&quot;m*kg/s&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">impulse</ref></type>
        </param>
        <param>
          <type>&quot;m*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="18" column="1" declfile="predefined_units/physics_units.cpp" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a8bb6c52c30ced8c0aa45833dcbc240d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(force,&quot;kg*m/s2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">force</ref></type>
        </param>
        <param>
          <type>&quot;kg*m/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="19" column="1" declfile="predefined_units/physics_units.cpp" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a06e383e88e63253d595ecdc3b406b9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(torque,&quot;kg*m2/s2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">torque</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="20" column="1" declfile="predefined_units/physics_units.cpp" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a6140b9c43b76f4c308c86203782c3042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(pressure,&quot;kg/m*s2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">pressure</ref></type>
        </param>
        <param>
          <type>&quot;kg/m*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="21" column="1" declfile="predefined_units/physics_units.cpp" declline="21" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a2debc0f412d90ddf534e0bc81a7124a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(surface_tension,&quot;kg/s2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">surface_tension</ref></type>
        </param>
        <param>
          <type>&quot;kg/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="22" column="1" declfile="predefined_units/physics_units.cpp" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a963d93c46d8b69145b5841a9710077e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(stiffness,&quot;kg/s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">stiffness</ref></type>
        </param>
        <param>
          <type>&quot;kg/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="23" column="1" declfile="predefined_units/physics_units.cpp" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aa865d93ddff7dc25670ade71cb93bae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(moment_of_inertia,&quot;m2*kg&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">moment_of_inertia</ref></type>
        </param>
        <param>
          <type>&quot;m2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="24" column="1" declfile="predefined_units/physics_units.cpp" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1afb69f24ae0bad6c22766535b04cd620d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(electric_current,&quot;A&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_current</ref></type>
        </param>
        <param>
          <type>&quot;A&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="27" column="1" declfile="predefined_units/physics_units.cpp" declline="27" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a3654a0426bc29e1c75af1318a405d0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(voltage,&quot;V&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">voltage</ref></type>
        </param>
        <param>
          <type>&quot;V&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="28" column="1" declfile="predefined_units/physics_units.cpp" declline="28" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a5669a7110d8a5cb2eea7b05dac7216f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(electric_displacement_field,&quot;A*s/m2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_displacement_field</ref></type>
        </param>
        <param>
          <type>&quot;A*s/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="29" column="1" declfile="predefined_units/physics_units.cpp" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aff9b6c0a6bdf6a42a90d4b5df60c761b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(electric_charge_density,&quot;A*s/m3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_charge_density</ref></type>
        </param>
        <param>
          <type>&quot;A*s/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="30" column="1" declfile="predefined_units/physics_units.cpp" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ab184fa3bb341703c839133dde0925ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(electric_current_density,&quot;A/m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_current_density</ref></type>
        </param>
        <param>
          <type>&quot;A/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="31" column="1" declfile="predefined_units/physics_units.cpp" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aa1de1a7d55659daf2bcd48d352b16e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(electric_field_strength,&quot;kg*m/A*s3&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_field_strength</ref></type>
        </param>
        <param>
          <type>&quot;kg*m/A*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="32" column="1" declfile="predefined_units/physics_units.cpp" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ab286be2904526059464d9f61f2908c96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(electron_mobility,&quot;A*s2/kg&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electron_mobility</ref></type>
        </param>
        <param>
          <type>&quot;A*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="33" column="1" declfile="predefined_units/physics_units.cpp" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a2f44eec1f55869427b12d2ec45632a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(inductance,&quot;H&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">inductance</ref></type>
        </param>
        <param>
          <type>&quot;H&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="34" column="1" declfile="predefined_units/physics_units.cpp" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a04ee967afb50c39d7552596079ab7455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(volumetric_flow,&quot;m3/s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">volumetric_flow</ref></type>
        </param>
        <param>
          <type>&quot;m3/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="37" column="1" declfile="predefined_units/physics_units.cpp" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a92f79e02804e9300acffe81decf763e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(diffusion_coefficient,&quot;m2/s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">diffusion_coefficient</ref></type>
        </param>
        <param>
          <type>&quot;m2/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="38" column="1" declfile="predefined_units/physics_units.cpp" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1abcda2817423291f1ac134350a202eb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(compressibility,&quot;m*s2/kg&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">compressibility</ref></type>
        </param>
        <param>
          <type>&quot;m*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="39" column="1" declfile="predefined_units/physics_units.cpp" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a20b191446836870adfbe0e069a978bff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(polarization_density,&quot;A*s/m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">polarization_density</ref></type>
        </param>
        <param>
          <type>&quot;A*s/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="42" column="1" declfile="predefined_units/physics_units.cpp" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a58f0315f05ca270681f1ffa8252912dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(magnetic_permeability,&quot;A2*s2/kg*m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_permeability</ref></type>
        </param>
        <param>
          <type>&quot;A2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="43" column="1" declfile="predefined_units/physics_units.cpp" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a2a04ea85a740bc20e56590ae6a70f529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(magnetization,&quot;A/m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetization</ref></type>
        </param>
        <param>
          <type>&quot;A/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="44" column="1" declfile="predefined_units/physics_units.cpp" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a7930f21ec97288f50672c819a7596897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(magnetic_flux,&quot;Wb&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_flux</ref></type>
        </param>
        <param>
          <type>&quot;Wb&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="45" column="1" declfile="predefined_units/physics_units.cpp" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1afb0071f5701f708994c336133fd52b3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(magnetic_strength,&quot;Wb/m2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_strength</ref></type>
        </param>
        <param>
          <type>&quot;Wb/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="46" column="1" declfile="predefined_units/physics_units.cpp" declline="46" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a2166951450c029cec656f40f9be96d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(magnetic_moment,&quot;A*m2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_moment</ref></type>
        </param>
        <param>
          <type>&quot;A*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="47" column="1" declfile="predefined_units/physics_units.cpp" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a4141822a2bc76710cb612348ab21d1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(magnetic_reluctance,&quot;A2*s2/kg*m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_reluctance</ref></type>
        </param>
        <param>
          <type>&quot;A2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="48" column="1" declfile="predefined_units/physics_units.cpp" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a51d5c9f94bb32c6759f94b234232ef1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(magnetic_vector_potential,&quot;kg*m/A*s2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_vector_potential</ref></type>
        </param>
        <param>
          <type>&quot;kg*m/A*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="49" column="1" declfile="predefined_units/physics_units.cpp" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1af34ee128e93b2445f9b554d19e9372dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(magnetic_rigidity,&quot;kg*m/A*s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_rigidity</ref></type>
        </param>
        <param>
          <type>&quot;kg*m/A*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="50" column="1" declfile="predefined_units/physics_units.cpp" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a820a048800f17cc9d65cdd7c94e65626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(magnetomotive_force,&quot;A&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetomotive_force</ref></type>
        </param>
        <param>
          <type>&quot;A&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="51" column="1" declfile="predefined_units/physics_units.cpp" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a5a996d88200809b3e742832c0be61d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(magnetic_susceptibility,&quot;A2*s2/kg*m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_susceptibility</ref></type>
        </param>
        <param>
          <type>&quot;A2*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="52" column="1" declfile="predefined_units/physics_units.cpp" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a84358d544d05c1c81129382524131eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(optical_power,&quot;1/m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">optical_power</ref></type>
        </param>
        <param>
          <type>&quot;1/m&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="55" column="1" declfile="predefined_units/physics_units.cpp" declline="55" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a44d3eecd84804f4880673862d49e0ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(luminance,&quot;cd/m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminance</ref></type>
        </param>
        <param>
          <type>&quot;cd/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="56" column="1" declfile="predefined_units/physics_units.cpp" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aea9bceaf21c36a83c979de3c43656c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(illuminance,&quot;lx&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">illuminance</ref></type>
        </param>
        <param>
          <type>&quot;lx&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="57" column="1" declfile="predefined_units/physics_units.cpp" declline="57" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a9bff27132ac60248a1075b5fda2b2aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(luminous_flux,&quot;lm&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminous_flux</ref></type>
        </param>
        <param>
          <type>&quot;lm&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="58" column="1" declfile="predefined_units/physics_units.cpp" declline="58" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a18df75207c3f184e517d5c1672f6e323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(luminous_energy,&quot;cd*sr*s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminous_energy</ref></type>
        </param>
        <param>
          <type>&quot;cd*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">sr</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="59" column="1" declfile="predefined_units/physics_units.cpp" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a77efd0c8b5121c9238d2f88466cc0049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(luminous_exposure,&quot;cd*sr*s/m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminous_exposure</ref></type>
        </param>
        <param>
          <type>&quot;cd*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">sr</ref>*s/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="60" column="1" declfile="predefined_units/physics_units.cpp" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1af4959c5545712946e0df4f0a6114a07a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(luminous_efficacy,&quot;lm/W&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminous_efficacy</ref></type>
        </param>
        <param>
          <type>&quot;lm/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">W&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="61" column="1" declfile="predefined_units/physics_units.cpp" declline="61" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a58bf9891115ab039eea06c41b33febb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(ionizing_radiation,&quot;A*s/kg&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">ionizing_radiation</ref></type>
        </param>
        <param>
          <type>&quot;A*s/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="62" column="1" declfile="predefined_units/physics_units.cpp" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aa63bcbf4eef6d229722a5c7a4b074c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(absorbed_dose,&quot;m2/s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">absorbed_dose</ref></type>
        </param>
        <param>
          <type>&quot;m2/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="63" column="1" declfile="predefined_units/physics_units.cpp" declline="63" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ac258c3766f516d6f284c87ee664a9514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(energy,&quot;kg*m2/s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">energy</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="66" column="1" declfile="predefined_units/physics_units.cpp" declline="66" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a7bcd399f35c946e9566a3efb8abc66bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(action,&quot;kg*m2/s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">action</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="67" column="1" declfile="predefined_units/physics_units.cpp" declline="67" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a39283badb6407a151027548f4e75b6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(power,&quot;kg*m2/s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">power</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="68" column="1" declfile="predefined_units/physics_units.cpp" declline="68" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a543e832074473900f6d8f7dedb246585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(power_density,&quot;kg/m*s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">power_density</ref></type>
        </param>
        <param>
          <type>&quot;kg/m*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="69" column="1" declfile="predefined_units/physics_units.cpp" declline="69" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ae99a438ef5ba712735c62fa48f02dac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(enthalpy,&quot;kg*m2/s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">enthalpy</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="70" column="1" declfile="predefined_units/physics_units.cpp" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a93fda974dfb6f8acde1330982af94995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(entropy,&quot;kg*m2/K*s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">entropy</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/K*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="71" column="1" declfile="predefined_units/physics_units.cpp" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a3d75cbfb3889c17893e640edafbed38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(heat_capacity,&quot;kg*m2/K*s2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">heat_capacity</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/K*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="72" column="1" declfile="predefined_units/physics_units.cpp" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ae894c51b2d87f26510d85ba3c182547e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(heat_flux_density,&quot;kg/s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">heat_flux_density</ref></type>
        </param>
        <param>
          <type>&quot;kg/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="73" column="1" declfile="predefined_units/physics_units.cpp" declline="73" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1afdd2f469641b00f2600b710c9024829c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(thermal_conductivity,&quot;kg*m/K*s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">thermal_conductivity</ref></type>
        </param>
        <param>
          <type>&quot;kg*m/K*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="74" column="1" declfile="predefined_units/physics_units.cpp" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a2d68feabd09101c2cd88e6acde269662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(thermal_diffusivity,&quot;m2/s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">thermal_diffusivity</ref></type>
        </param>
        <param>
          <type>&quot;m2/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="75" column="1" declfile="predefined_units/physics_units.cpp" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a1e3bb12828680b30dc468e38e7402207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(thermal_resistance,&quot;K*s3/kg*m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">thermal_resistance</ref></type>
        </param>
        <param>
          <type>&quot;K*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">kg</ref>*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="76" column="1" declfile="predefined_units/physics_units.cpp" declline="76" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a4177a835f18cbe8bb98280edde00376e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(thermal_expansion_coefficient,&quot;1/K&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">thermal_expansion_coefficient</ref></type>
        </param>
        <param>
          <type>&quot;1/K&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="77" column="1" declfile="predefined_units/physics_units.cpp" declline="77" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1a10dc953e280b3c0912b0ca9738d9bbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(temperature_gradient,&quot;K/m&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">temperature_gradient</ref></type>
        </param>
        <param>
          <type>&quot;K/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="78" column="1" declfile="predefined_units/physics_units.cpp" declline="78" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aec3a1052e8cc045b40fce6e0ccb5cb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(energy_flux_density,&quot;kg/s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">energy_flux_density</ref></type>
        </param>
        <param>
          <type>&quot;kg/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="79" column="1" declfile="predefined_units/physics_units.cpp" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1aa5537e379378f0d4104f4bd1570a80ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(wavenumber,&quot;1/m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">wavenumber</ref></type>
        </param>
        <param>
          <type>&quot;1/m&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="82" column="1" declfile="predefined_units/physics_units.cpp" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8cpp_1ad2b9c74dd27b4193ba0ca637cc9dce64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(frequency,&quot;1/s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">frequency</ref></type>
        </param>
        <param>
          <type>&quot;1/s&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.cpp" line="83" column="1" declfile="predefined_units/physics_units.cpp" declline="83" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a634938bccd5358ea24c8785f94b55e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_2D_HPP</definition>
        <argsstring>(displacement)</argsstring>
        <name>VECTOR_UNIT_2D_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_2D_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">displacement</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="14" column="1" declfile="predefined_units/physics_units.hpp" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a5329db1765d874acd27db497c81bb9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_3D_HPP</definition>
        <argsstring>(displacement)</argsstring>
        <name>VECTOR_UNIT_3D_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_3D_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">displacement</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="15" column="1" declfile="predefined_units/physics_units.hpp" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a77da407df2ce8660ca8e2b9eb9f18fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_ND_HPP</definition>
        <argsstring>(displacement)</argsstring>
        <name>VECTOR_UNIT_ND_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_ND_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">displacement</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="16" column="1" declfile="predefined_units/physics_units.hpp" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ae25d6a9fd8eaa5b8515b96d50bb6715e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(velocity)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">velocity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="17" column="1" declfile="predefined_units/physics_units.hpp" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a29f9eb47ab4531db9972cca9ab53f18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(acceleration)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">acceleration</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="18" column="1" declfile="predefined_units/physics_units.hpp" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a1486fd017982e0d04308b4c6d2fd33cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(jerk)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">jerk</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="19" column="1" declfile="predefined_units/physics_units.hpp" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1aecf911ef3ab6050ce8d1f2590c2c45ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(snap)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">snap</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="20" column="1" declfile="predefined_units/physics_units.hpp" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ad438327a9d5c7e458785abf9ab62f0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(angular_velocity)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">angular_velocity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="21" column="1" declfile="predefined_units/physics_units.hpp" declline="21" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1aef974dcc9b8bf9a25444ca7b4959e4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(angular_acceleration)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">angular_acceleration</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="22" column="1" declfile="predefined_units/physics_units.hpp" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1acbe9b7ca13fa40a4370418de05d84540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(angular_momentum)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">angular_momentum</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="23" column="1" declfile="predefined_units/physics_units.hpp" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a4c9c17db6349114324c1d4c77afd5e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(impulse)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">impulse</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="26" column="1" declfile="predefined_units/physics_units.hpp" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a932c2c9bfdf0aa2d50a3d6cdef0dc467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(force)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">force</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="27" column="1" declfile="predefined_units/physics_units.hpp" declline="27" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a799b0deb74bdf85343e7a32f8ebffcae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(torque)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">torque</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="28" column="1" declfile="predefined_units/physics_units.hpp" declline="28" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a5cb3d22d0d8a90cd4c13e22c7e2cad0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(pressure)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">pressure</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="29" column="1" declfile="predefined_units/physics_units.hpp" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ad97b50512ed11524a6e8d8dc3cf1cf5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(surface_tension)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">surface_tension</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="30" column="1" declfile="predefined_units/physics_units.hpp" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a70aef4083c8d854e613bd0db68218e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(stiffness)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">stiffness</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="31" column="1" declfile="predefined_units/physics_units.hpp" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a423b137b51d9fb33afdc68738d2037e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(moment_of_inertia)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">moment_of_inertia</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="32" column="1" declfile="predefined_units/physics_units.hpp" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a03b1ce3cca2fbb5b92e53c5cd6108099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(electric_current)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_current</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="35" column="1" declfile="predefined_units/physics_units.hpp" declline="35" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a55445a719d3ec4b1bc2bd073f47a5eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(voltage)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">voltage</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="36" column="1" declfile="predefined_units/physics_units.hpp" declline="36" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a05bd111daa9b5cbe6da51a88a87f2db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(electric_displacement_field)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_displacement_field</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="37" column="1" declfile="predefined_units/physics_units.hpp" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a2c01f05aefc6a8195c470b3464389a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(electric_charge_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_charge_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="38" column="1" declfile="predefined_units/physics_units.hpp" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ae13a8d1ab43044b279925ac398753b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(electric_current_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_current_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="39" column="1" declfile="predefined_units/physics_units.hpp" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a2488adc931497041925f21bd1981d005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(electric_field_strength)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electric_field_strength</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="40" column="1" declfile="predefined_units/physics_units.hpp" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a193bba3dc5c7fe35c92f1bc172845d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(electron_mobility)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">electron_mobility</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="41" column="1" declfile="predefined_units/physics_units.hpp" declline="41" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ad599735406567745b79176d53871d004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(inductance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">inductance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="42" column="1" declfile="predefined_units/physics_units.hpp" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a391d969a9c46e96e9bcd5b68c1c2142a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(volumetric_flow)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">volumetric_flow</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="45" column="1" declfile="predefined_units/physics_units.hpp" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a6140171ea121003e03cf105f4d00d366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(diffusion_coefficient)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">diffusion_coefficient</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="46" column="1" declfile="predefined_units/physics_units.hpp" declline="46" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a09a9a72731c31d66d4bd21e920904411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(compressibility)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">compressibility</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="47" column="1" declfile="predefined_units/physics_units.hpp" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a5901a550e0f83c984ef4b8ac00a86d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(polarization_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">polarization_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="50" column="1" declfile="predefined_units/physics_units.hpp" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a76ac0b28d6655e3f9d917a551edc3fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(magnetic_permeability)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_permeability</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="51" column="1" declfile="predefined_units/physics_units.hpp" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1aefdea2b69e373f119f1f7c140178bbb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(magnetization)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetization</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="52" column="1" declfile="predefined_units/physics_units.hpp" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ab9c262323f90c1ff2d841cbe31946094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(magnetic_flux)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_flux</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="53" column="1" declfile="predefined_units/physics_units.hpp" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1aa729ae9af423e72c8a7ef61d92dee185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(magnetic_strength)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_strength</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="54" column="1" declfile="predefined_units/physics_units.hpp" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a8bedf6f84ffb978d5c3935f597368516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(magnetic_moment)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_moment</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="55" column="1" declfile="predefined_units/physics_units.hpp" declline="55" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a7895f739fea891d91fe63ffdfaea9e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(magnetic_reluctance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_reluctance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="56" column="1" declfile="predefined_units/physics_units.hpp" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ac89efc216eb6de93d4274cbe08081b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(magnetic_vector_potential)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_vector_potential</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="57" column="1" declfile="predefined_units/physics_units.hpp" declline="57" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1af2c5e3ea80d63571ad7e3404b0ad8f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(magnetic_rigidity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_rigidity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="58" column="1" declfile="predefined_units/physics_units.hpp" declline="58" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a56aad8816bc2117cebdebd2c3f543b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(magnetomotive_force)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetomotive_force</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="59" column="1" declfile="predefined_units/physics_units.hpp" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a282552712dd8811bfbef6b25c4eb2883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(magnetic_susceptibility)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">magnetic_susceptibility</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="60" column="1" declfile="predefined_units/physics_units.hpp" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a9ef633d3957e941b99e81517714e0d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(optical_power)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">optical_power</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="63" column="1" declfile="predefined_units/physics_units.hpp" declline="63" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a54ed4799bf1400832842b89fc4694ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(luminance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="64" column="1" declfile="predefined_units/physics_units.hpp" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ae61082b72aff92bb4feed851efa2823b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(illuminance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">illuminance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="65" column="1" declfile="predefined_units/physics_units.hpp" declline="65" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a07931057bb2a571d4c370ce50622af91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(luminous_flux)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminous_flux</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="66" column="1" declfile="predefined_units/physics_units.hpp" declline="66" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1aad79a19a8d7aba4b8a8ba6cf9a6b9eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(luminous_energy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminous_energy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="67" column="1" declfile="predefined_units/physics_units.hpp" declline="67" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1aa11327cce16932e00f2a8ef86a0a2f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(luminous_exposure)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminous_exposure</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="68" column="1" declfile="predefined_units/physics_units.hpp" declline="68" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a2cebbcc5c98beca9e6f5313f5c2df291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(luminous_efficacy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">luminous_efficacy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="69" column="1" declfile="predefined_units/physics_units.hpp" declline="69" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ab459be3450c8e164ab5305982211c6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(ionizing_radiation)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">ionizing_radiation</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="70" column="1" declfile="predefined_units/physics_units.hpp" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a951c21b6fef38ee3627e2ee9e9aba96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(absorbed_dose)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">absorbed_dose</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="71" column="1" declfile="predefined_units/physics_units.hpp" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a66c2e6879d1e8ee6911382676ee00009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(energy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">energy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="74" column="1" declfile="predefined_units/physics_units.hpp" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a45b09c42c91b294ae9d06b650df51c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(action)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">action</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="75" column="1" declfile="predefined_units/physics_units.hpp" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ab655f96238ff74a26a6a9b4eedaad506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(power)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">power</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="76" column="1" declfile="predefined_units/physics_units.hpp" declline="76" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a41f0f92d4d018148ebea3ab397633967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(power_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">power_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="77" column="1" declfile="predefined_units/physics_units.hpp" declline="77" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a48f6e289026c24510dfc7a1f5d1ace76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(enthalpy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">enthalpy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="78" column="1" declfile="predefined_units/physics_units.hpp" declline="78" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a84b507588732eecd75ba3868301aaa98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(entropy)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">entropy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="79" column="1" declfile="predefined_units/physics_units.hpp" declline="79" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a60dfb1adaa789b08008d4867330bbdcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(heat_capacity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">heat_capacity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="80" column="1" declfile="predefined_units/physics_units.hpp" declline="80" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a9b674a4111405833063a5b66a3f08991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(heat_flux_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">heat_flux_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="81" column="1" declfile="predefined_units/physics_units.hpp" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ab20e421f1594865c5ebee1205b26f7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(thermal_conductivity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">thermal_conductivity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="82" column="1" declfile="predefined_units/physics_units.hpp" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ae8adc3065de90350ca700f93848acee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(thermal_diffusivity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">thermal_diffusivity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="83" column="1" declfile="predefined_units/physics_units.hpp" declline="83" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a33b7f3006e130e92ed1237b247d55cfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(thermal_resistance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">thermal_resistance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="84" column="1" declfile="predefined_units/physics_units.hpp" declline="84" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a267bc60cb47226bdd082e8823ab91478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(thermal_expansion_coefficient)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">thermal_expansion_coefficient</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="85" column="1" declfile="predefined_units/physics_units.hpp" declline="85" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a3d88f98405313ca2760f06a07b422637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(temperature_gradient)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">temperature_gradient</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="86" column="1" declfile="predefined_units/physics_units.hpp" declline="86" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1a9be615a80e5d12d529e27a3038753991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(energy_flux_density)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">energy_flux_density</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="87" column="1" declfile="predefined_units/physics_units.hpp" declline="87" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ac45b02e7d828e6dbf85e0f5b0eabc8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(wavenumber)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">wavenumber</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="90" column="1" declfile="predefined_units/physics_units.hpp" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="physics__units_8hpp_1ad250c1f12801043257dbbe04948249e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(frequency)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">frequency</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/physics_units.hpp" line="91" column="1" declfile="predefined_units/physics_units.hpp" declline="91" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1a7d689990e89f1be3b1a6a27a3530189c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(radioactivity,&quot;Bq&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radioactivity</ref></type>
        </param>
        <param>
          <type>&quot;Bq&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="7" column="1" declfile="predefined_units/radiometry_units.cpp" declline="7" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1aa724800de7c7caf9be6524deca577751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(irradiance,&quot;kg/s3&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">irradiance</ref></type>
        </param>
        <param>
          <type>&quot;kg/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="8" column="1" declfile="predefined_units/radiometry_units.cpp" declline="8" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1aa68f4fdf892ae52ab20c487d3820dd09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(radiant_exposure,&quot;kg/s2&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radiant_exposure</ref></type>
        </param>
        <param>
          <type>&quot;kg/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s2&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="9" column="1" declfile="predefined_units/radiometry_units.cpp" declline="9" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1afbe2dce3060138bea7e81ddb47426e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(radiant_intensity,&quot;kg*m2/s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radiant_intensity</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="10" column="1" declfile="predefined_units/radiometry_units.cpp" declline="10" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1a7a4c0e17b1688fc991a6e071142c3e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(spectral_intensity,&quot;kg*m/s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">spectral_intensity</ref></type>
        </param>
        <param>
          <type>&quot;kg*m/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="11" column="1" declfile="predefined_units/radiometry_units.cpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1a474ac715ad4d74313d6e84fef1509655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(radiance,&quot;kg/s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radiance</ref></type>
        </param>
        <param>
          <type>&quot;kg/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="12" column="1" declfile="predefined_units/radiometry_units.cpp" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1ac1646804f1da32637b840e4ff83e1f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(spectral_radiance,&quot;kg/m*s3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">spectral_radiance</ref></type>
        </param>
        <param>
          <type>&quot;kg/m*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="13" column="1" declfile="predefined_units/radiometry_units.cpp" declline="13" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1a723739d582c5943c52b0cb4cb7b20d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(radiant_flux,&quot;kg*m2/s3&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radiant_flux</ref></type>
        </param>
        <param>
          <type>&quot;kg*<ref refid="classscifir_1_1coordinates__1d" kindref="compound">m2</ref>/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="14" column="1" declfile="predefined_units/radiometry_units.cpp" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8cpp_1ae255fa6b4602c9eb1e28f1a67642c74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_CPP</definition>
        <argsstring>(spectral_flux,&quot;kg*m/s3&quot;)</argsstring>
        <name>VECTOR_UNIT_CPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">spectral_flux</ref></type>
        </param>
        <param>
          <type>&quot;kg*m/<ref refid="classscifir_1_1coordinates__1d" kindref="compound">s3&quot;</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.cpp" line="15" column="1" declfile="predefined_units/radiometry_units.cpp" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1a024799e17a6c4ce56cdba96ca9b14d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(radioactivity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radioactivity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="11" column="1" declfile="predefined_units/radiometry_units.hpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1ac15a8286c62215c7ef0b0b15f6e960a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(irradiance)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">irradiance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="12" column="1" declfile="predefined_units/radiometry_units.hpp" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1a39027a03c2f88e9f5c500e33b1b77a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(radiant_exposure)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radiant_exposure</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="13" column="1" declfile="predefined_units/radiometry_units.hpp" declline="13" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1a8f7daf8ed364caaba17bfc51886c6405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(radiant_intensity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radiant_intensity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="14" column="1" declfile="predefined_units/radiometry_units.hpp" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1a301c92868d977f1b0bb3367690fb4110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(spectral_intensity)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">spectral_intensity</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="15" column="1" declfile="predefined_units/radiometry_units.hpp" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1a7a57a35a5f016ce894cd8b8cb8ac506a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(radiance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radiance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="16" column="1" declfile="predefined_units/radiometry_units.hpp" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1a76f3f5a14abed3e4081e3bfcc3da6413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(spectral_radiance)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">spectral_radiance</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="17" column="1" declfile="predefined_units/radiometry_units.hpp" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1a726a4e4dcaaab941900c0fe5f7adb771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(radiant_flux)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">radiant_flux</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="18" column="1" declfile="predefined_units/radiometry_units.hpp" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="radiometry__units_8hpp_1a5fd140f17c179516044c11496fad157a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::VECTOR_UNIT_HPP</definition>
        <argsstring>(spectral_flux)</argsstring>
        <name>VECTOR_UNIT_HPP</name>
        <qualifiedname>scifir::VECTOR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">spectral_flux</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/radiometry_units.hpp" line="19" column="1" declfile="predefined_units/radiometry_units.hpp" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8cpp_1a316e5acb7928e82ef65ce1d2be7052c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(area,&quot;m2&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type>area</type>
        </param>
        <param>
          <type>&quot;m2&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.cpp" line="11" column="1" declfile="predefined_units/space_units.cpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8cpp_1afd959adc8d468f85c922b0c52e5dcc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(volume,&quot;m3&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type>volume</type>
        </param>
        <param>
          <type>&quot;m3&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.cpp" line="20" column="1" declfile="predefined_units/space_units.cpp" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8cpp_1a4e30b1f67194ebf6e846d5e8ec80d44a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(volume_4d,&quot;m4&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">volume_4d</ref></type>
        </param>
        <param>
          <type>&quot;m4&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.cpp" line="31" column="1" declfile="predefined_units/space_units.cpp" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8cpp_1a36cc074e482afe1e2e7151f9f3fd3c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(curvature,&quot;1/m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">curvature</ref></type>
        </param>
        <param>
          <type>&quot;1/m&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.cpp" line="33" column="1" declfile="predefined_units/space_units.cpp" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8hpp_1a4dd210af3d564eac0992f3ea784c0bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP_BEGIN</definition>
        <argsstring>(area)</argsstring>
        <name>SCALAR_UNIT_HPP_BEGIN</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP_BEGIN</qualifiedname>
        <param>
          <type>area</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.hpp" line="18" column="1" declfile="predefined_units/space_units.hpp" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8hpp_1a5d7071e9b105c05f7e4d5e278a71673e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::area::area</definition>
        <argsstring>(const size_2d&lt; length &gt; &amp;)</argsstring>
        <name>area</name>
        <qualifiedname>scifir::area</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1size__2d" kindref="compound">size_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">length</ref> &gt; &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.hpp" line="20" column="10" bodyfile="predefined_units/space_units.cpp" bodystart="13" bodyend="18" declfile="predefined_units/space_units.hpp" declline="20" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8hpp_1a472ded6918aa1c5681b05cab4a39d07b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP_END</definition>
        <argsstring>()</argsstring>
        <name>SCALAR_UNIT_HPP_END</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP_END</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.hpp" line="22" column="1" declfile="predefined_units/space_units.hpp" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8hpp_1ab35e6529f744d9ecd75b9ab675c3ed30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP_BEGIN</definition>
        <argsstring>(volume)</argsstring>
        <name>SCALAR_UNIT_HPP_BEGIN</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP_BEGIN</qualifiedname>
        <param>
          <type>volume</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.hpp" line="24" column="1" declfile="predefined_units/space_units.hpp" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8hpp_1a262599906f4976119a8afba442877b46" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::volume::volume</definition>
        <argsstring>(const size_3d&lt; length &gt; &amp;)</argsstring>
        <name>volume</name>
        <qualifiedname>scifir::volume</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1size__3d" kindref="compound">size_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">length</ref> &gt; &amp;</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.hpp" line="26" column="10" bodyfile="predefined_units/space_units.cpp" bodystart="22" bodyend="29" declfile="predefined_units/space_units.hpp" declline="26" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8hpp_1a3370b2be0db8080f52e3a619b246e44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(volume_4d)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">volume_4d</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.hpp" line="30" column="1" declfile="predefined_units/space_units.hpp" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="space__units_8hpp_1aae115407248396554cb3e764d46393cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(curvature)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">curvature</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="predefined_units/space_units.hpp" line="32" column="1" declfile="predefined_units/space_units.hpp" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="aid_8cpp_1a55aef4d5616f29c80bdf521cdedc6d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const aid &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1aid" kindref="compound">aid</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/aid.cpp" line="376" column="8" bodyfile="special_units/aid.cpp" bodystart="376" bodyend="401" declfile="special_units/aid.hpp" declline="37" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="aid_8cpp_1a05fe01e617f5ab6367f0e55522846767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const aid::type &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> aid::type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/aid.cpp" line="403" column="8" bodyfile="special_units/aid.cpp" bodystart="403" bodyend="427" declfile="special_units/aid.hpp" declline="38" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="aid_8cpp_1af7e9d6e080fc05e66ec4a4c4fe4fd1cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>aid::type</type>
        <definition>aid::type scifir::create_astronomical_type</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>create_astronomical_type</name>
        <qualifiedname>scifir::create_astronomical_type</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/aid.cpp" line="429" column="11" bodyfile="special_units/aid.cpp" bodystart="429" bodyend="467" declfile="special_units/aid.hpp" declline="39" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="mind_8hpp_1acea8c46cd8e9ff864027ffd33f611c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const feeling &amp;)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> feeling &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/mind.hpp" line="20" column="12" declfile="special_units/mind.hpp" declline="20" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="mind_8hpp_1a7bb3d88a4813aa8a6c6715385d25e7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const emotion &amp;)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> emotion &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/mind.hpp" line="21" column="12" declfile="special_units/mind.hpp" declline="21" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="mind_8hpp_1a7108c656946d5d84e561f93b6991b9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const sensation &amp;)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> sensation &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/mind.hpp" line="22" column="12" declfile="special_units/mind.hpp" declline="22" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="percentage_8cpp_1a31893a8051570f4961ff4ec9a419c851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const percentage &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.cpp" line="409" column="8" bodyfile="special_units/percentage.cpp" bodystart="409" bodyend="414" declfile="special_units/percentage.hpp" declline="138" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="percentage_8cpp_1a5ded9f9180da0147c717e6bca165e6fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::is_percentage</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>is_percentage</name>
        <qualifiedname>scifir::is_percentage</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/percentage.cpp" line="416" column="6" bodyfile="special_units/percentage.cpp" bodystart="416" bodyend="452" declfile="special_units/percentage.hpp" declline="139" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pH_8cpp_1a36aa7f5753b8f2cb722548bc3b1196a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const pH &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1pH" kindref="compound">pH</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/pH.cpp" line="200" column="8" bodyfile="special_units/pH.cpp" bodystart="200" bodyend="205" declfile="special_units/pH.hpp" declline="97" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="pixel_8cpp_1aeb9a00fb9eb60b11ffa68783d1fbb41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const pixel &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1pixel" kindref="compound">pixel</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/pixel.cpp" line="190" column="8" bodyfile="special_units/pixel.cpp" bodystart="190" bodyend="195" declfile="special_units/pixel.hpp" declline="133" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="pixel_8cpp_1ae28ee42e2db2f685c69d130eab829644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::is_pixel</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>is_pixel</name>
        <qualifiedname>scifir::is_pixel</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/pixel.cpp" line="197" column="6" bodyfile="special_units/pixel.cpp" bodystart="197" bodyend="232" declfile="special_units/pixel.hpp" declline="134" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pixel_8cpp_1a081d72f8449e09fb1c725cf9adf94a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1pixel" kindref="compound">pixel</ref></type>
        <definition>pixel scifir::sqrt</definition>
        <argsstring>(const pixel &amp;x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>scifir::sqrt</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1pixel" kindref="compound">pixel</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/pixel.cpp" line="234" column="7" bodyfile="special_units/pixel.cpp" bodystart="234" bodyend="237" declfile="special_units/pixel.hpp" declline="136" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="pixel_8cpp_1a1479d4e39b24fcf5b7f64a5a9b3a4183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1pixel" kindref="compound">pixel</ref></type>
        <definition>pixel scifir::sqrt_nth</definition>
        <argsstring>(const pixel &amp;x, int y)</argsstring>
        <name>sqrt_nth</name>
        <qualifiedname>scifir::sqrt_nth</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1pixel" kindref="compound">pixel</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/pixel.cpp" line="239" column="7" bodyfile="special_units/pixel.cpp" bodystart="239" bodyend="242" declfile="special_units/pixel.hpp" declline="137" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="pOH_8cpp_1a58add97f33dcd503cba1cc59be940938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const pOH &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1pOH" kindref="compound">pOH</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/pOH.cpp" line="198" column="8" bodyfile="special_units/pOH.cpp" bodystart="198" bodyend="203" declfile="special_units/pOH.hpp" declline="96" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="size__2d_8cpp_1a92bc66df8690c20f8133e3d83be2ba13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const size_2d&lt; float &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1size__2d" kindref="compound">size_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/size_2d.cpp" line="7" column="8" bodyfile="special_units/size_2d.cpp" bodystart="7" bodyend="12" declfile="special_units/size_2d.hpp" declline="176" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="size__2d_8hpp_1a9bc295a9231111f93e0779a42d1d1828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const size_2d&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1size__2d" kindref="compound">size_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/size_2d.hpp" line="169" column="8" bodyfile="special_units/size_2d.hpp" bodystart="169" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="size__3d_8cpp_1ac170824b178c6351d5804691542cf826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const size_3d&lt; float &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1size__3d" kindref="compound">size_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/size_3d.cpp" line="7" column="8" bodyfile="special_units/size_3d.cpp" bodystart="7" bodyend="12" declfile="special_units/size_3d.hpp" declline="190" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="size__3d_8hpp_1ab0c61bac766af1baa5040a2a55aaf86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const size_3d&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1size__3d" kindref="compound">size_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/size_3d.hpp" line="183" column="8" bodyfile="special_units/size_3d.hpp" bodystart="183" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="size__nd_8cpp_1a8a5b284ec2fbab5a2e1b41a8c4493a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const size_nd&lt; float &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1size__nd" kindref="compound">size_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/size_nd.cpp" line="7" column="8" bodyfile="special_units/size_nd.cpp" bodystart="7" bodyend="23" declfile="special_units/size_nd.hpp" declline="287" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="size__nd_8hpp_1a1a3ca6d26705314238f53579edffcdb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const size_nd&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1size__nd" kindref="compound">size_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/size_nd.hpp" line="269" column="8" bodyfile="special_units/size_nd.hpp" bodystart="269" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="zid_8cpp_1a4202fe607b159e40982128774853ed94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const zid &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1zid" kindref="compound">zid</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="special_units/zid.cpp" line="55" column="8" bodyfile="special_units/zid.cpp" bodystart="55" bodyend="65" declfile="special_units/zid.hpp" declline="30" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="direction_8cpp_1aa4875573260680d0b88ef4a41dd91973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>direction::name</type>
        <definition>direction::name scifir::create_direction</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>create_direction</name>
        <qualifiedname>scifir::create_direction</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/direction.cpp" line="46" column="17" bodyfile="topology/direction.cpp" bodystart="46" bodyend="156" declfile="topology/direction.hpp" declline="36" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="direction_8cpp_1a0dccca47be7b8a3781d743c46394dd20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>direction::name</type>
        <definition>direction::name scifir::invert</definition>
        <argsstring>(direction::name x)</argsstring>
        <name>invert</name>
        <qualifiedname>scifir::invert</qualifiedname>
        <param>
          <type>direction::name</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/direction.cpp" line="158" column="17" bodyfile="topology/direction.cpp" bodystart="158" bodyend="268" declfile="topology/direction.hpp" declline="37" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="direction_8cpp_1a1fb6d77f9f2f7b1794a731f4f7e2603d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(direction::name x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type>direction::name</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/direction.cpp" line="270" column="8" bodyfile="topology/direction.cpp" bodystart="270" bodyend="330" declfile="topology/direction.hpp" declline="34" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="direction_8cpp_1a40311f1f76470e8fe68d9ddb9c9a16ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const direction &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1direction" kindref="compound">direction</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/direction.cpp" line="332" column="8" bodyfile="topology/direction.cpp" bodystart="332" bodyend="335" declfile="topology/direction.hpp" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="point__1d_8cpp_1a43bd10a6763a604ffd83753b162a0d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_1d&lt; float &gt; &amp;x1, const point_1d&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_1d.cpp" line="18" column="7" bodyfile="topology/point_1d.cpp" bodystart="18" bodyend="21" declfile="topology/point_1d.hpp" declline="157" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="point__1d_8hpp_1a9d9670406b491c4deb9c6451108ac6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const point_1d&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_1d.hpp" line="144" column="8" bodyfile="topology/point_1d.hpp" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="point__1d_8hpp_1a9dc54c938c4570cf951a3e97cf89cc9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_1d&lt; T &gt; &amp;x1, const point_1d&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__1d" kindref="compound">point_1d</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_1d.hpp" line="152" column="3" bodyfile="topology/point_1d.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="point__2d_8cpp_1a56f60e962e24ebf7f776494203a43832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const point_2d&lt; float &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_2d.cpp" line="20" column="8" bodyfile="topology/point_2d.cpp" bodystart="20" bodyend="25" declfile="topology/point_2d.hpp" declline="281" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="point__2d_8cpp_1ac839d9273c03919f062e46e199fc6bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_2d&lt; float &gt; &amp;x1, const point_2d&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_2d.cpp" line="27" column="7" bodyfile="topology/point_2d.cpp" bodystart="27" bodyend="30" declfile="topology/point_2d.hpp" declline="289" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="point__2d_8hpp_1a24ad1919eb105d2d4a743470ed0dc7cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const point_2d&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_2d.hpp" line="274" column="8" bodyfile="topology/point_2d.hpp" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="point__2d_8hpp_1a151ed9aafbe9eaa9b0960ef75496ab8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_2d&lt; T &gt; &amp;x1, const point_2d&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__2d" kindref="compound">point_2d</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_2d.hpp" line="284" column="3" bodyfile="topology/point_2d.hpp" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="point__3d_8cpp_1a3e8ff60a266c5534e34c5d3496b60872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_3d&lt; float &gt; &amp;x1, const point_3d&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_3d.cpp" line="20" column="7" bodyfile="topology/point_3d.cpp" bodystart="20" bodyend="23" declfile="topology/point_3d.hpp" declline="523" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="point__3d_8hpp_1aec943ce3d96a0a3a8cece9cedd5760b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const point_3d&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_3d.hpp" line="510" column="8" bodyfile="topology/point_3d.hpp" bodystart="510" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="point__3d_8hpp_1a0000f8cb0be59cf754d9261d4d17aaae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_3d&lt; T &gt; &amp;x1, const point_3d&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__3d" kindref="compound">point_3d</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_3d.hpp" line="518" column="3" bodyfile="topology/point_3d.hpp" bodystart="518" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="point__nd_8cpp_1a562f0ea303b2f6016cf7f258224585e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::distance</definition>
        <argsstring>(const point_nd&lt; float &gt; &amp;x1, const point_nd&lt; float &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_nd.cpp" line="18" column="7" bodyfile="topology/point_nd.cpp" bodystart="18" bodyend="33" declfile="topology/point_nd.hpp" declline="893" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="point__nd_8hpp_1a8ae799392312bf161f558a348838c40f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const point_nd&lt; T &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_nd.hpp" line="859" column="8" bodyfile="topology/point_nd.hpp" bodystart="859" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="point__nd_8hpp_1a178ba00524da537d0b745b9036e994db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T scifir::distance</definition>
        <argsstring>(const point_nd&lt; T &gt; &amp;x1, const point_nd&lt; T &gt; &amp;x2)</argsstring>
        <name>distance</name>
        <qualifiedname>scifir::distance</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1point__nd" kindref="compound">point_nd</ref>&lt; T &gt; &amp;</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topology/point_nd.hpp" line="876" column="3" bodyfile="topology/point_nd.hpp" bodystart="876" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a6c21d2cea78200614f18b622353107e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const dimension &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1108" column="8" bodyfile="units/dimension.cpp" bodystart="1108" bodyend="1113" declfile="units/dimension.hpp" declline="162" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a557363b7a10710912ab38e165fd0edc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x_dimensions, bool with_brackets)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x_dimensions</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
          <declname>with_brackets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1115" column="8" bodyfile="units/dimension.cpp" bodystart="1115" bodyend="1229" declfile="units/dimension.hpp" declline="163" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a5fab4a325ecdaf6592369dd522c9b22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::create_dimensions</definition>
        <argsstring>(string init_value)</argsstring>
        <name>create_dimensions</name>
        <qualifiedname>scifir::create_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
          <declname>init_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1231" column="8" bodyfile="units/dimension.cpp" bodystart="1231" bodyend="1279" declfile="units/dimension.hpp" declline="25" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a19c75b2f39649d5ef5b525cfabe14f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::create_derived_dimensions</definition>
        <argsstring>(const string &amp;init_value)</argsstring>
        <name>create_derived_dimensions</name>
        <qualifiedname>scifir::create_derived_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>init_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1281" column="8" bodyfile="units/dimension.cpp" bodystart="1281" bodyend="1285" declfile="units/dimension.hpp" declline="165" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a0f90c73b2a1f2ae72261cb3207b45080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::create_derived_dimensions</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x)</argsstring>
        <name>create_derived_dimensions</name>
        <qualifiedname>scifir::create_derived_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1287" column="8" bodyfile="units/dimension.cpp" bodystart="1287" bodyend="1303" declfile="units/dimension.hpp" declline="166" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a263b3ab8fc90fecf46ef6c301bf5e1d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::create_derived_dimensions</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x, long double &amp;value)</argsstring>
        <name>create_derived_dimensions</name>
        <qualifiedname>scifir::create_derived_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1305" column="8" bodyfile="units/dimension.cpp" bodystart="1305" bodyend="1331" declfile="units/dimension.hpp" declline="167" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a5d7ee5ba925831143f0fd5d1c4cfc8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref></type>
        <definition>long double scifir::prefix_math</definition>
        <argsstring>(const dimension &amp;x_dimension, const prefix &amp;x_prefix)</argsstring>
        <name>prefix_math</name>
        <qualifiedname>scifir::prefix_math</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &amp;</type>
          <declname>x_dimension</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1prefix" kindref="compound">prefix</ref> &amp;</type>
          <declname>x_prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1333" column="13" bodyfile="units/dimension.cpp" bodystart="1333" bodyend="1343" declfile="units/dimension.hpp" declline="169" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a9ffe4ce909247f67cb6d4a4eebf64be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::multiply_dimensions</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x, const vector&lt; dimension &gt; &amp;y)</argsstring>
        <name>multiply_dimensions</name>
        <qualifiedname>scifir::multiply_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1345" column="8" bodyfile="units/dimension.cpp" bodystart="1345" bodyend="1353" declfile="units/dimension.hpp" declline="170" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a0f9b7abcf6df61defb631b56ee3baf76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::multiply_dimensions</definition>
        <argsstring>(vector&lt; dimension &gt; new_dimensions, const vector&lt; dimension &gt; &amp;y, long double &amp;value)</argsstring>
        <name>multiply_dimensions</name>
        <qualifiedname>scifir::multiply_dimensions</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1355" column="8" bodyfile="units/dimension.cpp" bodystart="1355" bodyend="1362" declfile="units/dimension.hpp" declline="171" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a7a7b119c0bfd257fb44d054d4b95fc4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::divide_dimensions</definition>
        <argsstring>(vector&lt; dimension &gt; new_dimensions, const vector&lt; dimension &gt; &amp;y, long double &amp;value)</argsstring>
        <name>divide_dimensions</name>
        <qualifiedname>scifir::divide_dimensions</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
          <declname>new_dimensions</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1364" column="8" bodyfile="units/dimension.cpp" bodystart="1364" bodyend="1372" declfile="units/dimension.hpp" declline="172" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1aebb780e8f7dd78d0d51a61114ca4d046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::square_dimensions</definition>
        <argsstring>(vector&lt; dimension &gt; x, long double &amp;value, int scale)</argsstring>
        <name>square_dimensions</name>
        <qualifiedname>scifir::square_dimensions</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1374" column="8" bodyfile="units/dimension.cpp" bodystart="1374" bodyend="1444" declfile="units/dimension.hpp" declline="173" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a92361eb3955603e8027bc8528be4fa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::power_dimensions</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x, int scale)</argsstring>
        <name>power_dimensions</name>
        <qualifiedname>scifir::power_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1446" column="8" bodyfile="units/dimension.cpp" bodystart="1446" bodyend="1457" declfile="units/dimension.hpp" declline="174" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a503193573c348273ad5d92d7beb7d2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::normalize_dimensions</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x)</argsstring>
        <name>normalize_dimensions</name>
        <qualifiedname>scifir::normalize_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1459" column="8" bodyfile="units/dimension.cpp" bodystart="1459" bodyend="1507" declfile="units/dimension.hpp" declline="176" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a67c98c6e8bbbc3e804b3557b241af988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt;</type>
        <definition>vector&lt; dimension &gt; scifir::normalize_dimensions</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x, long double &amp;value)</argsstring>
        <name>normalize_dimensions</name>
        <qualifiedname>scifir::normalize_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">long</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">double</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1509" column="8" bodyfile="units/dimension.cpp" bodystart="1509" bodyend="1578" declfile="units/dimension.hpp" declline="177" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a2af58146086330c07bc3cff3be84846d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::common_dimension</definition>
        <argsstring>(const dimension &amp;x, const dimension &amp;y)</argsstring>
        <name>common_dimension</name>
        <qualifiedname>scifir::common_dimension</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1580" column="6" bodyfile="units/dimension.cpp" bodystart="1580" bodyend="1593" declfile="units/dimension.hpp" declline="179" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a743465306ce1199a5957b77de314e71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::equal_dimensions</definition>
        <argsstring>(const string &amp;x, const string &amp;y)</argsstring>
        <name>equal_dimensions</name>
        <qualifiedname>scifir::equal_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1595" column="6" bodyfile="units/dimension.cpp" bodystart="1595" bodyend="1600" declfile="units/dimension.hpp" declline="180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a91acb188ac570f1040af83a7fb2dc729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::equal_dimensions</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x, const vector&lt; dimension &gt; &amp;y)</argsstring>
        <name>equal_dimensions</name>
        <qualifiedname>scifir::equal_dimensions</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1602" column="6" bodyfile="units/dimension.cpp" bodystart="1602" bodyend="1647" declfile="units/dimension.hpp" declline="181" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dimension_8cpp_1a29f58131200a5c37acf2f4dec9ce2638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::equal_dimensions_and_prefixes</definition>
        <argsstring>(const vector&lt; dimension &gt; &amp;x, const vector&lt; dimension &gt; &amp;y)</argsstring>
        <name>equal_dimensions_and_prefixes</name>
        <qualifiedname>scifir::equal_dimensions_and_prefixes</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> vector&lt; <ref refid="classscifir_1_1dimension" kindref="compound">dimension</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/dimension.cpp" line="1649" column="6" bodyfile="units/dimension.cpp" bodystart="1649" bodyend="1692" declfile="units/dimension.hpp" declline="182" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="material__vector__unit__2d_8hpp_1adff81f6b36ebbe33b4e0eb9bc1af7ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> T</type>
          </param>
          <param>
            <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">typename</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">U</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const material_vector_unit_2d&lt; T, U &gt; &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1material__vector__unit__2d" kindref="compound">material_vector_unit_2d</ref>&lt; T, <ref refid="classscifir_1_1coordinates__1d" kindref="compound">U</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/material_vector_unit_2d.hpp" line="51" column="12" bodyfile="units/material_vector_unit_2d.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="prefix_8cpp_1a2a2cc2c1b3a35da9fc1fff749a93a6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>prefix::type</type>
        <definition>prefix::type scifir::prefix_string</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>prefix_string</name>
        <qualifiedname>scifir::prefix_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/prefix.cpp" line="191" column="14" bodyfile="units/prefix.cpp" bodystart="191" bodyend="281" declfile="units/prefix.hpp" declline="36" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="prefix_8cpp_1a381054e3832331d799d484dfccd7d10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1prefix" kindref="compound">prefix</ref></type>
        <definition>prefix scifir::closest_prefix</definition>
        <argsstring>(const prefix &amp;actual_prefix, int actual_scale)</argsstring>
        <name>closest_prefix</name>
        <qualifiedname>scifir::closest_prefix</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1prefix" kindref="compound">prefix</ref> &amp;</type>
          <declname>actual_prefix</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>actual_scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/prefix.cpp" line="283" column="8" bodyfile="units/prefix.cpp" bodystart="283" bodyend="288" declfile="units/prefix.hpp" declline="38" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="prefix_8cpp_1af91b178f2d049a8313dbc40c87615dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1prefix" kindref="compound">prefix</ref></type>
        <definition>prefix scifir::create_prefix_by_factor</definition>
        <argsstring>(int factor)</argsstring>
        <name>create_prefix_by_factor</name>
        <qualifiedname>scifir::create_prefix_by_factor</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/prefix.cpp" line="290" column="8" bodyfile="units/prefix.cpp" bodystart="290" bodyend="377" declfile="units/prefix.hpp" declline="39" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="scalar__unit_8cpp_1a162eb483608d8201ae14d447a571e492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.cpp" line="542" column="8" bodyfile="units/scalar_unit.cpp" bodystart="542" bodyend="547" declfile="units/scalar_unit.hpp" declline="206" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="scalar__unit_8cpp_1aa85e35d4b8f4bbabd001ff64d34fe4f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::is_scalar_unit</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>is_scalar_unit</name>
        <qualifiedname>scifir::is_scalar_unit</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.cpp" line="549" column="6" bodyfile="units/scalar_unit.cpp" bodystart="549" bodyend="725" declfile="units/scalar_unit.hpp" declline="207" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="scalar__unit_8cpp_1aa381f8345620eaa27dea409a955a40e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::abs</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>abs</name>
        <qualifiedname>scifir::abs</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.cpp" line="727" column="7" bodyfile="units/scalar_unit.cpp" bodystart="727" bodyend="730" declfile="units/scalar_unit.hpp" declline="208" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="scalar__unit_8cpp_1a9eb25767c5a4956a2e4f6161dfedd2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::pow</definition>
        <argsstring>(const scalar_unit &amp;x, int y)</argsstring>
        <name>pow</name>
        <qualifiedname>scifir::pow</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.cpp" line="732" column="13" bodyfile="units/scalar_unit.cpp" bodystart="732" bodyend="735" declfile="units/scalar_unit.hpp" declline="209" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="scalar__unit_8cpp_1aac7b9861a78646a61ffbbfc705c5d733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::sqrt</definition>
        <argsstring>(const scalar_unit &amp;x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>scifir::sqrt</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.cpp" line="737" column="13" bodyfile="units/scalar_unit.cpp" bodystart="737" bodyend="743" declfile="units/scalar_unit.hpp" declline="210" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="scalar__unit_8cpp_1aef6ce8e92adcab6d2f1a56d30bcedb9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::sqrt_nth</definition>
        <argsstring>(const scalar_unit &amp;x, int y)</argsstring>
        <name>sqrt_nth</name>
        <qualifiedname>scifir::sqrt_nth</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/scalar_unit.cpp" line="745" column="13" bodyfile="units/scalar_unit.cpp" bodystart="745" bodyend="751" declfile="units/scalar_unit.hpp" declline="211" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8cpp_1a81d5f8fbfb13d3064a63c27229b57d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(length,&quot;m&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">length</ref></type>
        </param>
        <param>
          <type>&quot;m&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.cpp" line="22" column="1" declfile="units/unit_basic.cpp" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8cpp_1a918738e0babff21f41b08be213d0fe22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(time_duration,&quot;s&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type>time_duration</type>
        </param>
        <param>
          <type>&quot;s&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.cpp" line="23" column="1" declfile="units/unit_basic.cpp" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8cpp_1ac7eed8a89e6e438425559bc44816e026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(mass,&quot;g&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type>mass</type>
        </param>
        <param>
          <type>&quot;g&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.cpp" line="306" column="1" declfile="units/unit_basic.cpp" declline="306" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8cpp_1aed42f0ad0f78cbfd76b31100f588f07b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(charge,&quot;C&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">charge</ref></type>
        </param>
        <param>
          <type>&quot;C&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.cpp" line="321" column="1" declfile="units/unit_basic.cpp" declline="321" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8cpp_1aab492a631cf267a7a04bfed211136f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(temperature,&quot;K&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">temperature</ref></type>
        </param>
        <param>
          <type>&quot;K&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.cpp" line="322" column="1" declfile="units/unit_basic.cpp" declline="322" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8cpp_1a70166f081e3c790c94a73a7e3cecb35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(mole,&quot;mol&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type>mole</type>
        </param>
        <param>
          <type>&quot;mol&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.cpp" line="323" column="1" declfile="units/unit_basic.cpp" declline="323" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8cpp_1a95e1c15da20712df109a31f59e60b58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(light,&quot;cd&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">light</ref></type>
        </param>
        <param>
          <type>&quot;cd&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.cpp" line="351" column="1" declfile="units/unit_basic.cpp" declline="351" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8cpp_1a87784e379cb1178f62d9f0caca6a21b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_CPP</definition>
        <argsstring>(data,&quot;B&quot;)</argsstring>
        <name>SCALAR_UNIT_CPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_CPP</qualifiedname>
        <param>
          <type>data</type>
        </param>
        <param>
          <type>&quot;B&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.cpp" line="352" column="1" declfile="units/unit_basic.cpp" declline="352" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a82ca4541410f18d4854bab3141ba41bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(length)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">length</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="16" column="1" declfile="units/unit_basic.hpp" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1aff61c0abdfc51bb9e13d42af4fbb404f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP_BEGIN</definition>
        <argsstring>(time_duration)</argsstring>
        <name>SCALAR_UNIT_HPP_BEGIN</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP_BEGIN</qualifiedname>
        <param>
          <type>time_duration</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="18" column="1" declfile="units/unit_basic.hpp" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1af80d1d21e74c79b2496fd60df330248b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::time_duration::time_duration</definition>
        <argsstring>(const string &amp;)</argsstring>
        <name>time_duration</name>
        <qualifiedname>scifir::time_duration</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <defname>init_time</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="20" column="1" bodyfile="units/unit_basic.cpp" bodystart="25" bodyend="84" declfile="units/unit_basic.hpp" declline="20" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a2b9fa5ccff991ef4de28ddabcdfc2fda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::time_duration::get_years</definition>
        <argsstring>() const</argsstring>
        <name>get_years</name>
        <qualifiedname>scifir::get_years</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="24" column="5" bodyfile="units/unit_basic.cpp" bodystart="93" bodyend="104" declfile="units/unit_basic.hpp" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a25557f4c7a4631fc2a90fcd9c1b6e2c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::time_duration::get_months</definition>
        <argsstring>() const</argsstring>
        <name>get_months</name>
        <qualifiedname>scifir::get_months</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="25" column="5" bodyfile="units/unit_basic.cpp" bodystart="106" bodyend="117" declfile="units/unit_basic.hpp" declline="25" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1af09d934d391b3bae5d34a1861d66b007" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::time_duration::get_weeks</definition>
        <argsstring>() const</argsstring>
        <name>get_weeks</name>
        <qualifiedname>scifir::get_weeks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="26" column="5" bodyfile="units/unit_basic.cpp" bodystart="119" bodyend="130" declfile="units/unit_basic.hpp" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a8f245047fe79629cf361a2d05b4b0e07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::time_duration::get_days</definition>
        <argsstring>() const</argsstring>
        <name>get_days</name>
        <qualifiedname>scifir::get_days</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="27" column="5" bodyfile="units/unit_basic.cpp" bodystart="132" bodyend="143" declfile="units/unit_basic.hpp" declline="27" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a360bfcec678ee3bd2af74df13695a5bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::time_duration::get_hours</definition>
        <argsstring>() const</argsstring>
        <name>get_hours</name>
        <qualifiedname>scifir::get_hours</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="28" column="5" bodyfile="units/unit_basic.cpp" bodystart="145" bodyend="156" declfile="units/unit_basic.hpp" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a272cfd51e0514868a6b2c463b260d3e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::time_duration::get_minutes</definition>
        <argsstring>() const</argsstring>
        <name>get_minutes</name>
        <qualifiedname>scifir::get_minutes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="29" column="5" bodyfile="units/unit_basic.cpp" bodystart="158" bodyend="169" declfile="units/unit_basic.hpp" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a2173ddeafdba63c90de6b362ec4a655b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::time_duration::get_seconds</definition>
        <argsstring>() const</argsstring>
        <name>get_seconds</name>
        <qualifiedname>scifir::get_seconds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="30" column="5" bodyfile="units/unit_basic.cpp" bodystart="171" bodyend="182" declfile="units/unit_basic.hpp" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a1b8587da4013b5e0e29bbe108bd554ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::get_finish_date</definition>
        <argsstring>() const</argsstring>
        <name>get_finish_date</name>
        <qualifiedname>scifir::get_finish_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="32" column="8" declfile="units/unit_basic.hpp" declline="32" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1aa85e6638f63773c5301d2b7b1cb7e4b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::time_duration::display_as_time</definition>
        <argsstring>() const</argsstring>
        <name>display_as_time</name>
        <qualifiedname>scifir::display_as_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="33" column="8" bodyfile="units/unit_basic.cpp" bodystart="208" bodyend="255" declfile="units/unit_basic.hpp" declline="33" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1af032d3e69bafaac30d194d147ddf6290" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::time_duration::display_years</definition>
        <argsstring>() const</argsstring>
        <name>display_years</name>
        <qualifiedname>scifir::display_years</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="35" column="8" bodyfile="units/unit_basic.cpp" bodystart="257" bodyend="262" declfile="units/unit_basic.hpp" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a5bf653341c1a638f09bc54a8b76d097c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::time_duration::display_months</definition>
        <argsstring>() const</argsstring>
        <name>display_months</name>
        <qualifiedname>scifir::display_months</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="36" column="8" bodyfile="units/unit_basic.cpp" bodystart="264" bodyend="269" declfile="units/unit_basic.hpp" declline="36" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a4a5b73053b5dc1cc364ca8660670fffb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::time_duration::display_weeks</definition>
        <argsstring>() const</argsstring>
        <name>display_weeks</name>
        <qualifiedname>scifir::display_weeks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="37" column="8" bodyfile="units/unit_basic.cpp" bodystart="271" bodyend="276" declfile="units/unit_basic.hpp" declline="37" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a5faebdeec95bb6791ae2d53d42573a91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::time_duration::display_days</definition>
        <argsstring>() const</argsstring>
        <name>display_days</name>
        <qualifiedname>scifir::display_days</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="38" column="8" bodyfile="units/unit_basic.cpp" bodystart="278" bodyend="283" declfile="units/unit_basic.hpp" declline="38" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a1f8e741eb3b85fe282da341f15844723" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::time_duration::display_hours</definition>
        <argsstring>() const</argsstring>
        <name>display_hours</name>
        <qualifiedname>scifir::display_hours</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="39" column="8" bodyfile="units/unit_basic.cpp" bodystart="285" bodyend="290" declfile="units/unit_basic.hpp" declline="39" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a403dc718f3c77ae412c16c8fc0dba004" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::time_duration::display_minutes</definition>
        <argsstring>() const</argsstring>
        <name>display_minutes</name>
        <qualifiedname>scifir::display_minutes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="40" column="8" bodyfile="units/unit_basic.cpp" bodystart="292" bodyend="297" declfile="units/unit_basic.hpp" declline="40" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a408a9e07f4fcf24f975e74a1d821f328" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::time_duration::display_seconds</definition>
        <argsstring>() const</argsstring>
        <name>display_seconds</name>
        <qualifiedname>scifir::display_seconds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="41" column="8" bodyfile="units/unit_basic.cpp" bodystart="299" bodyend="304" declfile="units/unit_basic.hpp" declline="41" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1ace00a942ac8b08d76b6342a0d077ed35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>scifir::time_duration &amp;</type>
        <definition>scifir::time_duration &amp; scifir::operator+=</definition>
        <argsstring>(chrono::duration&lt; T1, T2 &gt; x)</argsstring>
        <name>operator+=</name>
        <qualifiedname>scifir::operator+=</qualifiedname>
        <param>
          <type>chrono::duration&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">T1</ref>, <ref refid="classscifir_1_1coordinates__1d" kindref="compound">T2</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="44" column="23" bodyfile="units/unit_basic.hpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a55a548640bd685e27cbfb8a9b4f4daa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>scifir::time_duration &amp;</type>
        <definition>scifir::time_duration &amp; scifir::operator-=</definition>
        <argsstring>(chrono::duration&lt; T1, T2 &gt; x)</argsstring>
        <name>operator-=</name>
        <qualifiedname>scifir::operator-=</qualifiedname>
        <param>
          <type>chrono::duration&lt; <ref refid="classscifir_1_1coordinates__1d" kindref="compound">T1</ref>, <ref refid="classscifir_1_1coordinates__1d" kindref="compound">T2</ref> &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="53" column="23" bodyfile="units/unit_basic.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a8912366c0fc8546ed2586695ba258a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP_BEGIN</definition>
        <argsstring>(mass)</argsstring>
        <name>SCALAR_UNIT_HPP_BEGIN</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP_BEGIN</qualifiedname>
        <param>
          <type>mass</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="63" column="1" declfile="units/unit_basic.hpp" declline="63" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a57b04be31d8ae94e565f25944b38b269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::mass::mass</definition>
        <argsstring>(const percentage &amp;, const mass &amp;)</argsstring>
        <name>mass</name>
        <qualifiedname>scifir::mass</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <defname>new_percentage</defname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> mass &amp;</type>
          <defname>new_mass</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="65" column="1" bodyfile="units/unit_basic.cpp" bodystart="308" bodyend="312" declfile="units/unit_basic.hpp" declline="65" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a3c0e04c5480e6c32f5574a0d21bd04ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::mass::mass</definition>
        <argsstring>(const string &amp;, const string &amp;)</argsstring>
        <name>mass</name>
        <qualifiedname>scifir::mass</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <defname>init_percentage</defname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <defname>init_mass</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="66" column="1" bodyfile="units/unit_basic.cpp" bodystart="314" bodyend="319" declfile="units/unit_basic.hpp" declline="66" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1ad040e69a925b1395c762fa8e038b6e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(charge)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">charge</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="70" column="1" declfile="units/unit_basic.hpp" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1aa51a19ec9985d1cc62eaabb0416e1f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(temperature)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">temperature</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="71" column="1" declfile="units/unit_basic.hpp" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a699cdb289e1cea89a38cdc6f52da5934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP_BEGIN</definition>
        <argsstring>(mole)</argsstring>
        <name>SCALAR_UNIT_HPP_BEGIN</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP_BEGIN</qualifiedname>
        <param>
          <type>mole</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="73" column="1" declfile="units/unit_basic.hpp" declline="73" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a02563174bda1242bbfaf1cf6bf5602cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::mole::mole</definition>
        <argsstring>(const percentage &amp;, const mole &amp;)</argsstring>
        <name>mole</name>
        <qualifiedname>scifir::mole</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1percentage" kindref="compound">percentage</ref> &amp;</type>
          <defname>new_percentage</defname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> mole &amp;</type>
          <defname>new_mole</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="75" column="1" bodyfile="units/unit_basic.cpp" bodystart="325" bodyend="329" declfile="units/unit_basic.hpp" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a404134808903e82123fb8b0e248da321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::mole::mole</definition>
        <argsstring>(const string &amp;, const string &amp;)</argsstring>
        <name>mole</name>
        <qualifiedname>scifir::mole</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <defname>init_percentage</defname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <defname>init_mole</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="76" column="1" bodyfile="units/unit_basic.cpp" bodystart="331" bodyend="336" declfile="units/unit_basic.hpp" declline="76" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a07dbfd98d986d0be701bcbf37568ea06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::mole::number_of_particles</definition>
        <argsstring>() const</argsstring>
        <name>number_of_particles</name>
        <qualifiedname>scifir::number_of_particles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="78" column="5" bodyfile="units/unit_basic.cpp" bodystart="338" bodyend="349" declfile="units/unit_basic.hpp" declline="78" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a43f8fd689bd1a8672d770e696b92ac41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(light)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">light</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="81" column="1" declfile="units/unit_basic.hpp" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="unit__basic_8hpp_1a781dd35a16234e23df5a1d722031bff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scifir::SCALAR_UNIT_HPP</definition>
        <argsstring>(data)</argsstring>
        <name>SCALAR_UNIT_HPP</name>
        <qualifiedname>scifir::SCALAR_UNIT_HPP</qualifiedname>
        <param>
          <type>data</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/unit_basic.hpp" line="82" column="1" declfile="units/unit_basic.hpp" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8cpp_1accc56ab405831f217868c125f41d18d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::norm</definition>
        <argsstring>(const vector_unit_2d &amp;x)</argsstring>
        <name>norm</name>
        <qualifiedname>scifir::norm</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.cpp" line="289" column="13" bodyfile="units/vector_unit_2d.cpp" bodystart="289" bodyend="292" declfile="units/vector_unit_2d.hpp" declline="197" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8cpp_1af0066b26eed63f20591134bd5ba7d140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d scifir::sqrt</definition>
        <argsstring>(const vector_unit_2d &amp;x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>scifir::sqrt</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.cpp" line="294" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="294" bodyend="298" declfile="units/vector_unit_2d.hpp" declline="198" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8cpp_1ab1c0b3eb66fffbfb8148c7fc2492e8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref></type>
        <definition>vector_unit_2d scifir::sqrt_nth</definition>
        <argsstring>(const vector_unit_2d &amp;x, int y)</argsstring>
        <name>sqrt_nth</name>
        <qualifiedname>scifir::sqrt_nth</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.cpp" line="300" column="16" bodyfile="units/vector_unit_2d.cpp" bodystart="300" bodyend="304" declfile="units/vector_unit_2d.hpp" declline="199" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8cpp_1a732fc05956fd18f78cd0019c5c023b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::dot_product</definition>
        <argsstring>(const vector_unit_2d &amp;x, const vector_unit_2d &amp;y)</argsstring>
        <name>dot_product</name>
        <qualifiedname>scifir::dot_product</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.cpp" line="306" column="13" bodyfile="units/vector_unit_2d.cpp" bodystart="306" bodyend="311" declfile="units/vector_unit_2d.hpp" declline="200" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8cpp_1a0a708b03e7faa9893325df448046989c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle_between</definition>
        <argsstring>(const vector_unit_2d &amp;x, const vector_unit_2d &amp;y)</argsstring>
        <name>angle_between</name>
        <qualifiedname>scifir::angle_between</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.cpp" line="313" column="7" bodyfile="units/vector_unit_2d.cpp" bodystart="313" bodyend="316" declfile="units/vector_unit_2d.hpp" declline="201" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8cpp_1a0c8de3e3dd65b45ba57dc8e8cf70c214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::same_direction</definition>
        <argsstring>(const vector_unit_2d &amp;x, const vector_unit_2d &amp;y)</argsstring>
        <name>same_direction</name>
        <qualifiedname>scifir::same_direction</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.cpp" line="318" column="6" bodyfile="units/vector_unit_2d.cpp" bodystart="318" bodyend="321" declfile="units/vector_unit_2d.hpp" declline="202" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8cpp_1a40ba1bb26b9754da01fe9ef6b34d8aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::parallel</definition>
        <argsstring>(const vector_unit_2d &amp;x, const vector_unit_2d &amp;y)</argsstring>
        <name>parallel</name>
        <qualifiedname>scifir::parallel</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.cpp" line="323" column="6" bodyfile="units/vector_unit_2d.cpp" bodystart="323" bodyend="326" declfile="units/vector_unit_2d.hpp" declline="203" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8cpp_1a178f0bea2ceffe06b1a8322b41b9f0b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::orthogonal</definition>
        <argsstring>(const vector_unit_2d &amp;x, const vector_unit_2d &amp;y)</argsstring>
        <name>orthogonal</name>
        <qualifiedname>scifir::orthogonal</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.cpp" line="328" column="6" bodyfile="units/vector_unit_2d.cpp" bodystart="328" bodyend="331" declfile="units/vector_unit_2d.hpp" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__2d_8hpp_1ae6bb7d5fdec290e54946116244c28470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const vector_unit_2d &amp;)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__2d" kindref="compound">vector_unit_2d</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_2d.hpp" line="196" column="8" declfile="units/vector_unit_2d.hpp" declline="196" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1a12256ad91a09112ae1515d2532d5b721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::norm</definition>
        <argsstring>(const vector_unit_3d &amp;x)</argsstring>
        <name>norm</name>
        <qualifiedname>scifir::norm</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="371" column="13" bodyfile="units/vector_unit_3d.cpp" bodystart="371" bodyend="374" declfile="units/vector_unit_3d.hpp" declline="221" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1aff302ba57190c50495faa737867c4512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref></type>
        <definition>vector_unit_3d scifir::sqrt</definition>
        <argsstring>(const vector_unit_3d &amp;x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>scifir::sqrt</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="376" column="16" bodyfile="units/vector_unit_3d.cpp" bodystart="376" bodyend="380" declfile="units/vector_unit_3d.hpp" declline="222" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1a86de525d937251c42f31c316dbf47c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref></type>
        <definition>vector_unit_3d scifir::sqrt_nth</definition>
        <argsstring>(const vector_unit_3d &amp;x, int y)</argsstring>
        <name>sqrt_nth</name>
        <qualifiedname>scifir::sqrt_nth</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="382" column="16" bodyfile="units/vector_unit_3d.cpp" bodystart="382" bodyend="386" declfile="units/vector_unit_3d.hpp" declline="223" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1ace0edee40a69737f575bd80df8dca9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::dot_product</definition>
        <argsstring>(const vector_unit_3d &amp;x, const vector_unit_3d &amp;y)</argsstring>
        <name>dot_product</name>
        <qualifiedname>scifir::dot_product</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="388" column="13" bodyfile="units/vector_unit_3d.cpp" bodystart="388" bodyend="393" declfile="units/vector_unit_3d.hpp" declline="224" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1ac62851b9d931d02184edca7f3db3f1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref></type>
        <definition>vector_unit_3d scifir::cross_product</definition>
        <argsstring>(const vector_unit_3d &amp;x, const vector_unit_3d &amp;y)</argsstring>
        <name>cross_product</name>
        <qualifiedname>scifir::cross_product</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="395" column="16" bodyfile="units/vector_unit_3d.cpp" bodystart="395" bodyend="417" declfile="units/vector_unit_3d.hpp" declline="225" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1ac860ed2437193ce73676374430236859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle_between</definition>
        <argsstring>(const vector_unit_3d &amp;x, const vector_unit_3d &amp;y)</argsstring>
        <name>angle_between</name>
        <qualifiedname>scifir::angle_between</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="419" column="7" bodyfile="units/vector_unit_3d.cpp" bodystart="419" bodyend="422" declfile="units/vector_unit_3d.hpp" declline="226" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1a19f08ffa79111f8085d509dc14c2f1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::same_direction</definition>
        <argsstring>(const vector_unit_3d &amp;x, const vector_unit_3d &amp;y)</argsstring>
        <name>same_direction</name>
        <qualifiedname>scifir::same_direction</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="424" column="6" bodyfile="units/vector_unit_3d.cpp" bodystart="424" bodyend="434" declfile="units/vector_unit_3d.hpp" declline="227" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1ab9afa8da4d4995163fdc49332dea029e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::parallel</definition>
        <argsstring>(const vector_unit_3d &amp;x, const vector_unit_3d &amp;y)</argsstring>
        <name>parallel</name>
        <qualifiedname>scifir::parallel</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="436" column="6" bodyfile="units/vector_unit_3d.cpp" bodystart="436" bodyend="446" declfile="units/vector_unit_3d.hpp" declline="228" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8cpp_1afc6f9fc2154dce1fc4819d1e2333342a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::orthogonal</definition>
        <argsstring>(const vector_unit_3d &amp;x, const vector_unit_3d &amp;y)</argsstring>
        <name>orthogonal</name>
        <qualifiedname>scifir::orthogonal</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.cpp" line="448" column="6" bodyfile="units/vector_unit_3d.cpp" bodystart="448" bodyend="452" declfile="units/vector_unit_3d.hpp" declline="229" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__3d_8hpp_1acbbf0cc7c09a801c007d2d2221ea08f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const vector_unit_3d &amp;)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__3d" kindref="compound">vector_unit_3d</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_3d.hpp" line="220" column="8" declfile="units/vector_unit_3d.hpp" declline="220" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a19bf81b45dc720d4cf1eff9384a3a855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::to_string</definition>
        <argsstring>(const vector_unit_nd &amp;x)</argsstring>
        <name>to_string</name>
        <qualifiedname>scifir::to_string</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="623" column="8" bodyfile="units/vector_unit_nd.cpp" bodystart="623" bodyend="632" declfile="units/vector_unit_nd.hpp" declline="213" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a45d6e5adcea1a2d1344ad68e14c06ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::norm</definition>
        <argsstring>(const vector_unit_nd &amp;x)</argsstring>
        <name>norm</name>
        <qualifiedname>scifir::norm</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="634" column="13" bodyfile="units/vector_unit_nd.cpp" bodystart="634" bodyend="637" declfile="units/vector_unit_nd.hpp" declline="214" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a69f603ae8d0997adaf0012b4e7cc1b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref></type>
        <definition>vector_unit_nd scifir::sqrt</definition>
        <argsstring>(const vector_unit_nd &amp;x)</argsstring>
        <name>sqrt</name>
        <qualifiedname>scifir::sqrt</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="639" column="16" bodyfile="units/vector_unit_nd.cpp" bodystart="639" bodyend="643" declfile="units/vector_unit_nd.hpp" declline="215" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a4e8699b7379be74c2b7429f8bfbf35bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref></type>
        <definition>vector_unit_nd scifir::sqrt_nth</definition>
        <argsstring>(const vector_unit_nd &amp;x, int y)</argsstring>
        <name>sqrt_nth</name>
        <qualifiedname>scifir::sqrt_nth</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="645" column="16" bodyfile="units/vector_unit_nd.cpp" bodystart="645" bodyend="649" declfile="units/vector_unit_nd.hpp" declline="216" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a67a0a2297e97ae52306dccd1bd4b967f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1scalar__unit" kindref="compound">scalar_unit</ref></type>
        <definition>scalar_unit scifir::dot_product</definition>
        <argsstring>(const vector_unit_nd &amp;x, const vector_unit_nd &amp;y)</argsstring>
        <name>dot_product</name>
        <qualifiedname>scifir::dot_product</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="651" column="13" bodyfile="units/vector_unit_nd.cpp" bodystart="651" bodyend="656" declfile="units/vector_unit_nd.hpp" declline="217" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1aab605a7f24254dcab7ebfd5f68aad0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref></type>
        <definition>vector_unit_nd scifir::cross_product</definition>
        <argsstring>(const vector_unit_nd &amp;x, const vector_unit_nd &amp;y)</argsstring>
        <name>cross_product</name>
        <qualifiedname>scifir::cross_product</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="658" column="16" bodyfile="units/vector_unit_nd.cpp" bodystart="658" bodyend="691" declfile="units/vector_unit_nd.hpp" declline="218" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a3c86387f09e250faab77e37b93e84bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1angle" kindref="compound">angle</ref></type>
        <definition>angle scifir::angle_between</definition>
        <argsstring>(const vector_unit_nd &amp;x, const vector_unit_nd &amp;y)</argsstring>
        <name>angle_between</name>
        <qualifiedname>scifir::angle_between</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="693" column="7" bodyfile="units/vector_unit_nd.cpp" bodystart="693" bodyend="696" declfile="units/vector_unit_nd.hpp" declline="219" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a6329769c05bd5f028a1bd369affcd0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::same_nd</definition>
        <argsstring>(const vector_unit_nd &amp;x, const vector_unit_nd &amp;y)</argsstring>
        <name>same_nd</name>
        <qualifiedname>scifir::same_nd</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="698" column="6" bodyfile="units/vector_unit_nd.cpp" bodystart="698" bodyend="708" declfile="units/vector_unit_nd.hpp" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a9b5975992a1a3596759df71fa292d942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::same_direction</definition>
        <argsstring>(const vector_unit_nd &amp;x, const vector_unit_nd &amp;y)</argsstring>
        <name>same_direction</name>
        <qualifiedname>scifir::same_direction</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="710" column="6" bodyfile="units/vector_unit_nd.cpp" bodystart="710" bodyend="720" declfile="units/vector_unit_nd.hpp" declline="221" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1a0990a13516e0cb7a1f0fd7447f79980d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::parallel</definition>
        <argsstring>(const vector_unit_nd &amp;x, const vector_unit_nd &amp;y)</argsstring>
        <name>parallel</name>
        <qualifiedname>scifir::parallel</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="722" column="6" bodyfile="units/vector_unit_nd.cpp" bodystart="722" bodyend="757" declfile="units/vector_unit_nd.hpp" declline="222" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="vector__unit__nd_8cpp_1ab49c86a928920a8b3ffb9d0e42dbcbc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">bool</ref></type>
        <definition>bool scifir::orthogonal</definition>
        <argsstring>(const vector_unit_nd &amp;x, const vector_unit_nd &amp;y)</argsstring>
        <name>orthogonal</name>
        <qualifiedname>scifir::orthogonal</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1vector__unit__nd" kindref="compound">vector_unit_nd</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="units/vector_unit_nd.cpp" line="759" column="6" bodyfile="units/vector_unit_nd.cpp" bodystart="759" bodyend="781" declfile="units/vector_unit_nd.hpp" declline="223" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="types_8cpp_1a9c9ceb42e4206e269ea6bb6ecbf36b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref></type>
        <definition>float scifir::parse_float</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>parse_float</name>
        <qualifiedname>scifir::parse_float</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/types.cpp" line="10" column="7" bodyfile="util/types.cpp" bodystart="10" bodyend="21" declfile="util/types.hpp" declline="10" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="types_8cpp_1adfdadde9749704d6e679fd97651ca573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
        <definition>int scifir::parse_int</definition>
        <argsstring>(const string &amp;x)</argsstring>
        <name>parse_int</name>
        <qualifiedname>scifir::parse_int</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/types.cpp" line="23" column="5" bodyfile="util/types.cpp" bodystart="23" bodyend="34" declfile="util/types.hpp" declline="11" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="types_8cpp_1a6fc5f876bdd1abb1118fc73288152eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">string</ref></type>
        <definition>string scifir::display_float</definition>
        <argsstring>(const float &amp;value, int number_of_decimals)</argsstring>
        <name>display_float</name>
        <qualifiedname>scifir::display_float</qualifiedname>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">const</ref> <ref refid="classscifir_1_1coordinates__1d" kindref="compound">float</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classscifir_1_1coordinates__1d" kindref="compound">int</ref></type>
          <declname>number_of_decimals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util/types.cpp" line="36" column="8" bodyfile="util/types.cpp" bodystart="36" bodyend="55" declfile="util/types.hpp" declline="12" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="coordinates/coordinates_1d.cpp" line="5" column="1"/>
  </compounddef>
</doxygen>
